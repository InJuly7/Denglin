#[version = "0.0.5"]
def @main(%images: Tensor[(1, 3, 640, 640), float32], outputs=["output0"]) -> Tensor[(1, 8400, 84), float32] {
  %25 = dl.quantize(%images, output_scales=[0.00784313f], output_zero_points=[127]) /* fake_quant_0 */ /* ty=Tensor[(1, 3, 640, 640), uint8] */;
  %26 = fn (%FunctionVar_87_0: Tensor[(1, 3, 640, 640), uint8], %FunctionVar_87_1: Tensor[(32, 3, 3, 3), uint8], %FunctionVar_87_2: Tensor[(32), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaebb308)) -> Tensor[(1, 32, 320, 320), uint8] {
    %24 = (%FunctionVar_87_0, %FunctionVar_87_1, %FunctionVar_87_2, meta[relay.Constant][116] /* ty=Tensor[(32), float32] */, meta[relay.Constant][117] /* ty=Tensor[(32), int32] */, meta[relay.Constant][118] /* ty=Tensor[(32), int32] */, meta[relay.Constant][119] /* ty=Tensor[(32), int32] */, meta[relay.Constant][120] /* ty=Tensor[(32), int32] */);
    dl.quantized_conv2d(%24, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00784313f], lhs_zero_points=[127], rhs_scales=[0.165163f, 0.0531446f, 0.113655f, 0.117433f, 0.329493f, 0.056248f, 0.294942f, 0.107614f, 0.208576f, 0.0740886f, 0.0535815f, 0.0718467f, 0.194973f, 0.0096569f, 0.0161429f, 0.0505812f, 0.0691405f, 0.134556f, 0.344863f, 0.0502225f, 0.21311f, 0.26129f, 0.045104f, 0.109688f, 0.108739f, 0.017787f, 0.0909077f, 0.138837f, 0.255068f, 0.189625f, 0.0785204f, 0.305736f], rhs_zero_points=[155, 155, 128, 165, 135, 101, 96, 121, 137, 151, 178, 111, 127, 221, 58, 114, 149, 157, 97, 179, 132, 95, 112, 119, 131, 99, 130, 138, 88, 129, 131, 126], scales=[2.09219f], zero_points=[121]) /* ty=Tensor[(1, 32, 320, 320), uint8] */
  };
  %27 = %26(%25, meta[relay.Constant][121] /* ty=Tensor[(32, 3, 3, 3), uint8] */, meta[relay.Constant][122] /* ty=Tensor[(32), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=127f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00784313f], lhs_zero_points=[127], rhs_scales=[0.165163f, 0.0531446f, 0.113655f, 0.117433f, 0.329493f, 0.056248f, 0.294942f, 0.107614f, 0.208576f, 0.0740886f, 0.0535815f, 0.0718467f, 0.194973f, 0.0096569f, 0.0161429f, 0.0505812f, 0.0691405f, 0.134556f, 0.344863f, 0.0502225f, 0.21311f, 0.26129f, 0.045104f, 0.109688f, 0.108739f, 0.017787f, 0.0909077f, 0.138837f, 0.255068f, 0.189625f, 0.0785204f, 0.305736f], rhs_zero_points=[155, 155, 128, 165, 135, 101, 96, 121, 137, 151, 178, 111, 127, 221, 58, 114, 149, 157, 97, 179, 132, 95, 112, 119, 131, 99, 130, 138, 88, 129, 131, 126], scales=[2.09219f], zero_points=[121], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 32, 320, 320), uint8] */;
  %28 = dl.dequantize(%27, input_scales=[2.09219f], input_zero_points=[121]) /* ty=Tensor[(1, 32, 320, 320), float32] */;
  %29 = sigmoid(%28) /* /model.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 32, 320, 320), float32] */;
  %30 = multiply(%28, %29) /* /model.0/act/Mul_output_0 */ /* ty=Tensor[(1, 32, 320, 320), float32] */;
  %31 = dl.quantize(%30, output_scales=[1.09991f], output_zero_points=[0]) /* fake_quant_3 */ /* ty=Tensor[(1, 32, 320, 320), uint8] */;
  %32 = fn (%FunctionVar_86_0: Tensor[(1, 32, 320, 320), uint8], %FunctionVar_86_1: Tensor[(64, 32, 3, 3), uint8], %FunctionVar_86_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aad0d478)) -> Tensor[(1, 64, 160, 160), uint8] {
    %23 = (%FunctionVar_86_0, %FunctionVar_86_1, %FunctionVar_86_2, meta[relay.Constant][111] /* ty=Tensor[(64), float32] */, meta[relay.Constant][112] /* ty=Tensor[(64), int32] */, meta[relay.Constant][113] /* ty=Tensor[(64), int32] */, meta[relay.Constant][114] /* ty=Tensor[(64), int32] */, meta[relay.Constant][115] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%23, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[1.09991f], lhs_zero_points=[0], rhs_scales=[0.00163272f, 0.00180592f, 0.00348444f, 0.00166841f, 0.00089121f, 0.00325634f, 0.00173453f, 0.00220365f, 0.00826522f, 0.00296355f, 0.00489616f, 0.00307756f, 0.00314861f, 0.00243339f, 0.00399681f, 0.00206799f, 0.00170005f, 0.00387301f, 0.00323433f, 0.00459958f, 0.00106582f, 0.00243554f, 0.00229213f, 0.00212166f, 0.00385464f, 0.00167022f, 0.00234246f, 0.00315434f, 0.00167242f, 0.00283957f, 0.00274083f, 0.00435962f, 0.00138675f, 0.00668415f, 0.0032317f, 0.00255992f, 0.00239162f, 0.00447699f, 0.00431644f, 0.0019159f, 0.000886343f, 0.00301252f, 0.00307327f, 0.00340749f, 0.0026092f, 0.00580937f, 0.00271026f, 0.00336271f, 0.00189027f, 0.00301534f, 0.00312879f, 0.00247457f, 0.00241625f, 0.00289026f, 0.00084498f, 0.00158512f, 0.00334841f, 0.00275559f, 0.00121769f, 0.00354841f, 0.00584023f, 0.00451855f, 0.00201199f, 0.00213093f], rhs_zero_points=[178, 117, 177, 133, 100, 189, 181, 147, 114, 195, 118, 124, 133, 157, 173, 132, 124, 144, 131, 121, 69, 99, 150, 191, 153, 126, 135, 117, 126, 176, 138, 128, 127, 127, 126, 158, 121, 133, 109, 139, 133, 172, 141, 142, 170, 127, 134, 129, 175, 142, 154, 161, 137, 146, 81, 128, 150, 121, 108, 165, 123, 138, 132, 50], scales=[1.69145f], zero_points=[153]) /* ty=Tensor[(1, 64, 160, 160), uint8] */
  };
  %33 = %32(%31, meta[relay.Constant][123] /* ty=Tensor[(64, 32, 3, 3), uint8] */, meta[relay.Constant][124] /* ty=Tensor[(64), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[1.09991f], lhs_zero_points=[0], rhs_scales=[0.00163272f, 0.00180592f, 0.00348444f, 0.00166841f, 0.00089121f, 0.00325634f, 0.00173453f, 0.00220365f, 0.00826522f, 0.00296355f, 0.00489616f, 0.00307756f, 0.00314861f, 0.00243339f, 0.00399681f, 0.00206799f, 0.00170005f, 0.00387301f, 0.00323433f, 0.00459958f, 0.00106582f, 0.00243554f, 0.00229213f, 0.00212166f, 0.00385464f, 0.00167022f, 0.00234246f, 0.00315434f, 0.00167242f, 0.00283957f, 0.00274083f, 0.00435962f, 0.00138675f, 0.00668415f, 0.0032317f, 0.00255992f, 0.00239162f, 0.00447699f, 0.00431644f, 0.0019159f, 0.000886343f, 0.00301252f, 0.00307327f, 0.00340749f, 0.0026092f, 0.00580937f, 0.00271026f, 0.00336271f, 0.00189027f, 0.00301534f, 0.00312879f, 0.00247457f, 0.00241625f, 0.00289026f, 0.00084498f, 0.00158512f, 0.00334841f, 0.00275559f, 0.00121769f, 0.00354841f, 0.00584023f, 0.00451855f, 0.00201199f, 0.00213093f], rhs_zero_points=[178, 117, 177, 133, 100, 189, 181, 147, 114, 195, 118, 124, 133, 157, 173, 132, 124, 144, 131, 121, 69, 99, 150, 191, 153, 126, 135, 117, 126, 176, 138, 128, 127, 127, 126, 158, 121, 133, 109, 139, 133, 172, 141, 142, 170, 127, 134, 129, 175, 142, 154, 161, 137, 146, 81, 128, 150, 121, 108, 165, 123, 138, 132, 50], scales=[1.69145f], zero_points=[153], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 160, 160), uint8] */;
  %34 = dl.dequantize(%33, input_scales=[1.69145f], input_zero_points=[153]) /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %35 = sigmoid(%34) /* /model.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %36 = multiply(%34, %35) /* /model.1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %37 = dl.quantize(%36, output_scales=[0.678248f], output_zero_points=[0]) /* fake_quant_6 */ /* ty=Tensor[(1, 64, 160, 160), uint8] */;
  %38 = fn (%FunctionVar_85_0: Tensor[(1, 64, 160, 160), uint8], %FunctionVar_85_1: Tensor[(64, 64, 1, 1), uint8], %FunctionVar_85_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a73d7688)) -> Tensor[(1, 64, 160, 160), uint8] {
    %22 = (%FunctionVar_85_0, %FunctionVar_85_1, %FunctionVar_85_2, meta[relay.Constant][106] /* ty=Tensor[(64), float32] */, meta[relay.Constant][107] /* ty=Tensor[(64), int32] */, meta[relay.Constant][108] /* ty=Tensor[(64), int32] */, meta[relay.Constant][109] /* ty=Tensor[(64), int32] */, meta[relay.Constant][110] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%22, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.678248f], lhs_zero_points=[0], rhs_scales=[0.00301499f, 0.00190631f, 0.00296947f, 0.00214275f, 0.00156416f, 0.00253829f, 0.00150498f, 0.00277984f, 0.00210879f, 0.0017718f, 0.00153534f, 0.00312607f, 0.00485193f, 0.00292821f, 0.00226563f, 0.00108675f, 0.00117865f, 0.00224571f, 0.00180728f, 0.00287158f, 0.00288426f, 0.00198075f, 0.00105064f, 0.0026786f, 0.00144349f, 0.00207494f, 0.00150442f, 0.00308556f, 0.00233553f, 0.00091992f, 0.00262135f, 0.00223882f, 0.000949676f, 0.00177892f, 0.000982748f, 0.000674102f, 0.00307471f, 0.0017159f, 0.00374502f, 0.00123294f, 0.00269658f, 0.00308174f, 0.00111957f, 0.00569714f, 0.000734201f, 0.00115809f, 0.000705122f, 0.00407753f, 0.0008326f, 0.00383677f, 0.00328915f, 0.00382807f, 0.00125235f, 0.000639053f, 0.0014449f, 0.00621745f, 0.00365802f, 0.00320674f, 0.00118621f, 0.00334086f, 0.00138811f, 0.00529914f, 0.00484552f, 0.00119474f], rhs_zero_points=[113, 126, 171, 117, 150, 177, 160, 126, 134, 129, 106, 166, 167, 136, 173, 77, 120, 231, 143, 148, 153, 170, 128, 133, 170, 184, 171, 143, 158, 161, 179, 164, 118, 146, 165, 150, 186, 145, 185, 155, 183, 174, 103, 187, 95, 176, 108, 192, 122, 184, 105, 210, 169, 125, 209, 205, 195, 184, 170, 211, 161, 207, 176, 126], scales=[0.488364f], zero_points=[175]) /* ty=Tensor[(1, 64, 160, 160), uint8] */
  };
  %39 = %38(%37, meta[relay.Constant][125] /* ty=Tensor[(64, 64, 1, 1), uint8] */, meta[relay.Constant][126] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.678248f], lhs_zero_points=[0], rhs_scales=[0.00301499f, 0.00190631f, 0.00296947f, 0.00214275f, 0.00156416f, 0.00253829f, 0.00150498f, 0.00277984f, 0.00210879f, 0.0017718f, 0.00153534f, 0.00312607f, 0.00485193f, 0.00292821f, 0.00226563f, 0.00108675f, 0.00117865f, 0.00224571f, 0.00180728f, 0.00287158f, 0.00288426f, 0.00198075f, 0.00105064f, 0.0026786f, 0.00144349f, 0.00207494f, 0.00150442f, 0.00308556f, 0.00233553f, 0.00091992f, 0.00262135f, 0.00223882f, 0.000949676f, 0.00177892f, 0.000982748f, 0.000674102f, 0.00307471f, 0.0017159f, 0.00374502f, 0.00123294f, 0.00269658f, 0.00308174f, 0.00111957f, 0.00569714f, 0.000734201f, 0.00115809f, 0.000705122f, 0.00407753f, 0.0008326f, 0.00383677f, 0.00328915f, 0.00382807f, 0.00125235f, 0.000639053f, 0.0014449f, 0.00621745f, 0.00365802f, 0.00320674f, 0.00118621f, 0.00334086f, 0.00138811f, 0.00529914f, 0.00484552f, 0.00119474f], rhs_zero_points=[113, 126, 171, 117, 150, 177, 160, 126, 134, 129, 106, 166, 167, 136, 173, 77, 120, 231, 143, 148, 153, 170, 128, 133, 170, 184, 171, 143, 158, 161, 179, 164, 118, 146, 165, 150, 186, 145, 185, 155, 183, 174, 103, 187, 95, 176, 108, 192, 122, 184, 105, 210, 169, 125, 209, 205, 195, 184, 170, 211, 161, 207, 176, 126], scales=[0.488364f], zero_points=[175], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 160, 160), uint8] */;
  %40 = dl.dequantize(%39, input_scales=[0.488364f], input_zero_points=[175]) /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %41 = sigmoid(%40) /* /model.2/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %42 = multiply(%40, %41) /* /model.2/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 160, 160), float32] */;
  %43 = fn (%FunctionVar_10_0: Tensor[(1, 64, 160, 160), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c051d8)) -> (Tensor[(1, 32, 160, 160), float32], Tensor[(1, 32, 160, 160), float32]) {
    split(%FunctionVar_10_0, indices_or_sections=[32], axis=1) /* /model.2/Split_output_0 */ /* ty=(Tensor[(1, 32, 160, 160), float32], Tensor[(1, 32, 160, 160), float32]) */
  };
  %44 = %43(%42, indices_or_sections=[32], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 32, 160, 160), float32], Tensor[(1, 32, 160, 160), float32]) */;
  %47 = %44.1;
  %48 = dl.quantize(%47, output_scales=[0.104687f], output_zero_points=[3]) /* fake_quant_9 */ /* ty=Tensor[(1, 32, 160, 160), uint8] */;
  %49 = fn (%FunctionVar_84_0: Tensor[(1, 32, 160, 160), uint8], %FunctionVar_84_1: Tensor[(16, 32, 3, 3), uint8], %FunctionVar_84_2: Tensor[(16), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adc2fb28)) -> Tensor[(1, 16, 160, 160), uint8] {
    %46 = (%FunctionVar_84_0, %FunctionVar_84_1, %FunctionVar_84_2, meta[relay.Constant][132] /* ty=Tensor[(16), float32] */, meta[relay.Constant][133] /* ty=Tensor[(16), int32] */, meta[relay.Constant][134] /* ty=Tensor[(16), int32] */, meta[relay.Constant][135] /* ty=Tensor[(16), int32] */, meta[relay.Constant][136] /* ty=Tensor[(16), int32] */);
    dl.quantized_conv2d(%46, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.104687f], lhs_zero_points=[3], rhs_scales=[0.00367073f, 0.00434746f, 0.00291269f, 0.00270565f, 0.00367728f, 0.00222698f, 0.00350082f, 0.00479823f, 0.00203246f, 0.00578855f, 0.00569972f, 0.00590259f, 0.00400949f, 0.00538045f, 0.00289719f, 0.00545114f], rhs_zero_points=[123, 155, 113, 115, 131, 147, 124, 134, 126, 166, 105, 163, 136, 105, 124, 115], scales=[0.142729f], zero_points=[131]) /* ty=Tensor[(1, 16, 160, 160), uint8] */
  };
  %50 = %49(%48, meta[relay.Constant][137] /* ty=Tensor[(16, 32, 3, 3), uint8] */, meta[relay.Constant][138] /* ty=Tensor[(16), int32] */, kernel_size=[3, 3], pad_value=3f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.104687f], lhs_zero_points=[3], rhs_scales=[0.00367073f, 0.00434746f, 0.00291269f, 0.00270565f, 0.00367728f, 0.00222698f, 0.00350082f, 0.00479823f, 0.00203246f, 0.00578855f, 0.00569972f, 0.00590259f, 0.00400949f, 0.00538045f, 0.00289719f, 0.00545114f], rhs_zero_points=[123, 155, 113, 115, 131, 147, 124, 134, 126, 166, 105, 163, 136, 105, 124, 115], scales=[0.142729f], zero_points=[131], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 16, 160, 160), uint8] */;
  %51 = dl.dequantize(%50, input_scales=[0.142729f], input_zero_points=[131]) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %52 = sigmoid(%51) /* /model.2/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %53 = multiply(%51, %52) /* /model.2/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %54 = dl.quantize(%53, output_scales=[0.0703915f], output_zero_points=[4]) /* fake_quant_12 */ /* ty=Tensor[(1, 16, 160, 160), uint8] */;
  %55 = fn (%FunctionVar_83_0: Tensor[(1, 16, 160, 160), uint8], %FunctionVar_83_1: Tensor[(32, 16, 3, 3), uint8], %FunctionVar_83_2: Tensor[(32), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aafa6be8)) -> Tensor[(1, 32, 160, 160), uint8] {
    %45 = (%FunctionVar_83_0, %FunctionVar_83_1, %FunctionVar_83_2, meta[relay.Constant][127] /* ty=Tensor[(32), float32] */, meta[relay.Constant][128] /* ty=Tensor[(32), int32] */, meta[relay.Constant][129] /* ty=Tensor[(32), int32] */, meta[relay.Constant][130] /* ty=Tensor[(32), int32] */, meta[relay.Constant][131] /* ty=Tensor[(32), int32] */);
    dl.quantized_conv2d(%45, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0703915f], lhs_zero_points=[4], rhs_scales=[0.00623171f, 0.00469363f, 0.00434193f, 0.00431814f, 0.00576306f, 0.0107572f, 0.00678216f, 0.00654325f, 0.00393467f, 0.0056466f, 0.00683136f, 0.00685323f, 0.00384143f, 0.00843177f, 0.00438953f, 0.00521829f, 0.0103064f, 0.00665968f, 0.00604148f, 0.00745388f, 0.00508992f, 0.00626722f, 0.00626539f, 0.00769288f, 0.00513383f, 0.00600131f, 0.00415096f, 0.00885954f, 0.00576091f, 0.00571524f, 0.00704441f, 0.0105666f], rhs_zero_points=[197, 116, 94, 135, 116, 154, 82, 111, 136, 105, 112, 124, 100, 126, 148, 132, 135, 116, 143, 163, 142, 141, 165, 147, 73, 101, 161, 152, 128, 130, 189, 135], scales=[0.175751f], zero_points=[160]) /* ty=Tensor[(1, 32, 160, 160), uint8] */
  };
  %56 = %55(%54, meta[relay.Constant][139] /* ty=Tensor[(32, 16, 3, 3), uint8] */, meta[relay.Constant][140] /* ty=Tensor[(32), int32] */, kernel_size=[3, 3], pad_value=4f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0703915f], lhs_zero_points=[4], rhs_scales=[0.00623171f, 0.00469363f, 0.00434193f, 0.00431814f, 0.00576306f, 0.0107572f, 0.00678216f, 0.00654325f, 0.00393467f, 0.0056466f, 0.00683136f, 0.00685323f, 0.00384143f, 0.00843177f, 0.00438953f, 0.00521829f, 0.0103064f, 0.00665968f, 0.00604148f, 0.00745388f, 0.00508992f, 0.00626722f, 0.00626539f, 0.00769288f, 0.00513383f, 0.00600131f, 0.00415096f, 0.00885954f, 0.00576091f, 0.00571524f, 0.00704441f, 0.0105666f], rhs_zero_points=[197, 116, 94, 135, 116, 154, 82, 111, 136, 105, 112, 124, 100, 126, 148, 132, 135, 116, 143, 163, 142, 141, 165, 147, 73, 101, 161, 152, 128, 130, 189, 135], scales=[0.175751f], zero_points=[160], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 32, 160, 160), uint8] */;
  %57 = dl.dequantize(%56, input_scales=[0.175751f], input_zero_points=[160]) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %58 = sigmoid(%57) /* /model.2/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %59 = multiply(%57, %58) /* /model.2/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %60 = %44.0;
  %61 = add(%47, %59) /* /model.2/m.0/Add_output_0 */ /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %62 = (%60, %47, %61);
  %63 = concatenate(%62, axis=1) /* /model.2/Concat_output_0 */ /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %64 = dl.quantize(%63, output_scales=[0.156112f], output_zero_points=[4]) /* fake_quant_15 */ /* ty=Tensor[(1, 96, 160, 160), uint8] */;
  %65 = fn (%FunctionVar_82_0: Tensor[(1, 96, 160, 160), uint8], %FunctionVar_82_1: Tensor[(128, 96, 1, 1), uint8], %FunctionVar_82_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab04c1b8)) -> Tensor[(1, 128, 160, 160), uint8] {
    %21 = (%FunctionVar_82_0, %FunctionVar_82_1, %FunctionVar_82_2, meta[relay.Constant][101] /* ty=Tensor[(128), float32] */, meta[relay.Constant][102] /* ty=Tensor[(128), int32] */, meta[relay.Constant][103] /* ty=Tensor[(128), int32] */, meta[relay.Constant][104] /* ty=Tensor[(128), int32] */, meta[relay.Constant][105] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%21, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.156112f], lhs_zero_points=[4], rhs_scales=[0.00441929f, 0.00331763f, 0.00307584f, 0.00306333f, 0.00289879f, 0.00365605f, 0.00299694f, 0.00410788f, 0.00705326f, 0.00322339f, 0.00360998f, 0.00520175f, 0.00362211f, 0.00335869f, 0.00380957f, 0.00307292f, 0.00456731f, 0.00347076f, 0.00186414f, 0.00323118f, 0.00383105f, 0.00341656f, 0.00379673f, 0.00497427f, 0.00321557f, 0.00439356f, 0.00182426f, 0.00416324f, 0.00515548f, 0.00276263f, 0.00285829f, 0.00373183f, 0.00250008f, 0.00347094f, 0.00428118f, 0.00314988f, 0.00288755f, 0.00357646f, 0.00346175f, 0.00367574f, 0.00276812f, 0.00339399f, 0.00239158f, 0.00186216f, 0.00395575f, 0.00360543f, 0.00260736f, 0.00297124f, 0.00547798f, 0.00398995f, 0.00332314f, 0.00326607f, 0.00297161f, 0.00323053f, 0.00437774f, 0.00338827f, 0.00410839f, 0.00448472f, 0.00291923f, 0.00349471f, 0.00601709f, 0.00421625f, 0.00299743f, 0.00304077f, 0.00277075f, 0.00309898f, 0.00389816f, 0.00262193f, 0.00233568f, 0.00369663f, 0.00435276f, 0.00378055f, 0.00247881f, 0.00310456f, 0.00735989f, 0.00367308f, 0.00290931f, 0.00262933f, 0.00248342f, 0.00337214f, 0.00448777f, 0.00392177f, 0.00305453f, 0.00248332f, 0.00339886f, 0.002079f, 0.00311881f, 0.00415743f, 0.0041778f, 0.00330672f, 0.00549656f, 0.00376232f, 0.00381129f, 0.00310618f, 0.00665323f, 0.0030156f, 0.00315403f, 0.0037407f, 0.00565335f, 0.00345666f, 0.00377494f, 0.00293158f, 0.00310904f, 0.0040914f, 0.00272925f, 0.00404603f, 0.00515861f, 0.0028375f, 0.00369013f, 0.00235612f, 0.00594656f, 0.00268597f, 0.0024455f, 0.00211484f, 0.0036456f, 0.00516493f, 0.00447432f, 0.00289127f, 0.00593836f, 0.00489118f, 0.00369833f, 0.00200179f, 0.00244011f, 0.00417726f, 0.00290885f, 0.00328674f, 0.00301761f, 0.00361959f], rhs_zero_points=[95, 102, 146, 122, 154, 175, 154, 153, 140, 54, 171, 150, 168, 148, 94, 141, 124, 172, 139, 129, 141, 136, 123, 154, 153, 48, 150, 167, 146, 132, 127, 151, 121, 89, 103, 151, 136, 106, 139, 132, 120, 138, 160, 133, 132, 129, 162, 132, 139, 160, 128, 144, 123, 156, 158, 115, 141, 164, 160, 113, 156, 159, 126, 101, 131, 141, 148, 112, 74, 150, 120, 172, 136, 126, 179, 108, 152, 145, 150, 134, 152, 128, 138, 143, 150, 172, 146, 165, 134, 158, 115, 146, 155, 99, 126, 122, 150, 127, 190, 170, 178, 184, 115, 135, 163, 152, 179, 135, 137, 130, 156, 139, 112, 111, 136, 126, 136, 126, 162, 171, 130, 110, 154, 146, 113, 138, 180, 107], scales=[0.294575f], zero_points=[200]) /* ty=Tensor[(1, 128, 160, 160), uint8] */
  };
  %66 = %65(%64, meta[relay.Constant][141] /* ty=Tensor[(128, 96, 1, 1), uint8] */, meta[relay.Constant][142] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.156112f], lhs_zero_points=[4], rhs_scales=[0.00441929f, 0.00331763f, 0.00307584f, 0.00306333f, 0.00289879f, 0.00365605f, 0.00299694f, 0.00410788f, 0.00705326f, 0.00322339f, 0.00360998f, 0.00520175f, 0.00362211f, 0.00335869f, 0.00380957f, 0.00307292f, 0.00456731f, 0.00347076f, 0.00186414f, 0.00323118f, 0.00383105f, 0.00341656f, 0.00379673f, 0.00497427f, 0.00321557f, 0.00439356f, 0.00182426f, 0.00416324f, 0.00515548f, 0.00276263f, 0.00285829f, 0.00373183f, 0.00250008f, 0.00347094f, 0.00428118f, 0.00314988f, 0.00288755f, 0.00357646f, 0.00346175f, 0.00367574f, 0.00276812f, 0.00339399f, 0.00239158f, 0.00186216f, 0.00395575f, 0.00360543f, 0.00260736f, 0.00297124f, 0.00547798f, 0.00398995f, 0.00332314f, 0.00326607f, 0.00297161f, 0.00323053f, 0.00437774f, 0.00338827f, 0.00410839f, 0.00448472f, 0.00291923f, 0.00349471f, 0.00601709f, 0.00421625f, 0.00299743f, 0.00304077f, 0.00277075f, 0.00309898f, 0.00389816f, 0.00262193f, 0.00233568f, 0.00369663f, 0.00435276f, 0.00378055f, 0.00247881f, 0.00310456f, 0.00735989f, 0.00367308f, 0.00290931f, 0.00262933f, 0.00248342f, 0.00337214f, 0.00448777f, 0.00392177f, 0.00305453f, 0.00248332f, 0.00339886f, 0.002079f, 0.00311881f, 0.00415743f, 0.0041778f, 0.00330672f, 0.00549656f, 0.00376232f, 0.00381129f, 0.00310618f, 0.00665323f, 0.0030156f, 0.00315403f, 0.0037407f, 0.00565335f, 0.00345666f, 0.00377494f, 0.00293158f, 0.00310904f, 0.0040914f, 0.00272925f, 0.00404603f, 0.00515861f, 0.0028375f, 0.00369013f, 0.00235612f, 0.00594656f, 0.00268597f, 0.0024455f, 0.00211484f, 0.0036456f, 0.00516493f, 0.00447432f, 0.00289127f, 0.00593836f, 0.00489118f, 0.00369833f, 0.00200179f, 0.00244011f, 0.00417726f, 0.00290885f, 0.00328674f, 0.00301761f, 0.00361959f], rhs_zero_points=[95, 102, 146, 122, 154, 175, 154, 153, 140, 54, 171, 150, 168, 148, 94, 141, 124, 172, 139, 129, 141, 136, 123, 154, 153, 48, 150, 167, 146, 132, 127, 151, 121, 89, 103, 151, 136, 106, 139, 132, 120, 138, 160, 133, 132, 129, 162, 132, 139, 160, 128, 144, 123, 156, 158, 115, 141, 164, 160, 113, 156, 159, 126, 101, 131, 141, 148, 112, 74, 150, 120, 172, 136, 126, 179, 108, 152, 145, 150, 134, 152, 128, 138, 143, 150, 172, 146, 165, 134, 158, 115, 146, 155, 99, 126, 122, 150, 127, 190, 170, 178, 184, 115, 135, 163, 152, 179, 135, 137, 130, 156, 139, 112, 111, 136, 126, 136, 126, 162, 171, 130, 110, 154, 146, 113, 138, 180, 107], scales=[0.294575f], zero_points=[200], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 160, 160), uint8] */;
  %67 = dl.dequantize(%66, input_scales=[0.294575f], input_zero_points=[200]) /* ty=Tensor[(1, 128, 160, 160), float32] */;
  %68 = sigmoid(%67) /* /model.2/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 160, 160), float32] */;
  %69 = multiply(%67, %68) /* /model.2/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 160, 160), float32] */;
  %70 = dl.quantize(%69, output_scales=[0.0644309f], output_zero_points=[4]) /* fake_quant_18 */ /* ty=Tensor[(1, 128, 160, 160), uint8] */;
  %71 = fn (%FunctionVar_81_0: Tensor[(1, 128, 160, 160), uint8], %FunctionVar_81_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_81_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae0dde8)) -> Tensor[(1, 128, 80, 80), uint8] {
    %20 = (%FunctionVar_81_0, %FunctionVar_81_1, %FunctionVar_81_2, meta[relay.Constant][96] /* ty=Tensor[(128), float32] */, meta[relay.Constant][97] /* ty=Tensor[(128), int32] */, meta[relay.Constant][98] /* ty=Tensor[(128), int32] */, meta[relay.Constant][99] /* ty=Tensor[(128), int32] */, meta[relay.Constant][100] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%20, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0644309f], lhs_zero_points=[4], rhs_scales=[0.000908248f, 0.00130991f, 0.00131068f, 0.00179176f, 0.000763727f, 0.00124793f, 0.000438014f, 0.000561784f, 0.001378f, 0.00177048f, 0.000542012f, 0.0010954f, 0.000920185f, 0.000666149f, 0.00105567f, 0.00137161f, 0.00093845f, 0.00107076f, 0.00126854f, 0.00104532f, 0.000841723f, 0.000986587f, 0.000394358f, 0.00121229f, 0.000582052f, 0.00045913f, 0.000643157f, 0.000660926f, 0.00134872f, 0.00106532f, 0.000804697f, 0.000501086f, 0.000875709f, 0.000499855f, 0.000625781f, 0.00158045f, 0.000878019f, 0.000875519f, 0.000527577f, 0.00177087f, 0.000868015f, 0.00130688f, 0.000855877f, 0.00158562f, 0.000698039f, 0.00115732f, 0.00109601f, 0.00132417f, 0.00158748f, 0.000476484f, 0.00148977f, 0.00147749f, 0.00107764f, 0.000697549f, 0.000412128f, 0.00047604f, 0.00112595f, 0.000503703f, 0.00108166f, 0.000635638f, 0.00123419f, 0.00122633f, 0.00129036f, 0.000672325f, 0.000581288f, 0.000957929f, 0.0010607f, 0.000868785f, 0.000746646f, 0.000962092f, 0.00105793f, 0.00110824f, 0.000810788f, 0.00102379f, 0.00128216f, 0.00122861f, 0.0014959f, 0.000789747f, 0.00133335f, 0.000730234f, 0.000972708f, 0.00042671f, 0.000658473f, 0.000674593f, 0.00121552f, 0.000913255f, 0.000482833f, 0.00111732f, 0.000473153f, 0.000835818f, 0.000608011f, 0.000547082f, 0.000885134f, 0.0018277f, 0.00065233f, 0.000864608f, 0.000919886f, 0.00081698f, 0.00100369f, 0.00111708f, 0.00129901f, 0.000461692f, 0.000507841f, 0.000584853f, 0.00129107f, 0.00180299f, 0.000342688f, 0.000863383f, 0.000754274f, 0.000432451f, 0.0005976f, 0.000730579f, 0.0011578f, 0.00122949f, 0.00123629f, 0.000944481f, 0.000395952f, 0.000925713f, 0.00127405f, 0.000550973f, 0.000802166f, 0.00104524f, 0.000742861f, 0.000355597f, 0.00129673f, 0.00074395f, 0.000684817f, 0.0012905f], rhs_zero_points=[139, 142, 157, 151, 154, 120, 102, 150, 169, 124, 138, 154, 156, 179, 156, 139, 132, 132, 182, 140, 175, 146, 135, 127, 151, 131, 100, 116, 121, 189, 116, 122, 146, 136, 114, 179, 180, 126, 118, 142, 116, 161, 143, 132, 144, 151, 124, 140, 146, 129, 155, 118, 156, 127, 138, 118, 166, 164, 137, 160, 136, 142, 124, 177, 179, 90, 152, 134, 147, 180, 150, 116, 134, 138, 159, 149, 189, 147, 146, 150, 135, 73, 184, 129, 123, 120, 155, 136, 153, 144, 141, 129, 154, 142, 158, 166, 163, 147, 119, 127, 140, 124, 108, 136, 157, 136, 140, 106, 142, 131, 127, 130, 162, 144, 148, 134, 113, 147, 152, 156, 129, 137, 118, 105, 132, 113, 148, 135], scales=[0.0948229f], zero_points=[182]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %72 = %71(%70, meta[relay.Constant][143] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][144] /* ty=Tensor[(128), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=4f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0644309f], lhs_zero_points=[4], rhs_scales=[0.000908248f, 0.00130991f, 0.00131068f, 0.00179176f, 0.000763727f, 0.00124793f, 0.000438014f, 0.000561784f, 0.001378f, 0.00177048f, 0.000542012f, 0.0010954f, 0.000920185f, 0.000666149f, 0.00105567f, 0.00137161f, 0.00093845f, 0.00107076f, 0.00126854f, 0.00104532f, 0.000841723f, 0.000986587f, 0.000394358f, 0.00121229f, 0.000582052f, 0.00045913f, 0.000643157f, 0.000660926f, 0.00134872f, 0.00106532f, 0.000804697f, 0.000501086f, 0.000875709f, 0.000499855f, 0.000625781f, 0.00158045f, 0.000878019f, 0.000875519f, 0.000527577f, 0.00177087f, 0.000868015f, 0.00130688f, 0.000855877f, 0.00158562f, 0.000698039f, 0.00115732f, 0.00109601f, 0.00132417f, 0.00158748f, 0.000476484f, 0.00148977f, 0.00147749f, 0.00107764f, 0.000697549f, 0.000412128f, 0.00047604f, 0.00112595f, 0.000503703f, 0.00108166f, 0.000635638f, 0.00123419f, 0.00122633f, 0.00129036f, 0.000672325f, 0.000581288f, 0.000957929f, 0.0010607f, 0.000868785f, 0.000746646f, 0.000962092f, 0.00105793f, 0.00110824f, 0.000810788f, 0.00102379f, 0.00128216f, 0.00122861f, 0.0014959f, 0.000789747f, 0.00133335f, 0.000730234f, 0.000972708f, 0.00042671f, 0.000658473f, 0.000674593f, 0.00121552f, 0.000913255f, 0.000482833f, 0.00111732f, 0.000473153f, 0.000835818f, 0.000608011f, 0.000547082f, 0.000885134f, 0.0018277f, 0.00065233f, 0.000864608f, 0.000919886f, 0.00081698f, 0.00100369f, 0.00111708f, 0.00129901f, 0.000461692f, 0.000507841f, 0.000584853f, 0.00129107f, 0.00180299f, 0.000342688f, 0.000863383f, 0.000754274f, 0.000432451f, 0.0005976f, 0.000730579f, 0.0011578f, 0.00122949f, 0.00123629f, 0.000944481f, 0.000395952f, 0.000925713f, 0.00127405f, 0.000550973f, 0.000802166f, 0.00104524f, 0.000742861f, 0.000355597f, 0.00129673f, 0.00074395f, 0.000684817f, 0.0012905f], rhs_zero_points=[139, 142, 157, 151, 154, 120, 102, 150, 169, 124, 138, 154, 156, 179, 156, 139, 132, 132, 182, 140, 175, 146, 135, 127, 151, 131, 100, 116, 121, 189, 116, 122, 146, 136, 114, 179, 180, 126, 118, 142, 116, 161, 143, 132, 144, 151, 124, 140, 146, 129, 155, 118, 156, 127, 138, 118, 166, 164, 137, 160, 136, 142, 124, 177, 179, 90, 152, 134, 147, 180, 150, 116, 134, 138, 159, 149, 189, 147, 146, 150, 135, 73, 184, 129, 123, 120, 155, 136, 153, 144, 141, 129, 154, 142, 158, 166, 163, 147, 119, 127, 140, 124, 108, 136, 157, 136, 140, 106, 142, 131, 127, 130, 162, 144, 148, 134, 113, 147, 152, 156, 129, 137, 118, 105, 132, 113, 148, 135], scales=[0.0948229f], zero_points=[182], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %73 = dl.dequantize(%72, input_scales=[0.0948229f], input_zero_points=[182]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %74 = sigmoid(%73) /* /model.3/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %75 = multiply(%73, %74) /* /model.3/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %76 = dl.quantize(%75, output_scales=[0.0283322f], output_zero_points=[10]) /* fake_quant_21 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %77 = fn (%FunctionVar_80_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_80_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_80_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9647848)) -> Tensor[(1, 128, 80, 80), uint8] {
    %19 = (%FunctionVar_80_0, %FunctionVar_80_1, %FunctionVar_80_2, meta[relay.Constant][91] /* ty=Tensor[(128), float32] */, meta[relay.Constant][92] /* ty=Tensor[(128), int32] */, meta[relay.Constant][93] /* ty=Tensor[(128), int32] */, meta[relay.Constant][94] /* ty=Tensor[(128), int32] */, meta[relay.Constant][95] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%19, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0283322f], lhs_zero_points=[10], rhs_scales=[0.00433894f, 0.00228729f, 0.00747913f, 0.00498949f, 0.00466752f, 0.0092624f, 0.00275711f, 0.00363338f, 0.00616783f, 0.00527382f, 0.00306994f, 0.0037661f, 0.00337675f, 0.0066243f, 0.00463375f, 0.00490597f, 0.00471699f, 0.00346774f, 0.00608992f, 0.00414036f, 0.00228119f, 0.00316614f, 0.00905491f, 0.00753561f, 0.00353188f, 0.00589649f, 0.00315035f, 0.0054635f, 0.00607448f, 0.00288944f, 0.00371237f, 0.00365233f, 0.00368275f, 0.00725851f, 0.00321525f, 0.00272124f, 0.00264018f, 0.00343236f, 0.00381982f, 0.00319847f, 0.00245105f, 0.00461351f, 0.00332159f, 0.00238184f, 0.00915747f, 0.00444122f, 0.00775076f, 0.00356294f, 0.00288419f, 0.00336538f, 0.00317505f, 0.00252304f, 0.00444606f, 0.00277605f, 0.0100096f, 0.00350221f, 0.00904212f, 0.00397672f, 0.00378349f, 0.00224032f, 0.00453319f, 0.00721881f, 0.0046405f, 0.00625633f, 0.00283794f, 0.0020754f, 0.00485955f, 0.00346972f, 0.00368323f, 0.0021855f, 0.00345842f, 0.00322296f, 0.00209265f, 0.00652584f, 0.00468508f, 0.00250058f, 0.00198772f, 0.00239307f, 0.00301528f, 0.00437508f, 0.00563206f, 0.00537848f, 0.0028883f, 0.00245292f, 0.00256679f, 0.00269153f, 0.00381951f, 0.00247509f, 0.00223131f, 0.00188822f, 0.00254119f, 0.0023564f, 0.00134998f, 0.00160794f, 0.00227576f, 0.00207494f, 0.0028316f, 0.00186898f, 0.00185352f, 0.0027213f, 0.00255578f, 0.00183478f, 0.00201699f, 0.00223638f, 0.00222782f, 0.00163656f, 0.00236513f, 0.00402721f, 0.00225219f, 0.00317074f, 0.00301219f, 0.0025905f, 0.00261845f, 0.0023502f, 0.00283735f, 0.00237102f, 0.00293208f, 0.00289862f, 0.00298086f, 0.001814f, 0.00311622f, 0.00219369f, 0.00563953f, 0.00271026f, 0.00191026f, 0.00261713f, 0.00212627f, 0.00330036f], rhs_zero_points=[198, 120, 189, 132, 177, 155, 113, 199, 186, 110, 142, 128, 191, 117, 149, 115, 163, 109, 210, 147, 122, 175, 139, 94, 93, 134, 142, 131, 176, 119, 148, 110, 165, 96, 162, 146, 115, 131, 126, 164, 135, 150, 164, 144, 180, 107, 178, 111, 156, 171, 171, 122, 111, 119, 138, 151, 120, 151, 131, 142, 180, 118, 197, 97, 119, 134, 132, 126, 136, 154, 154, 106, 133, 77, 113, 157, 134, 122, 93, 123, 203, 153, 149, 123, 130, 110, 157, 112, 129, 141, 121, 147, 156, 125, 119, 140, 146, 131, 139, 187, 99, 139, 160, 166, 125, 179, 121, 95, 141, 146, 132, 142, 177, 153, 115, 126, 116, 136, 109, 90, 143, 151, 200, 126, 163, 166, 144, 177], scales=[0.0675718f], zero_points=[171]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %78 = %77(%76, meta[relay.Constant][145] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][146] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0283322f], lhs_zero_points=[10], rhs_scales=[0.00433894f, 0.00228729f, 0.00747913f, 0.00498949f, 0.00466752f, 0.0092624f, 0.00275711f, 0.00363338f, 0.00616783f, 0.00527382f, 0.00306994f, 0.0037661f, 0.00337675f, 0.0066243f, 0.00463375f, 0.00490597f, 0.00471699f, 0.00346774f, 0.00608992f, 0.00414036f, 0.00228119f, 0.00316614f, 0.00905491f, 0.00753561f, 0.00353188f, 0.00589649f, 0.00315035f, 0.0054635f, 0.00607448f, 0.00288944f, 0.00371237f, 0.00365233f, 0.00368275f, 0.00725851f, 0.00321525f, 0.00272124f, 0.00264018f, 0.00343236f, 0.00381982f, 0.00319847f, 0.00245105f, 0.00461351f, 0.00332159f, 0.00238184f, 0.00915747f, 0.00444122f, 0.00775076f, 0.00356294f, 0.00288419f, 0.00336538f, 0.00317505f, 0.00252304f, 0.00444606f, 0.00277605f, 0.0100096f, 0.00350221f, 0.00904212f, 0.00397672f, 0.00378349f, 0.00224032f, 0.00453319f, 0.00721881f, 0.0046405f, 0.00625633f, 0.00283794f, 0.0020754f, 0.00485955f, 0.00346972f, 0.00368323f, 0.0021855f, 0.00345842f, 0.00322296f, 0.00209265f, 0.00652584f, 0.00468508f, 0.00250058f, 0.00198772f, 0.00239307f, 0.00301528f, 0.00437508f, 0.00563206f, 0.00537848f, 0.0028883f, 0.00245292f, 0.00256679f, 0.00269153f, 0.00381951f, 0.00247509f, 0.00223131f, 0.00188822f, 0.00254119f, 0.0023564f, 0.00134998f, 0.00160794f, 0.00227576f, 0.00207494f, 0.0028316f, 0.00186898f, 0.00185352f, 0.0027213f, 0.00255578f, 0.00183478f, 0.00201699f, 0.00223638f, 0.00222782f, 0.00163656f, 0.00236513f, 0.00402721f, 0.00225219f, 0.00317074f, 0.00301219f, 0.0025905f, 0.00261845f, 0.0023502f, 0.00283735f, 0.00237102f, 0.00293208f, 0.00289862f, 0.00298086f, 0.001814f, 0.00311622f, 0.00219369f, 0.00563953f, 0.00271026f, 0.00191026f, 0.00261713f, 0.00212627f, 0.00330036f], rhs_zero_points=[198, 120, 189, 132, 177, 155, 113, 199, 186, 110, 142, 128, 191, 117, 149, 115, 163, 109, 210, 147, 122, 175, 139, 94, 93, 134, 142, 131, 176, 119, 148, 110, 165, 96, 162, 146, 115, 131, 126, 164, 135, 150, 164, 144, 180, 107, 178, 111, 156, 171, 171, 122, 111, 119, 138, 151, 120, 151, 131, 142, 180, 118, 197, 97, 119, 134, 132, 126, 136, 154, 154, 106, 133, 77, 113, 157, 134, 122, 93, 123, 203, 153, 149, 123, 130, 110, 157, 112, 129, 141, 121, 147, 156, 125, 119, 140, 146, 131, 139, 187, 99, 139, 160, 166, 125, 179, 121, 95, 141, 146, 132, 142, 177, 153, 115, 126, 116, 136, 109, 90, 143, 151, 200, 126, 163, 166, 144, 177], scales=[0.0675718f], zero_points=[171], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %79 = dl.dequantize(%78, input_scales=[0.0675718f], input_zero_points=[171]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %80 = sigmoid(%79) /* /model.4/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %81 = multiply(%79, %80) /* /model.4/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %82 = fn (%FunctionVar_9_0: Tensor[(1, 128, 80, 80), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf11958)) -> (Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) {
    split(%FunctionVar_9_0, indices_or_sections=[64], axis=1) /* /model.4/Split_output_0 */ /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) */
  };
  %83 = %82(%81, indices_or_sections=[64], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) */;
  %86 = %83.1;
  %87 = dl.quantize(%86, output_scales=[0.0138693f], output_zero_points=[20]) /* fake_quant_24 */ /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %88 = fn (%FunctionVar_79_0: Tensor[(1, 64, 80, 80), uint8], %FunctionVar_79_1: Tensor[(32, 64, 3, 3), uint8], %FunctionVar_79_2: Tensor[(32), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab02d658)) -> Tensor[(1, 32, 80, 80), uint8] {
    %85 = (%FunctionVar_79_0, %FunctionVar_79_1, %FunctionVar_79_2, meta[relay.Constant][152] /* ty=Tensor[(32), float32] */, meta[relay.Constant][153] /* ty=Tensor[(32), int32] */, meta[relay.Constant][154] /* ty=Tensor[(32), int32] */, meta[relay.Constant][155] /* ty=Tensor[(32), int32] */, meta[relay.Constant][156] /* ty=Tensor[(32), int32] */);
    dl.quantized_conv2d(%85, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0138693f], lhs_zero_points=[20], rhs_scales=[0.00203798f, 0.00181642f, 0.00174007f, 0.00306882f, 0.00217805f, 0.00186167f, 0.00287909f, 0.0018198f, 0.00266533f, 0.00166192f, 0.00378638f, 0.00310967f, 0.00351566f, 0.00282409f, 0.00177242f, 0.00275501f, 0.0019965f, 0.00187577f, 0.00343635f, 0.00165772f, 0.00310892f, 0.0017724f, 0.00241674f, 0.00120946f, 0.00477794f, 0.00252715f, 0.00155122f, 0.00161914f, 0.0036006f, 0.00298687f, 0.00210496f, 0.00355574f], rhs_zero_points=[155, 134, 133, 138, 154, 148, 125, 133, 138, 135, 137, 171, 158, 141, 143, 170, 139, 125, 157, 160, 166, 131, 156, 135, 176, 122, 145, 136, 151, 162, 146, 172], scales=[0.0271007f], zero_points=[140]) /* ty=Tensor[(1, 32, 80, 80), uint8] */
  };
  %89 = %88(%87, meta[relay.Constant][157] /* ty=Tensor[(32, 64, 3, 3), uint8] */, meta[relay.Constant][158] /* ty=Tensor[(32), int32] */, kernel_size=[3, 3], pad_value=20f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0138693f], lhs_zero_points=[20], rhs_scales=[0.00203798f, 0.00181642f, 0.00174007f, 0.00306882f, 0.00217805f, 0.00186167f, 0.00287909f, 0.0018198f, 0.00266533f, 0.00166192f, 0.00378638f, 0.00310967f, 0.00351566f, 0.00282409f, 0.00177242f, 0.00275501f, 0.0019965f, 0.00187577f, 0.00343635f, 0.00165772f, 0.00310892f, 0.0017724f, 0.00241674f, 0.00120946f, 0.00477794f, 0.00252715f, 0.00155122f, 0.00161914f, 0.0036006f, 0.00298687f, 0.00210496f, 0.00355574f], rhs_zero_points=[155, 134, 133, 138, 154, 148, 125, 133, 138, 135, 137, 171, 158, 141, 143, 170, 139, 125, 157, 160, 166, 131, 156, 135, 176, 122, 145, 136, 151, 162, 146, 172], scales=[0.0271007f], zero_points=[140], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 32, 80, 80), uint8] */;
  %90 = dl.dequantize(%89, input_scales=[0.0271007f], input_zero_points=[140]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %91 = sigmoid(%90) /* /model.4/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %92 = multiply(%90, %91) /* /model.4/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %93 = dl.quantize(%92, output_scales=[0.0127459f], output_zero_points=[22]) /* fake_quant_27 */ /* ty=Tensor[(1, 32, 80, 80), uint8] */;
  %94 = fn (%FunctionVar_78_0: Tensor[(1, 32, 80, 80), uint8], %FunctionVar_78_1: Tensor[(64, 32, 3, 3), uint8], %FunctionVar_78_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf889d8)) -> Tensor[(1, 64, 80, 80), uint8] {
    %84 = (%FunctionVar_78_0, %FunctionVar_78_1, %FunctionVar_78_2, meta[relay.Constant][147] /* ty=Tensor[(64), float32] */, meta[relay.Constant][148] /* ty=Tensor[(64), int32] */, meta[relay.Constant][149] /* ty=Tensor[(64), int32] */, meta[relay.Constant][150] /* ty=Tensor[(64), int32] */, meta[relay.Constant][151] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%84, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0127459f], lhs_zero_points=[22], rhs_scales=[0.00316209f, 0.00334069f, 0.00333103f, 0.00437642f, 0.00323544f, 0.00276971f, 0.00599865f, 0.00291365f, 0.00308549f, 0.00442103f, 0.00621892f, 0.00269596f, 0.00319582f, 0.00407128f, 0.00778079f, 0.00462673f, 0.00376741f, 0.00522139f, 0.0057109f, 0.00578597f, 0.00415047f, 0.00288532f, 0.00340989f, 0.0032654f, 0.00279775f, 0.00858514f, 0.0037482f, 0.00462214f, 0.00334388f, 0.00252869f, 0.00358933f, 0.00416614f, 0.0035808f, 0.00294987f, 0.00366495f, 0.00323489f, 0.0050478f, 0.00563357f, 0.00557549f, 0.00611239f, 0.00307821f, 0.00221071f, 0.00472626f, 0.00315885f, 0.0025618f, 0.00465342f, 0.0035818f, 0.00453649f, 0.00529167f, 0.00446027f, 0.00520359f, 0.00274602f, 0.00328074f, 0.00363767f, 0.00476534f, 0.00249627f, 0.00351161f, 0.00393894f, 0.00333895f, 0.00334919f, 0.00308794f, 0.00332667f, 0.00330573f, 0.00415028f], rhs_zero_points=[122, 107, 122, 132, 121, 153, 115, 121, 129, 145, 170, 104, 110, 116, 130, 109, 128, 141, 128, 118, 147, 106, 105, 124, 113, 180, 126, 166, 114, 162, 142, 97, 143, 138, 147, 112, 127, 107, 149, 157, 118, 134, 107, 146, 101, 143, 153, 121, 114, 136, 87, 144, 109, 115, 130, 143, 107, 127, 144, 145, 143, 140, 175, 138], scales=[0.0380351f], zero_points=[140]) /* ty=Tensor[(1, 64, 80, 80), uint8] */
  };
  %95 = %94(%93, meta[relay.Constant][159] /* ty=Tensor[(64, 32, 3, 3), uint8] */, meta[relay.Constant][160] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=22f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0127459f], lhs_zero_points=[22], rhs_scales=[0.00316209f, 0.00334069f, 0.00333103f, 0.00437642f, 0.00323544f, 0.00276971f, 0.00599865f, 0.00291365f, 0.00308549f, 0.00442103f, 0.00621892f, 0.00269596f, 0.00319582f, 0.00407128f, 0.00778079f, 0.00462673f, 0.00376741f, 0.00522139f, 0.0057109f, 0.00578597f, 0.00415047f, 0.00288532f, 0.00340989f, 0.0032654f, 0.00279775f, 0.00858514f, 0.0037482f, 0.00462214f, 0.00334388f, 0.00252869f, 0.00358933f, 0.00416614f, 0.0035808f, 0.00294987f, 0.00366495f, 0.00323489f, 0.0050478f, 0.00563357f, 0.00557549f, 0.00611239f, 0.00307821f, 0.00221071f, 0.00472626f, 0.00315885f, 0.0025618f, 0.00465342f, 0.0035818f, 0.00453649f, 0.00529167f, 0.00446027f, 0.00520359f, 0.00274602f, 0.00328074f, 0.00363767f, 0.00476534f, 0.00249627f, 0.00351161f, 0.00393894f, 0.00333895f, 0.00334919f, 0.00308794f, 0.00332667f, 0.00330573f, 0.00415028f], rhs_zero_points=[122, 107, 122, 132, 121, 153, 115, 121, 129, 145, 170, 104, 110, 116, 130, 109, 128, 141, 128, 118, 147, 106, 105, 124, 113, 180, 126, 166, 114, 162, 142, 97, 143, 138, 147, 112, 127, 107, 149, 157, 118, 134, 107, 146, 101, 143, 153, 121, 114, 136, 87, 144, 109, 115, 130, 143, 107, 127, 144, 145, 143, 140, 175, 138], scales=[0.0380351f], zero_points=[140], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %96 = dl.dequantize(%95, input_scales=[0.0380351f], input_zero_points=[140]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %97 = sigmoid(%96) /* /model.4/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %98 = multiply(%96, %97) /* /model.4/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %99 = %83.0;
  %100 = add(%86, %98) /* /model.4/m.0/Add_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %101 = (%99, %86, %100);
  %102 = concatenate(%101, axis=1) /* /model.4/Concat_output_0 */ /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %103 = dl.quantize(%102, output_scales=[0.0252872f], output_zero_points=[22]) /* fake_quant_30 */ /* ty=Tensor[(1, 192, 80, 80), uint8] */;
  %104 = fn (%FunctionVar_77_0: Tensor[(1, 192, 80, 80), uint8], %FunctionVar_77_1: Tensor[(256, 192, 1, 1), uint8], %FunctionVar_77_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55add12c48)) -> Tensor[(1, 256, 80, 80), uint8] {
    %18 = (%FunctionVar_77_0, %FunctionVar_77_1, %FunctionVar_77_2, meta[relay.Constant][86] /* ty=Tensor[(256), float32] */, meta[relay.Constant][87] /* ty=Tensor[(256), int32] */, meta[relay.Constant][88] /* ty=Tensor[(256), int32] */, meta[relay.Constant][89] /* ty=Tensor[(256), int32] */, meta[relay.Constant][90] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%18, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0252872f], lhs_zero_points=[22], rhs_scales=[0.00231434f, 0.0027921f, 0.00337394f, 0.00305253f, 0.00335078f, 0.0024555f, 0.00262633f, 0.00270413f, 0.00303016f, 0.00183343f, 0.00296137f, 0.00266574f, 0.00495053f, 0.00318063f, 0.00167176f, 0.00200069f, 0.00251985f, 0.00187274f, 0.00341775f, 0.00277371f, 0.00215189f, 0.00306251f, 0.0057539f, 0.00201825f, 0.00335286f, 0.00257279f, 0.00328892f, 0.00257268f, 0.0021721f, 0.00256283f, 0.00185827f, 0.00317711f, 0.00221312f, 0.00261188f, 0.00237003f, 0.00328582f, 0.00406592f, 0.00428927f, 0.00326843f, 0.00530908f, 0.00210391f, 0.0041632f, 0.00362674f, 0.00440734f, 0.00218194f, 0.00250122f, 0.00277784f, 0.00298793f, 0.00338044f, 0.00373065f, 0.00195579f, 0.00393119f, 0.00189949f, 0.00281753f, 0.0028302f, 0.00229738f, 0.00346402f, 0.00283505f, 0.00354638f, 0.00301032f, 0.00272455f, 0.00274967f, 0.00304866f, 0.00359011f, 0.00404098f, 0.00369081f, 0.00352913f, 0.00282578f, 0.00278346f, 0.00360413f, 0.00311369f, 0.00394719f, 0.00347155f, 0.00325697f, 0.00254172f, 0.00327331f, 0.00280004f, 0.00332794f, 0.00128843f, 0.0029168f, 0.00286266f, 0.00341894f, 0.0021677f, 0.0022073f, 0.00317483f, 0.00259798f, 0.00267552f, 0.00321473f, 0.00118391f, 0.00488325f, 0.00384518f, 0.00323265f, 0.00304998f, 0.00292525f, 0.00152646f, 0.00184623f, 0.00356814f, 0.00301435f, 0.0032255f, 0.0046806f, 0.00191874f, 0.00392483f, 0.00319311f, 0.00407374f, 0.00292564f, 0.00289919f, 0.00329995f, 0.00238696f, 0.0023606f, 0.00295146f, 0.00183088f, 0.00274962f, 0.00303552f, 0.00227997f, 0.0037106f, 0.00258625f, 0.00198431f, 0.00444131f, 0.00459428f, 0.00324363f, 0.00397073f, 0.00399269f, 0.00256691f, 0.0027607f, 0.00418539f, 0.00197082f, 0.00320803f, 0.00277965f, 0.00176992f, 0.00458787f, 0.0033875f, 0.00564573f, 0.00289383f, 0.00365757f, 0.00249806f, 0.00223433f, 0.00301506f, 0.00324262f, 0.00251781f, 0.00339133f, 0.00216115f, 0.00479833f, 0.00329838f, 0.00273168f, 0.00316787f, 0.00250083f, 0.00288647f, 0.00284889f, 0.00204876f, 0.00359972f, 0.0028376f, 0.00370519f, 0.00125538f, 0.0031332f, 0.00340855f, 0.00277881f, 0.00274934f, 0.00238241f, 0.0025977f, 0.00460823f, 0.00261383f, 0.00388909f, 0.00199079f, 0.00318449f, 0.00243332f, 0.00183825f, 0.00268754f, 0.00402899f, 0.00210869f, 0.00261065f, 0.00322076f, 0.00453593f, 0.0024647f, 0.00252787f, 0.00411696f, 0.00288063f, 0.0022469f, 0.00390493f, 0.00188419f, 0.00180178f, 0.00169688f, 0.00239203f, 0.00299393f, 0.00150107f, 0.00314523f, 0.00195599f, 0.00352429f, 0.00256093f, 0.00260704f, 0.00418048f, 0.00319151f, 0.00382255f, 0.00330405f, 0.00363081f, 0.00474347f, 0.00429813f, 0.00276052f, 0.00183314f, 0.00183363f, 0.00252043f, 0.00395108f, 0.00251592f, 0.00367803f, 0.0036599f, 0.00221269f, 0.00245269f, 0.00298736f, 0.00348307f, 0.00320908f, 0.00228302f, 0.00219965f, 0.0022252f, 0.00279979f, 0.00341889f, 0.00345825f, 0.00354212f, 0.00456947f, 0.00276192f, 0.00254485f, 0.00131086f, 0.00276074f, 0.00338767f, 0.001398f, 0.00214799f, 0.00226128f, 0.0029517f, 0.00296425f, 0.00332339f, 0.00390568f, 0.0027878f, 0.00363742f, 0.00257308f, 0.00456209f, 0.00360782f, 0.00368188f, 0.00264621f, 0.00284639f, 0.0022299f, 0.00231981f, 0.0034511f, 0.00191257f, 0.0027142f, 0.00359445f, 0.00613461f, 0.00146555f, 0.00309613f, 0.00290702f, 0.00428563f, 0.00309271f, 0.00550237f, 0.00461692f, 0.00383698f, 0.00368179f, 0.00188216f, 0.00230524f, 0.00200366f], rhs_zero_points=[122, 85, 133, 147, 108, 170, 128, 123, 98, 131, 127, 116, 137, 119, 142, 81, 135, 137, 120, 125, 101, 121, 207, 112, 142, 107, 158, 157, 153, 130, 152, 82, 131, 113, 161, 136, 92, 142, 159, 101, 146, 127, 147, 140, 110, 142, 157, 149, 147, 116, 145, 159, 137, 128, 141, 130, 101, 142, 159, 101, 122, 178, 149, 123, 184, 103, 103, 129, 129, 138, 133, 142, 125, 121, 144, 101, 100, 142, 121, 139, 109, 132, 163, 143, 103, 169, 158, 180, 140, 156, 97, 177, 161, 160, 128, 175, 169, 151, 161, 73, 139, 179, 111, 128, 152, 132, 115, 114, 137, 113, 108, 152, 129, 136, 119, 115, 108, 90, 175, 133, 105, 172, 141, 145, 111, 134, 107, 156, 130, 156, 137, 109, 120, 160, 140, 118, 109, 175, 126, 118, 121, 130, 143, 110, 103, 154, 127, 141, 145, 104, 159, 140, 100, 127, 124, 158, 188, 151, 139, 65, 132, 125, 128, 138, 122, 160, 153, 86, 155, 128, 85, 153, 135, 123, 148, 119, 137, 68, 139, 105, 128, 132, 164, 171, 148, 142, 125, 134, 131, 79, 146, 113, 138, 151, 148, 177, 120, 126, 136, 109, 146, 123, 174, 104, 130, 144, 117, 122, 141, 140, 128, 112, 108, 141, 142, 126, 138, 115, 118, 112, 149, 129, 151, 137, 148, 142, 107, 136, 165, 146, 143, 104, 83, 174, 111, 173, 156, 130, 130, 101, 164, 144, 166, 194, 134, 163, 150, 132, 168, 152, 145, 126, 185, 151, 146, 128], scales=[0.0425981f], zero_points=[187]) /* ty=Tensor[(1, 256, 80, 80), uint8] */
  };
  %105 = %104(%103, meta[relay.Constant][161] /* ty=Tensor[(256, 192, 1, 1), uint8] */, meta[relay.Constant][162] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0252872f], lhs_zero_points=[22], rhs_scales=[0.00231434f, 0.0027921f, 0.00337394f, 0.00305253f, 0.00335078f, 0.0024555f, 0.00262633f, 0.00270413f, 0.00303016f, 0.00183343f, 0.00296137f, 0.00266574f, 0.00495053f, 0.00318063f, 0.00167176f, 0.00200069f, 0.00251985f, 0.00187274f, 0.00341775f, 0.00277371f, 0.00215189f, 0.00306251f, 0.0057539f, 0.00201825f, 0.00335286f, 0.00257279f, 0.00328892f, 0.00257268f, 0.0021721f, 0.00256283f, 0.00185827f, 0.00317711f, 0.00221312f, 0.00261188f, 0.00237003f, 0.00328582f, 0.00406592f, 0.00428927f, 0.00326843f, 0.00530908f, 0.00210391f, 0.0041632f, 0.00362674f, 0.00440734f, 0.00218194f, 0.00250122f, 0.00277784f, 0.00298793f, 0.00338044f, 0.00373065f, 0.00195579f, 0.00393119f, 0.00189949f, 0.00281753f, 0.0028302f, 0.00229738f, 0.00346402f, 0.00283505f, 0.00354638f, 0.00301032f, 0.00272455f, 0.00274967f, 0.00304866f, 0.00359011f, 0.00404098f, 0.00369081f, 0.00352913f, 0.00282578f, 0.00278346f, 0.00360413f, 0.00311369f, 0.00394719f, 0.00347155f, 0.00325697f, 0.00254172f, 0.00327331f, 0.00280004f, 0.00332794f, 0.00128843f, 0.0029168f, 0.00286266f, 0.00341894f, 0.0021677f, 0.0022073f, 0.00317483f, 0.00259798f, 0.00267552f, 0.00321473f, 0.00118391f, 0.00488325f, 0.00384518f, 0.00323265f, 0.00304998f, 0.00292525f, 0.00152646f, 0.00184623f, 0.00356814f, 0.00301435f, 0.0032255f, 0.0046806f, 0.00191874f, 0.00392483f, 0.00319311f, 0.00407374f, 0.00292564f, 0.00289919f, 0.00329995f, 0.00238696f, 0.0023606f, 0.00295146f, 0.00183088f, 0.00274962f, 0.00303552f, 0.00227997f, 0.0037106f, 0.00258625f, 0.00198431f, 0.00444131f, 0.00459428f, 0.00324363f, 0.00397073f, 0.00399269f, 0.00256691f, 0.0027607f, 0.00418539f, 0.00197082f, 0.00320803f, 0.00277965f, 0.00176992f, 0.00458787f, 0.0033875f, 0.00564573f, 0.00289383f, 0.00365757f, 0.00249806f, 0.00223433f, 0.00301506f, 0.00324262f, 0.00251781f, 0.00339133f, 0.00216115f, 0.00479833f, 0.00329838f, 0.00273168f, 0.00316787f, 0.00250083f, 0.00288647f, 0.00284889f, 0.00204876f, 0.00359972f, 0.0028376f, 0.00370519f, 0.00125538f, 0.0031332f, 0.00340855f, 0.00277881f, 0.00274934f, 0.00238241f, 0.0025977f, 0.00460823f, 0.00261383f, 0.00388909f, 0.00199079f, 0.00318449f, 0.00243332f, 0.00183825f, 0.00268754f, 0.00402899f, 0.00210869f, 0.00261065f, 0.00322076f, 0.00453593f, 0.0024647f, 0.00252787f, 0.00411696f, 0.00288063f, 0.0022469f, 0.00390493f, 0.00188419f, 0.00180178f, 0.00169688f, 0.00239203f, 0.00299393f, 0.00150107f, 0.00314523f, 0.00195599f, 0.00352429f, 0.00256093f, 0.00260704f, 0.00418048f, 0.00319151f, 0.00382255f, 0.00330405f, 0.00363081f, 0.00474347f, 0.00429813f, 0.00276052f, 0.00183314f, 0.00183363f, 0.00252043f, 0.00395108f, 0.00251592f, 0.00367803f, 0.0036599f, 0.00221269f, 0.00245269f, 0.00298736f, 0.00348307f, 0.00320908f, 0.00228302f, 0.00219965f, 0.0022252f, 0.00279979f, 0.00341889f, 0.00345825f, 0.00354212f, 0.00456947f, 0.00276192f, 0.00254485f, 0.00131086f, 0.00276074f, 0.00338767f, 0.001398f, 0.00214799f, 0.00226128f, 0.0029517f, 0.00296425f, 0.00332339f, 0.00390568f, 0.0027878f, 0.00363742f, 0.00257308f, 0.00456209f, 0.00360782f, 0.00368188f, 0.00264621f, 0.00284639f, 0.0022299f, 0.00231981f, 0.0034511f, 0.00191257f, 0.0027142f, 0.00359445f, 0.00613461f, 0.00146555f, 0.00309613f, 0.00290702f, 0.00428563f, 0.00309271f, 0.00550237f, 0.00461692f, 0.00383698f, 0.00368179f, 0.00188216f, 0.00230524f, 0.00200366f], rhs_zero_points=[122, 85, 133, 147, 108, 170, 128, 123, 98, 131, 127, 116, 137, 119, 142, 81, 135, 137, 120, 125, 101, 121, 207, 112, 142, 107, 158, 157, 153, 130, 152, 82, 131, 113, 161, 136, 92, 142, 159, 101, 146, 127, 147, 140, 110, 142, 157, 149, 147, 116, 145, 159, 137, 128, 141, 130, 101, 142, 159, 101, 122, 178, 149, 123, 184, 103, 103, 129, 129, 138, 133, 142, 125, 121, 144, 101, 100, 142, 121, 139, 109, 132, 163, 143, 103, 169, 158, 180, 140, 156, 97, 177, 161, 160, 128, 175, 169, 151, 161, 73, 139, 179, 111, 128, 152, 132, 115, 114, 137, 113, 108, 152, 129, 136, 119, 115, 108, 90, 175, 133, 105, 172, 141, 145, 111, 134, 107, 156, 130, 156, 137, 109, 120, 160, 140, 118, 109, 175, 126, 118, 121, 130, 143, 110, 103, 154, 127, 141, 145, 104, 159, 140, 100, 127, 124, 158, 188, 151, 139, 65, 132, 125, 128, 138, 122, 160, 153, 86, 155, 128, 85, 153, 135, 123, 148, 119, 137, 68, 139, 105, 128, 132, 164, 171, 148, 142, 125, 134, 131, 79, 146, 113, 138, 151, 148, 177, 120, 126, 136, 109, 146, 123, 174, 104, 130, 144, 117, 122, 141, 140, 128, 112, 108, 141, 142, 126, 138, 115, 118, 112, 149, 129, 151, 137, 148, 142, 107, 136, 165, 146, 143, 104, 83, 174, 111, 173, 156, 130, 130, 101, 164, 144, 166, 194, 134, 163, 150, 132, 168, 152, 145, 126, 185, 151, 146, 128], scales=[0.0425981f], zero_points=[187], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 80, 80), uint8] */;
  %106 = dl.dequantize(%105, input_scales=[0.0425981f], input_zero_points=[187]) /* ty=Tensor[(1, 256, 80, 80), float32] */;
  %107 = sigmoid(%106) /* /model.4/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 80, 80), float32] */;
  %108 = multiply(%106, %107) /* /model.4/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 80, 80), float32] */;
  %109 = dl.quantize(%108, output_scales=[0.0118357f], output_zero_points=[24]) /* fake_quant_33 */ /* ty=Tensor[(1, 256, 80, 80), uint8] */;
  %110 = fn (%FunctionVar_76_0: Tensor[(1, 256, 80, 80), uint8], %FunctionVar_76_1: Tensor[(256, 256, 3, 3), uint8], %FunctionVar_76_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab0ba6a8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %17 = (%FunctionVar_76_0, %FunctionVar_76_1, %FunctionVar_76_2, meta[relay.Constant][81] /* ty=Tensor[(256), float32] */, meta[relay.Constant][82] /* ty=Tensor[(256), int32] */, meta[relay.Constant][83] /* ty=Tensor[(256), int32] */, meta[relay.Constant][84] /* ty=Tensor[(256), int32] */, meta[relay.Constant][85] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%17, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0118357f], lhs_zero_points=[24], rhs_scales=[0.00183936f, 0.000843056f, 0.000763179f, 0.0010754f, 0.00142475f, 0.00259818f, 0.00101114f, 0.00161844f, 0.000870755f, 0.0010784f, 0.00118149f, 0.000793086f, 0.00170222f, 0.00177651f, 0.00117693f, 0.001576f, 0.00171777f, 0.00281155f, 0.00137735f, 0.00316696f, 0.00166064f, 0.00175037f, 0.00100103f, 0.00123626f, 0.000872451f, 0.00183754f, 0.0018146f, 0.00142517f, 0.00207865f, 0.00149668f, 0.00161172f, 0.00184614f, 0.00145803f, 0.00143911f, 0.00175077f, 0.00158579f, 0.00103627f, 0.00180843f, 0.00200964f, 0.00123827f, 0.00113224f, 0.00106605f, 0.00179149f, 0.00241111f, 0.00121865f, 0.00197148f, 0.00150178f, 0.00166033f, 0.00187429f, 0.0011775f, 0.00116509f, 0.00164395f, 0.0016006f, 0.00178152f, 0.000818057f, 0.00123109f, 0.00190099f, 0.00156855f, 0.000986338f, 0.00164805f, 0.00174635f, 0.000889511f, 0.001771f, 0.00230684f, 0.00142151f, 0.00111791f, 0.00198409f, 0.00176355f, 0.00107974f, 0.00334387f, 0.00155711f, 0.000898906f, 0.00272906f, 0.002489f, 0.00176502f, 0.00200625f, 0.0043017f, 0.00176127f, 0.00110911f, 0.00140844f, 0.00225239f, 0.00140626f, 0.00275104f, 0.00154147f, 0.00131756f, 0.00214881f, 0.00179639f, 0.00185127f, 0.00200087f, 0.00100674f, 0.00141203f, 0.00119314f, 0.00124884f, 0.0010508f, 0.00166748f, 0.00176882f, 0.00253803f, 0.00142887f, 0.00168104f, 0.00185193f, 0.0013389f, 0.000915112f, 0.000636219f, 0.00183795f, 0.00168701f, 0.00181994f, 0.00226167f, 0.000980849f, 0.00146892f, 0.00103974f, 0.00209971f, 0.00105817f, 0.00240901f, 0.000768881f, 0.00165374f, 0.00104204f, 0.00200719f, 0.00115732f, 0.00170172f, 0.0016117f, 0.00151814f, 0.00154061f, 0.00130301f, 0.00136733f, 0.00202331f, 0.00111856f, 0.00168172f, 0.000852218f, 0.00213095f, 0.00157464f, 0.00170313f, 0.00184434f, 0.0015515f, 0.00202439f, 0.00189451f, 0.00163839f, 0.00236776f, 0.00074433f, 0.0010175f, 0.00212273f, 0.00107942f, 0.00174599f, 0.000837927f, 0.00195298f, 0.00190529f, 0.00347795f, 0.00296616f, 0.00144566f, 0.00111495f, 0.00118759f, 0.00214812f, 0.00106089f, 0.000873921f, 0.00168175f, 0.00131971f, 0.00136976f, 0.00197047f, 0.00175076f, 0.000810969f, 0.00138642f, 0.00111587f, 0.000965621f, 0.00105331f, 0.00241398f, 0.00201153f, 0.00113502f, 0.00110702f, 0.00206193f, 0.000866591f, 0.0015659f, 0.00130261f, 0.000723881f, 0.00144101f, 0.00168401f, 0.00192023f, 0.00172194f, 0.00189507f, 0.00101142f, 0.00197754f, 0.00106456f, 0.00141269f, 0.00160391f, 0.00133972f, 0.00190062f, 0.00141692f, 0.00252211f, 0.00144347f, 0.0017404f, 0.00164112f, 0.00156024f, 0.00142886f, 0.0011994f, 0.00126562f, 0.00142367f, 0.000876565f, 0.00185304f, 0.00135095f, 0.00102215f, 0.00263122f, 0.00144018f, 0.00148771f, 0.00137275f, 0.00173197f, 0.00194838f, 0.000754785f, 0.0018762f, 0.00136318f, 0.00108803f, 0.000924232f, 0.00244878f, 0.00242858f, 0.00117874f, 0.00180963f, 0.00151424f, 0.00163766f, 0.00284237f, 0.00152161f, 0.00126029f, 0.0021436f, 0.000755227f, 0.00132425f, 0.0025542f, 0.00133338f, 0.00122787f, 0.00100127f, 0.00135903f, 0.00199242f, 0.00186484f, 0.00137247f, 0.00120959f, 0.00260782f, 0.00100074f, 0.00197541f, 0.00218449f, 0.00126197f, 0.00106291f, 0.00177942f, 0.00178436f, 0.00112576f, 0.0010718f, 0.00172867f, 0.00164622f, 0.00356402f, 0.0016396f, 0.00157091f, 0.00175897f, 0.00241187f, 0.00108146f, 0.00174729f, 0.00145267f, 0.00188525f, 0.00339196f, 0.00227753f, 0.00143191f, 0.00219562f, 0.00146768f], rhs_zero_points=[117, 136, 129, 124, 112, 155, 169, 128, 104, 123, 102, 142, 129, 116, 123, 128, 89, 76, 156, 154, 150, 100, 115, 111, 138, 117, 115, 145, 91, 116, 102, 118, 122, 114, 122, 132, 113, 99, 172, 110, 87, 172, 143, 152, 172, 107, 113, 128, 136, 141, 136, 132, 126, 117, 125, 97, 160, 138, 128, 122, 133, 124, 120, 90, 131, 130, 153, 191, 136, 150, 182, 135, 163, 76, 152, 116, 138, 137, 125, 124, 148, 136, 98, 119, 135, 138, 114, 151, 99, 116, 138, 123, 137, 159, 104, 123, 107, 147, 102, 115, 134, 138, 141, 104, 95, 120, 97, 122, 130, 145, 132, 156, 111, 129, 121, 135, 155, 110, 128, 142, 121, 120, 126, 146, 110, 111, 147, 117, 131, 120, 123, 125, 148, 160, 109, 132, 152, 139, 154, 160, 110, 92, 141, 156, 126, 144, 166, 151, 106, 114, 149, 125, 146, 131, 145, 126, 111, 136, 114, 157, 114, 161, 111, 85, 155, 180, 124, 124, 134, 179, 128, 123, 149, 124, 145, 86, 164, 121, 125, 138, 102, 136, 153, 126, 116, 157, 113, 98, 104, 128, 95, 101, 138, 107, 111, 141, 125, 110, 142, 120, 107, 156, 118, 119, 121, 113, 122, 121, 120, 94, 126, 115, 125, 131, 132, 170, 92, 147, 79, 114, 111, 142, 119, 179, 154, 140, 76, 147, 138, 130, 124, 118, 127, 101, 124, 94, 110, 110, 119, 140, 155, 144, 144, 139, 181, 96, 114, 150, 159, 128, 136, 86, 172, 123, 97, 145], scales=[0.0363865f], zero_points=[170]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %111 = %110(%109, meta[relay.Constant][163] /* ty=Tensor[(256, 256, 3, 3), uint8] */, meta[relay.Constant][164] /* ty=Tensor[(256), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=24f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0118357f], lhs_zero_points=[24], rhs_scales=[0.00183936f, 0.000843056f, 0.000763179f, 0.0010754f, 0.00142475f, 0.00259818f, 0.00101114f, 0.00161844f, 0.000870755f, 0.0010784f, 0.00118149f, 0.000793086f, 0.00170222f, 0.00177651f, 0.00117693f, 0.001576f, 0.00171777f, 0.00281155f, 0.00137735f, 0.00316696f, 0.00166064f, 0.00175037f, 0.00100103f, 0.00123626f, 0.000872451f, 0.00183754f, 0.0018146f, 0.00142517f, 0.00207865f, 0.00149668f, 0.00161172f, 0.00184614f, 0.00145803f, 0.00143911f, 0.00175077f, 0.00158579f, 0.00103627f, 0.00180843f, 0.00200964f, 0.00123827f, 0.00113224f, 0.00106605f, 0.00179149f, 0.00241111f, 0.00121865f, 0.00197148f, 0.00150178f, 0.00166033f, 0.00187429f, 0.0011775f, 0.00116509f, 0.00164395f, 0.0016006f, 0.00178152f, 0.000818057f, 0.00123109f, 0.00190099f, 0.00156855f, 0.000986338f, 0.00164805f, 0.00174635f, 0.000889511f, 0.001771f, 0.00230684f, 0.00142151f, 0.00111791f, 0.00198409f, 0.00176355f, 0.00107974f, 0.00334387f, 0.00155711f, 0.000898906f, 0.00272906f, 0.002489f, 0.00176502f, 0.00200625f, 0.0043017f, 0.00176127f, 0.00110911f, 0.00140844f, 0.00225239f, 0.00140626f, 0.00275104f, 0.00154147f, 0.00131756f, 0.00214881f, 0.00179639f, 0.00185127f, 0.00200087f, 0.00100674f, 0.00141203f, 0.00119314f, 0.00124884f, 0.0010508f, 0.00166748f, 0.00176882f, 0.00253803f, 0.00142887f, 0.00168104f, 0.00185193f, 0.0013389f, 0.000915112f, 0.000636219f, 0.00183795f, 0.00168701f, 0.00181994f, 0.00226167f, 0.000980849f, 0.00146892f, 0.00103974f, 0.00209971f, 0.00105817f, 0.00240901f, 0.000768881f, 0.00165374f, 0.00104204f, 0.00200719f, 0.00115732f, 0.00170172f, 0.0016117f, 0.00151814f, 0.00154061f, 0.00130301f, 0.00136733f, 0.00202331f, 0.00111856f, 0.00168172f, 0.000852218f, 0.00213095f, 0.00157464f, 0.00170313f, 0.00184434f, 0.0015515f, 0.00202439f, 0.00189451f, 0.00163839f, 0.00236776f, 0.00074433f, 0.0010175f, 0.00212273f, 0.00107942f, 0.00174599f, 0.000837927f, 0.00195298f, 0.00190529f, 0.00347795f, 0.00296616f, 0.00144566f, 0.00111495f, 0.00118759f, 0.00214812f, 0.00106089f, 0.000873921f, 0.00168175f, 0.00131971f, 0.00136976f, 0.00197047f, 0.00175076f, 0.000810969f, 0.00138642f, 0.00111587f, 0.000965621f, 0.00105331f, 0.00241398f, 0.00201153f, 0.00113502f, 0.00110702f, 0.00206193f, 0.000866591f, 0.0015659f, 0.00130261f, 0.000723881f, 0.00144101f, 0.00168401f, 0.00192023f, 0.00172194f, 0.00189507f, 0.00101142f, 0.00197754f, 0.00106456f, 0.00141269f, 0.00160391f, 0.00133972f, 0.00190062f, 0.00141692f, 0.00252211f, 0.00144347f, 0.0017404f, 0.00164112f, 0.00156024f, 0.00142886f, 0.0011994f, 0.00126562f, 0.00142367f, 0.000876565f, 0.00185304f, 0.00135095f, 0.00102215f, 0.00263122f, 0.00144018f, 0.00148771f, 0.00137275f, 0.00173197f, 0.00194838f, 0.000754785f, 0.0018762f, 0.00136318f, 0.00108803f, 0.000924232f, 0.00244878f, 0.00242858f, 0.00117874f, 0.00180963f, 0.00151424f, 0.00163766f, 0.00284237f, 0.00152161f, 0.00126029f, 0.0021436f, 0.000755227f, 0.00132425f, 0.0025542f, 0.00133338f, 0.00122787f, 0.00100127f, 0.00135903f, 0.00199242f, 0.00186484f, 0.00137247f, 0.00120959f, 0.00260782f, 0.00100074f, 0.00197541f, 0.00218449f, 0.00126197f, 0.00106291f, 0.00177942f, 0.00178436f, 0.00112576f, 0.0010718f, 0.00172867f, 0.00164622f, 0.00356402f, 0.0016396f, 0.00157091f, 0.00175897f, 0.00241187f, 0.00108146f, 0.00174729f, 0.00145267f, 0.00188525f, 0.00339196f, 0.00227753f, 0.00143191f, 0.00219562f, 0.00146768f], rhs_zero_points=[117, 136, 129, 124, 112, 155, 169, 128, 104, 123, 102, 142, 129, 116, 123, 128, 89, 76, 156, 154, 150, 100, 115, 111, 138, 117, 115, 145, 91, 116, 102, 118, 122, 114, 122, 132, 113, 99, 172, 110, 87, 172, 143, 152, 172, 107, 113, 128, 136, 141, 136, 132, 126, 117, 125, 97, 160, 138, 128, 122, 133, 124, 120, 90, 131, 130, 153, 191, 136, 150, 182, 135, 163, 76, 152, 116, 138, 137, 125, 124, 148, 136, 98, 119, 135, 138, 114, 151, 99, 116, 138, 123, 137, 159, 104, 123, 107, 147, 102, 115, 134, 138, 141, 104, 95, 120, 97, 122, 130, 145, 132, 156, 111, 129, 121, 135, 155, 110, 128, 142, 121, 120, 126, 146, 110, 111, 147, 117, 131, 120, 123, 125, 148, 160, 109, 132, 152, 139, 154, 160, 110, 92, 141, 156, 126, 144, 166, 151, 106, 114, 149, 125, 146, 131, 145, 126, 111, 136, 114, 157, 114, 161, 111, 85, 155, 180, 124, 124, 134, 179, 128, 123, 149, 124, 145, 86, 164, 121, 125, 138, 102, 136, 153, 126, 116, 157, 113, 98, 104, 128, 95, 101, 138, 107, 111, 141, 125, 110, 142, 120, 107, 156, 118, 119, 121, 113, 122, 121, 120, 94, 126, 115, 125, 131, 132, 170, 92, 147, 79, 114, 111, 142, 119, 179, 154, 140, 76, 147, 138, 130, 124, 118, 127, 101, 124, 94, 110, 110, 119, 140, 155, 144, 144, 139, 181, 96, 114, 150, 159, 128, 136, 86, 172, 123, 97, 145], scales=[0.0363865f], zero_points=[170], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %112 = dl.dequantize(%111, input_scales=[0.0363865f], input_zero_points=[170]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %113 = sigmoid(%112) /* /model.5/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %114 = multiply(%112, %113) /* /model.5/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %115 = dl.quantize(%114, output_scales=[0.0126799f], output_zero_points=[22]) /* fake_quant_36 */ /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %116 = fn (%FunctionVar_75_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_75_1: Tensor[(256, 256, 1, 1), uint8], %FunctionVar_75_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adc8a948)) -> Tensor[(1, 256, 40, 40), uint8] {
    %16 = (%FunctionVar_75_0, %FunctionVar_75_1, %FunctionVar_75_2, meta[relay.Constant][76] /* ty=Tensor[(256), float32] */, meta[relay.Constant][77] /* ty=Tensor[(256), int32] */, meta[relay.Constant][78] /* ty=Tensor[(256), int32] */, meta[relay.Constant][79] /* ty=Tensor[(256), int32] */, meta[relay.Constant][80] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%16, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0126799f], lhs_zero_points=[22], rhs_scales=[0.00506749f, 0.00409557f, 0.00453412f, 0.00332451f, 0.00346072f, 0.0038328f, 0.00359116f, 0.00390755f, 0.00435358f, 0.00505609f, 0.00280563f, 0.00443016f, 0.0037018f, 0.00324625f, 0.00383661f, 0.00318015f, 0.003622f, 0.00355419f, 0.0036116f, 0.00345698f, 0.00356087f, 0.00348283f, 0.00469876f, 0.00456661f, 0.00561113f, 0.00566844f, 0.00661451f, 0.00298873f, 0.00648998f, 0.00561906f, 0.00372438f, 0.00458702f, 0.0047293f, 0.0048394f, 0.00460832f, 0.00349083f, 0.00313148f, 0.00343456f, 0.00458503f, 0.00410373f, 0.00405245f, 0.00511982f, 0.00473743f, 0.004732f, 0.00327555f, 0.00348415f, 0.0066807f, 0.0056491f, 0.00583636f, 0.00426804f, 0.00325527f, 0.00298853f, 0.00550338f, 0.0040961f, 0.00590246f, 0.00381329f, 0.0040853f, 0.00779558f, 0.00517442f, 0.00376641f, 0.00297544f, 0.00384682f, 0.00669894f, 0.00385624f, 0.00378127f, 0.00371504f, 0.00587349f, 0.00328576f, 0.00471111f, 0.00347603f, 0.00394762f, 0.00391906f, 0.00405142f, 0.00524827f, 0.00529093f, 0.0058875f, 0.00775671f, 0.00378348f, 0.0064881f, 0.00388644f, 0.00350676f, 0.00273164f, 0.00350848f, 0.00432884f, 0.00648635f, 0.00621117f, 0.00392736f, 0.00414033f, 0.00360825f, 0.0039843f, 0.00375076f, 0.00430596f, 0.00377874f, 0.00569362f, 0.00420415f, 0.00406973f, 0.00331196f, 0.00636623f, 0.0033146f, 0.00370771f, 0.00495259f, 0.00298601f, 0.00372466f, 0.00519603f, 0.00420923f, 0.00257822f, 0.00379457f, 0.00320123f, 0.00352653f, 0.00582341f, 0.0101111f, 0.00515291f, 0.00493042f, 0.00439838f, 0.00593658f, 0.0035472f, 0.00296678f, 0.00304122f, 0.00493354f, 0.00442736f, 0.00401326f, 0.00328154f, 0.00595562f, 0.00469901f, 0.00427632f, 0.00559526f, 0.002842f, 0.00316965f, 0.00580655f, 0.0065566f, 0.00473015f, 0.00376596f, 0.00265233f, 0.00413727f, 0.00405753f, 0.00448858f, 0.00359284f, 0.00437443f, 0.00289934f, 0.00203391f, 0.00346984f, 0.0034504f, 0.00301361f, 0.00369446f, 0.0035518f, 0.00274366f, 0.00328673f, 0.0028995f, 0.0036988f, 0.00458879f, 0.00450538f, 0.0044871f, 0.00321462f, 0.00390895f, 0.00604806f, 0.00287204f, 0.00315936f, 0.00553061f, 0.00279528f, 0.00424697f, 0.00358122f, 0.00315241f, 0.00510749f, 0.00263538f, 0.00356274f, 0.00475952f, 0.0018173f, 0.00452909f, 0.0028253f, 0.0030843f, 0.00314004f, 0.00957265f, 0.00468556f, 0.00420282f, 0.00266376f, 0.00467013f, 0.00411655f, 0.00386953f, 0.00436637f, 0.00346873f, 0.00288562f, 0.00360856f, 0.00392588f, 0.0048578f, 0.0048378f, 0.003688f, 0.00474045f, 0.00438135f, 0.00316348f, 0.00274651f, 0.00533612f, 0.00376627f, 0.00647977f, 0.00459717f, 0.00428313f, 0.00430225f, 0.00425776f, 0.00389452f, 0.0044318f, 0.00333f, 0.00255013f, 0.00364828f, 0.00287136f, 0.00332107f, 0.00278575f, 0.00214993f, 0.00534205f, 0.00290686f, 0.0052141f, 0.00192582f, 0.00397843f, 0.00421817f, 0.00274359f, 0.0032651f, 0.00389798f, 0.00608386f, 0.00359084f, 0.00523841f, 0.00279815f, 0.00282527f, 0.00538121f, 0.00277381f, 0.00323224f, 0.00235347f, 0.00422946f, 0.00248183f, 0.00236681f, 0.00416349f, 0.00420425f, 0.00268379f, 0.00434926f, 0.00439427f, 0.0030507f, 0.00537355f, 0.00210909f, 0.00491717f, 0.00505827f, 0.0108328f, 0.00527901f, 0.00315928f, 0.00268457f, 0.00293582f, 0.0035955f, 0.00358591f, 0.00262407f, 0.00615247f, 0.00448296f, 0.00424125f, 0.00441982f, 0.00379415f, 0.0181928f, 0.00664839f, 0.00398711f, 0.00408757f, 0.00425309f, 0.00491517f], rhs_zero_points=[108, 134, 166, 127, 137, 110, 126, 147, 157, 109, 150, 133, 163, 116, 152, 114, 136, 155, 135, 105, 125, 124, 198, 137, 100, 185, 99, 131, 72, 113, 114, 135, 101, 127, 128, 134, 130, 136, 158, 148, 145, 185, 124, 100, 138, 132, 152, 126, 150, 122, 170, 135, 109, 98, 112, 144, 115, 184, 133, 125, 154, 143, 166, 121, 95, 168, 149, 159, 158, 116, 165, 155, 94, 151, 163, 114, 166, 116, 113, 143, 146, 130, 102, 102, 170, 94, 123, 127, 121, 159, 104, 136, 115, 107, 134, 168, 94, 132, 164, 130, 161, 128, 122, 99, 160, 121, 146, 135, 130, 115, 160, 101, 173, 132, 180, 128, 133, 167, 146, 104, 148, 147, 178, 145, 148, 112, 142, 118, 106, 127, 135, 150, 112, 117, 132, 155, 93, 129, 125, 144, 144, 122, 139, 146, 126, 146, 181, 135, 109, 161, 97, 148, 140, 115, 156, 117, 154, 81, 141, 167, 154, 133, 148, 160, 161, 145, 92, 112, 118, 127, 181, 133, 176, 166, 134, 154, 130, 169, 128, 129, 142, 88, 132, 70, 171, 172, 113, 123, 131, 130, 127, 129, 87, 106, 146, 109, 110, 129, 111, 141, 139, 111, 161, 99, 102, 137, 144, 135, 126, 142, 99, 150, 144, 102, 130, 120, 122, 135, 144, 101, 118, 110, 142, 138, 113, 146, 118, 152, 105, 158, 136, 117, 107, 163, 145, 139, 119, 150, 142, 132, 150, 151, 157, 172, 117, 146, 141, 111, 133, 175, 207, 179, 123, 103, 145, 99], scales=[0.0347035f], zero_points=[148]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %117 = %116(%115, meta[relay.Constant][165] /* ty=Tensor[(256, 256, 1, 1), uint8] */, meta[relay.Constant][166] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0126799f], lhs_zero_points=[22], rhs_scales=[0.00506749f, 0.00409557f, 0.00453412f, 0.00332451f, 0.00346072f, 0.0038328f, 0.00359116f, 0.00390755f, 0.00435358f, 0.00505609f, 0.00280563f, 0.00443016f, 0.0037018f, 0.00324625f, 0.00383661f, 0.00318015f, 0.003622f, 0.00355419f, 0.0036116f, 0.00345698f, 0.00356087f, 0.00348283f, 0.00469876f, 0.00456661f, 0.00561113f, 0.00566844f, 0.00661451f, 0.00298873f, 0.00648998f, 0.00561906f, 0.00372438f, 0.00458702f, 0.0047293f, 0.0048394f, 0.00460832f, 0.00349083f, 0.00313148f, 0.00343456f, 0.00458503f, 0.00410373f, 0.00405245f, 0.00511982f, 0.00473743f, 0.004732f, 0.00327555f, 0.00348415f, 0.0066807f, 0.0056491f, 0.00583636f, 0.00426804f, 0.00325527f, 0.00298853f, 0.00550338f, 0.0040961f, 0.00590246f, 0.00381329f, 0.0040853f, 0.00779558f, 0.00517442f, 0.00376641f, 0.00297544f, 0.00384682f, 0.00669894f, 0.00385624f, 0.00378127f, 0.00371504f, 0.00587349f, 0.00328576f, 0.00471111f, 0.00347603f, 0.00394762f, 0.00391906f, 0.00405142f, 0.00524827f, 0.00529093f, 0.0058875f, 0.00775671f, 0.00378348f, 0.0064881f, 0.00388644f, 0.00350676f, 0.00273164f, 0.00350848f, 0.00432884f, 0.00648635f, 0.00621117f, 0.00392736f, 0.00414033f, 0.00360825f, 0.0039843f, 0.00375076f, 0.00430596f, 0.00377874f, 0.00569362f, 0.00420415f, 0.00406973f, 0.00331196f, 0.00636623f, 0.0033146f, 0.00370771f, 0.00495259f, 0.00298601f, 0.00372466f, 0.00519603f, 0.00420923f, 0.00257822f, 0.00379457f, 0.00320123f, 0.00352653f, 0.00582341f, 0.0101111f, 0.00515291f, 0.00493042f, 0.00439838f, 0.00593658f, 0.0035472f, 0.00296678f, 0.00304122f, 0.00493354f, 0.00442736f, 0.00401326f, 0.00328154f, 0.00595562f, 0.00469901f, 0.00427632f, 0.00559526f, 0.002842f, 0.00316965f, 0.00580655f, 0.0065566f, 0.00473015f, 0.00376596f, 0.00265233f, 0.00413727f, 0.00405753f, 0.00448858f, 0.00359284f, 0.00437443f, 0.00289934f, 0.00203391f, 0.00346984f, 0.0034504f, 0.00301361f, 0.00369446f, 0.0035518f, 0.00274366f, 0.00328673f, 0.0028995f, 0.0036988f, 0.00458879f, 0.00450538f, 0.0044871f, 0.00321462f, 0.00390895f, 0.00604806f, 0.00287204f, 0.00315936f, 0.00553061f, 0.00279528f, 0.00424697f, 0.00358122f, 0.00315241f, 0.00510749f, 0.00263538f, 0.00356274f, 0.00475952f, 0.0018173f, 0.00452909f, 0.0028253f, 0.0030843f, 0.00314004f, 0.00957265f, 0.00468556f, 0.00420282f, 0.00266376f, 0.00467013f, 0.00411655f, 0.00386953f, 0.00436637f, 0.00346873f, 0.00288562f, 0.00360856f, 0.00392588f, 0.0048578f, 0.0048378f, 0.003688f, 0.00474045f, 0.00438135f, 0.00316348f, 0.00274651f, 0.00533612f, 0.00376627f, 0.00647977f, 0.00459717f, 0.00428313f, 0.00430225f, 0.00425776f, 0.00389452f, 0.0044318f, 0.00333f, 0.00255013f, 0.00364828f, 0.00287136f, 0.00332107f, 0.00278575f, 0.00214993f, 0.00534205f, 0.00290686f, 0.0052141f, 0.00192582f, 0.00397843f, 0.00421817f, 0.00274359f, 0.0032651f, 0.00389798f, 0.00608386f, 0.00359084f, 0.00523841f, 0.00279815f, 0.00282527f, 0.00538121f, 0.00277381f, 0.00323224f, 0.00235347f, 0.00422946f, 0.00248183f, 0.00236681f, 0.00416349f, 0.00420425f, 0.00268379f, 0.00434926f, 0.00439427f, 0.0030507f, 0.00537355f, 0.00210909f, 0.00491717f, 0.00505827f, 0.0108328f, 0.00527901f, 0.00315928f, 0.00268457f, 0.00293582f, 0.0035955f, 0.00358591f, 0.00262407f, 0.00615247f, 0.00448296f, 0.00424125f, 0.00441982f, 0.00379415f, 0.0181928f, 0.00664839f, 0.00398711f, 0.00408757f, 0.00425309f, 0.00491517f], rhs_zero_points=[108, 134, 166, 127, 137, 110, 126, 147, 157, 109, 150, 133, 163, 116, 152, 114, 136, 155, 135, 105, 125, 124, 198, 137, 100, 185, 99, 131, 72, 113, 114, 135, 101, 127, 128, 134, 130, 136, 158, 148, 145, 185, 124, 100, 138, 132, 152, 126, 150, 122, 170, 135, 109, 98, 112, 144, 115, 184, 133, 125, 154, 143, 166, 121, 95, 168, 149, 159, 158, 116, 165, 155, 94, 151, 163, 114, 166, 116, 113, 143, 146, 130, 102, 102, 170, 94, 123, 127, 121, 159, 104, 136, 115, 107, 134, 168, 94, 132, 164, 130, 161, 128, 122, 99, 160, 121, 146, 135, 130, 115, 160, 101, 173, 132, 180, 128, 133, 167, 146, 104, 148, 147, 178, 145, 148, 112, 142, 118, 106, 127, 135, 150, 112, 117, 132, 155, 93, 129, 125, 144, 144, 122, 139, 146, 126, 146, 181, 135, 109, 161, 97, 148, 140, 115, 156, 117, 154, 81, 141, 167, 154, 133, 148, 160, 161, 145, 92, 112, 118, 127, 181, 133, 176, 166, 134, 154, 130, 169, 128, 129, 142, 88, 132, 70, 171, 172, 113, 123, 131, 130, 127, 129, 87, 106, 146, 109, 110, 129, 111, 141, 139, 111, 161, 99, 102, 137, 144, 135, 126, 142, 99, 150, 144, 102, 130, 120, 122, 135, 144, 101, 118, 110, 142, 138, 113, 146, 118, 152, 105, 158, 136, 117, 107, 163, 145, 139, 119, 150, 142, 132, 150, 151, 157, 172, 117, 146, 141, 111, 133, 175, 207, 179, 123, 103, 145, 99], scales=[0.0347035f], zero_points=[148], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %118 = dl.dequantize(%117, input_scales=[0.0347035f], input_zero_points=[148]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %119 = sigmoid(%118) /* /model.6/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %120 = multiply(%118, %119) /* /model.6/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %121 = fn (%FunctionVar_8_0: Tensor[(1, 256, 40, 40), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a962dc28)) -> (Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) {
    split(%FunctionVar_8_0, indices_or_sections=[128], axis=1) /* /model.6/Split_output_0 */ /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */
  };
  %122 = %121(%120, indices_or_sections=[128], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */;
  %125 = %122.1;
  %126 = dl.quantize(%125, output_scales=[0.0152381f], output_zero_points=[18]) /* fake_quant_39 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %127 = fn (%FunctionVar_74_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_74_1: Tensor[(64, 128, 1, 1), uint8], %FunctionVar_74_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9927d78)) -> Tensor[(1, 64, 40, 40), uint8] {
    %124 = (%FunctionVar_74_0, %FunctionVar_74_1, %FunctionVar_74_2, meta[relay.Constant][172] /* ty=Tensor[(64), float32] */, meta[relay.Constant][173] /* ty=Tensor[(64), int32] */, meta[relay.Constant][174] /* ty=Tensor[(64), int32] */, meta[relay.Constant][175] /* ty=Tensor[(64), int32] */, meta[relay.Constant][176] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%124, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00215361f, 0.00181125f, 0.00187415f, 0.00186453f, 0.00127778f, 0.00118588f, 0.00314361f, 0.00223522f, 0.00276815f, 0.00180585f, 0.00162796f, 0.00235124f, 0.001494f, 0.00164056f, 0.00226723f, 0.00254406f, 0.00204653f, 0.00178892f, 0.00149038f, 0.00205524f, 0.00145025f, 0.00184498f, 0.002121f, 0.00497276f, 0.00213743f, 0.0026682f, 0.00211495f, 0.00182068f, 0.00392256f, 0.00176362f, 0.00175845f, 0.00308002f, 0.00244757f, 0.00233116f, 0.00158061f, 0.00168926f, 0.00228563f, 0.00213988f, 0.00179702f, 0.00221408f, 0.00160927f, 0.00192057f, 0.00234791f, 0.00197343f, 0.00322266f, 0.00227971f, 0.00158954f, 0.0024382f, 0.00255592f, 0.00342973f, 0.00230366f, 0.00230933f, 0.00178264f, 0.00233374f, 0.00133676f, 0.00135523f, 0.00163065f, 0.00228986f, 0.00190239f, 0.00250446f, 0.00233169f, 0.00228239f, 0.00225492f, 0.00139786f], rhs_zero_points=[130, 109, 155, 129, 108, 114, 134, 113, 181, 119, 153, 132, 126, 139, 121, 194, 163, 118, 137, 148, 110, 127, 131, 183, 124, 156, 152, 137, 198, 145, 147, 153, 157, 129, 160, 131, 123, 121, 154, 141, 142, 124, 134, 87, 109, 142, 128, 121, 140, 130, 140, 170, 153, 131, 90, 145, 173, 143, 138, 124, 146, 114, 147, 126], scales=[0.016769f], zero_points=[146]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %128 = %127(%126, meta[relay.Constant][177] /* ty=Tensor[(64, 128, 1, 1), uint8] */, meta[relay.Constant][178] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00215361f, 0.00181125f, 0.00187415f, 0.00186453f, 0.00127778f, 0.00118588f, 0.00314361f, 0.00223522f, 0.00276815f, 0.00180585f, 0.00162796f, 0.00235124f, 0.001494f, 0.00164056f, 0.00226723f, 0.00254406f, 0.00204653f, 0.00178892f, 0.00149038f, 0.00205524f, 0.00145025f, 0.00184498f, 0.002121f, 0.00497276f, 0.00213743f, 0.0026682f, 0.00211495f, 0.00182068f, 0.00392256f, 0.00176362f, 0.00175845f, 0.00308002f, 0.00244757f, 0.00233116f, 0.00158061f, 0.00168926f, 0.00228563f, 0.00213988f, 0.00179702f, 0.00221408f, 0.00160927f, 0.00192057f, 0.00234791f, 0.00197343f, 0.00322266f, 0.00227971f, 0.00158954f, 0.0024382f, 0.00255592f, 0.00342973f, 0.00230366f, 0.00230933f, 0.00178264f, 0.00233374f, 0.00133676f, 0.00135523f, 0.00163065f, 0.00228986f, 0.00190239f, 0.00250446f, 0.00233169f, 0.00228239f, 0.00225492f, 0.00139786f], rhs_zero_points=[130, 109, 155, 129, 108, 114, 134, 113, 181, 119, 153, 132, 126, 139, 121, 194, 163, 118, 137, 148, 110, 127, 131, 183, 124, 156, 152, 137, 198, 145, 147, 153, 157, 129, 160, 131, 123, 121, 154, 141, 142, 124, 134, 87, 109, 142, 128, 121, 140, 130, 140, 170, 153, 131, 90, 145, 173, 143, 138, 124, 146, 114, 147, 126], scales=[0.016769f], zero_points=[146], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %129 = dl.dequantize(%128, input_scales=[0.016769f], input_zero_points=[146]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %130 = sigmoid(%129) /* /model.6/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %133 = multiply(%129, %130) /* /model.6/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %134 = dl.quantize(%133, output_scales=[0.00728809f], output_zero_points=[38]) /* fake_quant_42 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %135 = fn (%FunctionVar_73_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_73_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_73_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae4b118)) -> Tensor[(1, 64, 40, 40), uint8] {
    %132 = (%FunctionVar_73_0, %FunctionVar_73_1, %FunctionVar_73_2, meta[relay.Constant][184] /* ty=Tensor[(64), float32] */, meta[relay.Constant][185] /* ty=Tensor[(64), int32] */, meta[relay.Constant][186] /* ty=Tensor[(64), int32] */, meta[relay.Constant][187] /* ty=Tensor[(64), int32] */, meta[relay.Constant][188] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%132, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00728809f], lhs_zero_points=[38], rhs_scales=[0.00262389f, 0.00408038f, 0.00360935f, 0.00235253f, 0.00245286f, 0.00301886f, 0.00216449f, 0.00188339f, 0.00260044f, 0.00181393f, 0.00158394f, 0.0033442f, 0.00212913f, 0.00199482f, 0.00217163f, 0.002247f, 0.00334204f, 0.00388673f, 0.00309186f, 0.00325315f, 0.00264631f, 0.00328586f, 0.00319734f, 0.0011159f, 0.00314613f, 0.0031763f, 0.0042009f, 0.00291103f, 0.00189374f, 0.00307104f, 0.00217956f, 0.00372792f, 0.00232924f, 0.00169537f, 0.00245716f, 0.00398777f, 0.00242459f, 0.0017906f, 0.0021277f, 0.00150776f, 0.00338838f, 0.00310367f, 0.00187188f, 0.00363241f, 0.00271697f, 0.00370776f, 0.00353581f, 0.00453682f, 0.00329784f, 0.00363144f, 0.00338352f, 0.00321854f, 0.00437443f, 0.00421611f, 0.00239115f, 0.00354523f, 0.00191186f, 0.00549097f, 0.0061904f, 0.00447888f, 0.00432335f, 0.00315213f, 0.00425747f, 0.00188826f], rhs_zero_points=[146, 137, 138, 150, 145, 120, 126, 141, 133, 134, 130, 117, 137, 131, 137, 135, 159, 184, 157, 117, 125, 114, 101, 123, 127, 141, 145, 101, 146, 151, 122, 143, 128, 140, 134, 137, 134, 141, 114, 150, 128, 128, 124, 140, 173, 101, 128, 147, 149, 171, 165, 121, 166, 154, 145, 166, 137, 205, 138, 138, 117, 147, 142, 110], scales=[0.0234573f], zero_points=[170]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %136 = %135(%134, meta[relay.Constant][189] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][190] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=38f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00728809f], lhs_zero_points=[38], rhs_scales=[0.00262389f, 0.00408038f, 0.00360935f, 0.00235253f, 0.00245286f, 0.00301886f, 0.00216449f, 0.00188339f, 0.00260044f, 0.00181393f, 0.00158394f, 0.0033442f, 0.00212913f, 0.00199482f, 0.00217163f, 0.002247f, 0.00334204f, 0.00388673f, 0.00309186f, 0.00325315f, 0.00264631f, 0.00328586f, 0.00319734f, 0.0011159f, 0.00314613f, 0.0031763f, 0.0042009f, 0.00291103f, 0.00189374f, 0.00307104f, 0.00217956f, 0.00372792f, 0.00232924f, 0.00169537f, 0.00245716f, 0.00398777f, 0.00242459f, 0.0017906f, 0.0021277f, 0.00150776f, 0.00338838f, 0.00310367f, 0.00187188f, 0.00363241f, 0.00271697f, 0.00370776f, 0.00353581f, 0.00453682f, 0.00329784f, 0.00363144f, 0.00338352f, 0.00321854f, 0.00437443f, 0.00421611f, 0.00239115f, 0.00354523f, 0.00191186f, 0.00549097f, 0.0061904f, 0.00447888f, 0.00432335f, 0.00315213f, 0.00425747f, 0.00188826f], rhs_zero_points=[146, 137, 138, 150, 145, 120, 126, 141, 133, 134, 130, 117, 137, 131, 137, 135, 159, 184, 157, 117, 125, 114, 101, 123, 127, 141, 145, 101, 146, 151, 122, 143, 128, 140, 134, 137, 134, 141, 114, 150, 128, 128, 124, 140, 173, 101, 128, 147, 149, 171, 165, 121, 166, 154, 145, 166, 137, 205, 138, 138, 117, 147, 142, 110], scales=[0.0234573f], zero_points=[170], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %137 = dl.dequantize(%136, input_scales=[0.0234573f], input_zero_points=[170]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %138 = sigmoid(%137) /* /model.6/m.0/m/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %139 = multiply(%137, %138) /* /model.6/m.0/m/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %140 = dl.quantize(%139, output_scales=[0.00800891f], output_zero_points=[35]) /* fake_quant_45 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %141 = fn (%FunctionVar_72_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_72_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_72_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf66578)) -> Tensor[(1, 64, 40, 40), uint8] {
    %131 = (%FunctionVar_72_0, %FunctionVar_72_1, %FunctionVar_72_2, meta[relay.Constant][179] /* ty=Tensor[(64), float32] */, meta[relay.Constant][180] /* ty=Tensor[(64), int32] */, meta[relay.Constant][181] /* ty=Tensor[(64), int32] */, meta[relay.Constant][182] /* ty=Tensor[(64), int32] */, meta[relay.Constant][183] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%131, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00800891f], lhs_zero_points=[35], rhs_scales=[0.00214243f, 0.00224036f, 0.00133159f, 0.00134768f, 0.00215379f, 0.00238222f, 0.00171013f, 0.00256917f, 0.00174753f, 0.00180034f, 0.00152323f, 0.00186069f, 0.00308219f, 0.00215617f, 0.00282326f, 0.00207458f, 0.00167087f, 0.00177729f, 0.00230668f, 0.00224997f, 0.00213239f, 0.00326201f, 0.0020017f, 0.00190876f, 0.00246963f, 0.00194761f, 0.00214903f, 0.00179078f, 0.0019716f, 0.00243713f, 0.00268393f, 0.00171047f, 0.00161279f, 0.00162552f, 0.00124764f, 0.00198473f, 0.00209189f, 0.00233089f, 0.0045948f, 0.00276714f, 0.0020521f, 0.00282144f, 0.00218262f, 0.00203087f, 0.00207286f, 0.00282854f, 0.00149166f, 0.00187029f, 0.00161303f, 0.00295541f, 0.00192136f, 0.00191273f, 0.00220325f, 0.00208833f, 0.00168403f, 0.0026536f, 0.00173835f, 0.00214167f, 0.00165132f, 0.00304507f, 0.00153955f, 0.00185581f, 0.00223199f, 0.00132018f], rhs_zero_points=[104, 134, 118, 116, 118, 120, 123, 102, 138, 127, 141, 112, 139, 145, 136, 173, 116, 127, 135, 115, 110, 159, 116, 151, 135, 122, 99, 113, 129, 125, 111, 115, 114, 126, 117, 112, 135, 121, 125, 154, 99, 133, 117, 132, 140, 115, 97, 131, 126, 161, 105, 133, 130, 147, 131, 154, 129, 103, 112, 127, 132, 142, 114, 101], scales=[0.0165919f], zero_points=[147]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %142 = %141(%140, meta[relay.Constant][191] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][192] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=35f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00800891f], lhs_zero_points=[35], rhs_scales=[0.00214243f, 0.00224036f, 0.00133159f, 0.00134768f, 0.00215379f, 0.00238222f, 0.00171013f, 0.00256917f, 0.00174753f, 0.00180034f, 0.00152323f, 0.00186069f, 0.00308219f, 0.00215617f, 0.00282326f, 0.00207458f, 0.00167087f, 0.00177729f, 0.00230668f, 0.00224997f, 0.00213239f, 0.00326201f, 0.0020017f, 0.00190876f, 0.00246963f, 0.00194761f, 0.00214903f, 0.00179078f, 0.0019716f, 0.00243713f, 0.00268393f, 0.00171047f, 0.00161279f, 0.00162552f, 0.00124764f, 0.00198473f, 0.00209189f, 0.00233089f, 0.0045948f, 0.00276714f, 0.0020521f, 0.00282144f, 0.00218262f, 0.00203087f, 0.00207286f, 0.00282854f, 0.00149166f, 0.00187029f, 0.00161303f, 0.00295541f, 0.00192136f, 0.00191273f, 0.00220325f, 0.00208833f, 0.00168403f, 0.0026536f, 0.00173835f, 0.00214167f, 0.00165132f, 0.00304507f, 0.00153955f, 0.00185581f, 0.00223199f, 0.00132018f], rhs_zero_points=[104, 134, 118, 116, 118, 120, 123, 102, 138, 127, 141, 112, 139, 145, 136, 173, 116, 127, 135, 115, 110, 159, 116, 151, 135, 122, 99, 113, 129, 125, 111, 115, 114, 126, 117, 112, 135, 121, 125, 154, 99, 133, 117, 132, 140, 115, 97, 131, 126, 161, 105, 133, 130, 147, 131, 154, 129, 103, 112, 127, 132, 142, 114, 101], scales=[0.0165919f], zero_points=[147], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %143 = dl.dequantize(%142, input_scales=[0.0165919f], input_zero_points=[147]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %144 = sigmoid(%143) /* /model.6/m.0/m/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %145 = multiply(%143, %144) /* /model.6/m.0/m/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %148 = add(%133, %145) /* /model.6/m.0/m/m.0/Add_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %149 = dl.quantize(%148, output_scales=[0.00898826f], output_zero_points=[62]) /* fake_quant_48 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %150 = fn (%FunctionVar_71_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_71_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_71_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad96f308)) -> Tensor[(1, 64, 40, 40), uint8] {
    %147 = (%FunctionVar_71_0, %FunctionVar_71_1, %FunctionVar_71_2, meta[relay.Constant][198] /* ty=Tensor[(64), float32] */, meta[relay.Constant][199] /* ty=Tensor[(64), int32] */, meta[relay.Constant][200] /* ty=Tensor[(64), int32] */, meta[relay.Constant][201] /* ty=Tensor[(64), int32] */, meta[relay.Constant][202] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%147, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00898826f], lhs_zero_points=[62], rhs_scales=[0.00182344f, 0.0011281f, 0.00178797f, 0.00290828f, 0.00193379f, 0.0015485f, 0.00369234f, 0.00198209f, 0.00236666f, 0.00115272f, 0.00063885f, 0.00168291f, 0.00218562f, 0.00176114f, 0.00207589f, 0.00161345f, 0.00112341f, 0.00203851f, 0.000825768f, 0.00201281f, 0.000904409f, 0.00148357f, 0.0021318f, 0.00165512f, 0.00218839f, 0.00247495f, 0.00279935f, 0.0030728f, 0.00269712f, 0.00219696f, 0.00163183f, 0.0016978f, 0.00215661f, 0.00104989f, 0.00215847f, 0.00190639f, 0.00249083f, 0.00154405f, 0.00223611f, 0.00205474f, 0.00211638f, 0.00187379f, 0.00158977f, 0.00106923f, 0.00167232f, 0.00123162f, 0.00294336f, 0.00194789f, 0.00181258f, 0.0014514f, 0.00300593f, 0.00258249f, 0.00169575f, 0.00236634f, 0.00136919f, 0.00130476f, 0.00245891f, 0.00181588f, 0.00211729f, 0.00150205f, 0.00194511f, 0.00248335f, 0.00197804f, 0.00130452f], rhs_zero_points=[135, 125, 139, 107, 119, 105, 178, 152, 116, 117, 132, 146, 132, 116, 150, 117, 133, 148, 141, 138, 132, 122, 111, 113, 126, 142, 145, 139, 141, 159, 119, 144, 168, 107, 120, 97, 152, 113, 137, 127, 123, 119, 131, 128, 128, 120, 112, 114, 96, 136, 162, 137, 118, 117, 147, 118, 151, 138, 139, 117, 105, 127, 125, 123], scales=[0.0178855f], zero_points=[160]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %151 = %150(%149, meta[relay.Constant][203] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][204] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=62f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00898826f], lhs_zero_points=[62], rhs_scales=[0.00182344f, 0.0011281f, 0.00178797f, 0.00290828f, 0.00193379f, 0.0015485f, 0.00369234f, 0.00198209f, 0.00236666f, 0.00115272f, 0.00063885f, 0.00168291f, 0.00218562f, 0.00176114f, 0.00207589f, 0.00161345f, 0.00112341f, 0.00203851f, 0.000825768f, 0.00201281f, 0.000904409f, 0.00148357f, 0.0021318f, 0.00165512f, 0.00218839f, 0.00247495f, 0.00279935f, 0.0030728f, 0.00269712f, 0.00219696f, 0.00163183f, 0.0016978f, 0.00215661f, 0.00104989f, 0.00215847f, 0.00190639f, 0.00249083f, 0.00154405f, 0.00223611f, 0.00205474f, 0.00211638f, 0.00187379f, 0.00158977f, 0.00106923f, 0.00167232f, 0.00123162f, 0.00294336f, 0.00194789f, 0.00181258f, 0.0014514f, 0.00300593f, 0.00258249f, 0.00169575f, 0.00236634f, 0.00136919f, 0.00130476f, 0.00245891f, 0.00181588f, 0.00211729f, 0.00150205f, 0.00194511f, 0.00248335f, 0.00197804f, 0.00130452f], rhs_zero_points=[135, 125, 139, 107, 119, 105, 178, 152, 116, 117, 132, 146, 132, 116, 150, 117, 133, 148, 141, 138, 132, 122, 111, 113, 126, 142, 145, 139, 141, 159, 119, 144, 168, 107, 120, 97, 152, 113, 137, 127, 123, 119, 131, 128, 128, 120, 112, 114, 96, 136, 162, 137, 118, 117, 147, 118, 151, 138, 139, 117, 105, 127, 125, 123], scales=[0.0178855f], zero_points=[160], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %152 = dl.dequantize(%151, input_scales=[0.0178855f], input_zero_points=[160]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %153 = sigmoid(%152) /* /model.6/m.0/m/m.1/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %154 = multiply(%152, %153) /* /model.6/m.0/m/m.1/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %155 = dl.quantize(%154, output_scales=[0.00670348f], output_zero_points=[42]) /* fake_quant_51 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %156 = fn (%FunctionVar_70_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_70_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_70_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aa61e148)) -> Tensor[(1, 64, 40, 40), uint8] {
    %146 = (%FunctionVar_70_0, %FunctionVar_70_1, %FunctionVar_70_2, meta[relay.Constant][193] /* ty=Tensor[(64), float32] */, meta[relay.Constant][194] /* ty=Tensor[(64), int32] */, meta[relay.Constant][195] /* ty=Tensor[(64), int32] */, meta[relay.Constant][196] /* ty=Tensor[(64), int32] */, meta[relay.Constant][197] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%146, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00670348f], lhs_zero_points=[42], rhs_scales=[0.00503325f, 0.00304506f, 0.00303858f, 0.00357575f, 0.00331376f, 0.00278494f, 0.00387601f, 0.00327554f, 0.00271258f, 0.00276695f, 0.00317026f, 0.00458609f, 0.00462109f, 0.00337843f, 0.00376791f, 0.00300542f, 0.00334575f, 0.00288494f, 0.00383361f, 0.00304363f, 0.00334853f, 0.00321924f, 0.00226051f, 0.00315629f, 0.00338215f, 0.00363885f, 0.00444339f, 0.00353401f, 0.00713665f, 0.00353834f, 0.00374352f, 0.00288058f, 0.00239366f, 0.0029717f, 0.0029187f, 0.00311306f, 0.00363039f, 0.00295655f, 0.00748845f, 0.00296697f, 0.00316728f, 0.00239706f, 0.00280563f, 0.00238912f, 0.00439016f, 0.00413856f, 0.00228888f, 0.00338144f, 0.00322573f, 0.00234169f, 0.00388367f, 0.00364607f, 0.00238584f, 0.00464566f, 0.00375465f, 0.00214116f, 0.00227332f, 0.00390197f, 0.00411356f, 0.00391755f, 0.0025933f, 0.00384443f, 0.00341079f, 0.00333816f], rhs_zero_points=[100, 119, 127, 140, 137, 105, 128, 112, 139, 111, 86, 108, 127, 113, 132, 144, 129, 125, 161, 106, 108, 126, 111, 130, 116, 130, 164, 145, 117, 114, 114, 122, 137, 143, 106, 144, 148, 116, 133, 128, 116, 99, 118, 117, 110, 133, 139, 103, 135, 117, 130, 137, 100, 100, 160, 97, 118, 127, 125, 128, 108, 88, 95, 99], scales=[0.0267072f], zero_points=[118]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %157 = %156(%155, meta[relay.Constant][205] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][206] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=42f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00670348f], lhs_zero_points=[42], rhs_scales=[0.00503325f, 0.00304506f, 0.00303858f, 0.00357575f, 0.00331376f, 0.00278494f, 0.00387601f, 0.00327554f, 0.00271258f, 0.00276695f, 0.00317026f, 0.00458609f, 0.00462109f, 0.00337843f, 0.00376791f, 0.00300542f, 0.00334575f, 0.00288494f, 0.00383361f, 0.00304363f, 0.00334853f, 0.00321924f, 0.00226051f, 0.00315629f, 0.00338215f, 0.00363885f, 0.00444339f, 0.00353401f, 0.00713665f, 0.00353834f, 0.00374352f, 0.00288058f, 0.00239366f, 0.0029717f, 0.0029187f, 0.00311306f, 0.00363039f, 0.00295655f, 0.00748845f, 0.00296697f, 0.00316728f, 0.00239706f, 0.00280563f, 0.00238912f, 0.00439016f, 0.00413856f, 0.00228888f, 0.00338144f, 0.00322573f, 0.00234169f, 0.00388367f, 0.00364607f, 0.00238584f, 0.00464566f, 0.00375465f, 0.00214116f, 0.00227332f, 0.00390197f, 0.00411356f, 0.00391755f, 0.0025933f, 0.00384443f, 0.00341079f, 0.00333816f], rhs_zero_points=[100, 119, 127, 140, 137, 105, 128, 112, 139, 111, 86, 108, 127, 113, 132, 144, 129, 125, 161, 106, 108, 126, 111, 130, 116, 130, 164, 145, 117, 114, 114, 122, 137, 143, 106, 144, 148, 116, 133, 128, 116, 99, 118, 117, 110, 133, 139, 103, 135, 117, 130, 137, 100, 100, 160, 97, 118, 127, 125, 128, 108, 88, 95, 99], scales=[0.0267072f], zero_points=[118], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %158 = dl.dequantize(%157, input_scales=[0.0267072f], input_zero_points=[118]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %159 = sigmoid(%158) /* /model.6/m.0/m/m.1/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %160 = multiply(%158, %159) /* /model.6/m.0/m/m.1/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %162 = fn (%FunctionVar_69_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_69_1: Tensor[(64, 128, 1, 1), uint8], %FunctionVar_69_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae44438)) -> Tensor[(1, 64, 40, 40), uint8] {
    %161 = (%FunctionVar_69_0, %FunctionVar_69_1, %FunctionVar_69_2, meta[relay.Constant][207] /* ty=Tensor[(64), float32] */, meta[relay.Constant][208] /* ty=Tensor[(64), int32] */, meta[relay.Constant][209] /* ty=Tensor[(64), int32] */, meta[relay.Constant][210] /* ty=Tensor[(64), int32] */, meta[relay.Constant][211] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%161, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00398654f, 0.00546003f, 0.00544723f, 0.0041138f, 0.00596395f, 0.00439217f, 0.0033734f, 0.00380853f, 0.0038177f, 0.00569113f, 0.00407958f, 0.00395345f, 0.00500978f, 0.00473812f, 0.00341691f, 0.00506347f, 0.00591f, 0.00434677f, 0.00567095f, 0.0058119f, 0.00344118f, 0.00482681f, 0.00408978f, 0.00391639f, 0.00375875f, 0.00422904f, 0.00384038f, 0.00617234f, 0.0049364f, 0.00480337f, 0.00501781f, 0.00422468f, 0.0033317f, 0.00442186f, 0.00577993f, 0.00556428f, 0.00304786f, 0.00400771f, 0.00329026f, 0.00490216f, 0.00440753f, 0.0033999f, 0.00498891f, 0.00385393f, 0.00513845f, 0.00534604f, 0.00387264f, 0.00311776f, 0.00502421f, 0.00335736f, 0.00406055f, 0.0048446f, 0.00251032f, 0.00465448f, 0.00417784f, 0.00475072f, 0.00426805f, 0.00386779f, 0.00522694f, 0.00459731f, 0.0049393f, 0.0073316f, 0.0052022f, 0.0042754f], rhs_zero_points=[116, 115, 152, 87, 167, 111, 130, 127, 147, 131, 107, 152, 109, 134, 130, 146, 123, 128, 84, 176, 88, 156, 138, 119, 106, 152, 135, 89, 87, 125, 115, 114, 136, 124, 122, 118, 109, 138, 117, 116, 125, 114, 139, 120, 112, 130, 133, 100, 152, 142, 139, 140, 111, 119, 122, 155, 105, 163, 134, 162, 121, 145, 121, 126], scales=[0.0282712f], zero_points=[114]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %163 = %162(%126, meta[relay.Constant][212] /* ty=Tensor[(64, 128, 1, 1), uint8] */, meta[relay.Constant][213] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00398654f, 0.00546003f, 0.00544723f, 0.0041138f, 0.00596395f, 0.00439217f, 0.0033734f, 0.00380853f, 0.0038177f, 0.00569113f, 0.00407958f, 0.00395345f, 0.00500978f, 0.00473812f, 0.00341691f, 0.00506347f, 0.00591f, 0.00434677f, 0.00567095f, 0.0058119f, 0.00344118f, 0.00482681f, 0.00408978f, 0.00391639f, 0.00375875f, 0.00422904f, 0.00384038f, 0.00617234f, 0.0049364f, 0.00480337f, 0.00501781f, 0.00422468f, 0.0033317f, 0.00442186f, 0.00577993f, 0.00556428f, 0.00304786f, 0.00400771f, 0.00329026f, 0.00490216f, 0.00440753f, 0.0033999f, 0.00498891f, 0.00385393f, 0.00513845f, 0.00534604f, 0.00387264f, 0.00311776f, 0.00502421f, 0.00335736f, 0.00406055f, 0.0048446f, 0.00251032f, 0.00465448f, 0.00417784f, 0.00475072f, 0.00426805f, 0.00386779f, 0.00522694f, 0.00459731f, 0.0049393f, 0.0073316f, 0.0052022f, 0.0042754f], rhs_zero_points=[116, 115, 152, 87, 167, 111, 130, 127, 147, 131, 107, 152, 109, 134, 130, 146, 123, 128, 84, 176, 88, 156, 138, 119, 106, 152, 135, 89, 87, 125, 115, 114, 136, 124, 122, 118, 109, 138, 117, 116, 125, 114, 139, 120, 112, 130, 133, 100, 152, 142, 139, 140, 111, 119, 122, 155, 105, 163, 134, 162, 121, 145, 121, 126], scales=[0.0282712f], zero_points=[114], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %164 = dl.dequantize(%163, input_scales=[0.0282712f], input_zero_points=[114]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %165 = sigmoid(%164) /* /model.6/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %166 = add(%148, %160) /* /model.6/m.0/m/m.1/Add_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %167 = multiply(%164, %165) /* /model.6/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %168 = (%166, %167);
  %169 = concatenate(%168, axis=1) /* /model.6/m.0/Concat_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %170 = dl.quantize(%169, output_scales=[0.019312f], output_zero_points=[43]) /* fake_quant_57 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %171 = fn (%FunctionVar_68_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_68_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_68_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab02b808)) -> Tensor[(1, 128, 40, 40), uint8] {
    %123 = (%FunctionVar_68_0, %FunctionVar_68_1, %FunctionVar_68_2, meta[relay.Constant][167] /* ty=Tensor[(128), float32] */, meta[relay.Constant][168] /* ty=Tensor[(128), int32] */, meta[relay.Constant][169] /* ty=Tensor[(128), int32] */, meta[relay.Constant][170] /* ty=Tensor[(128), int32] */, meta[relay.Constant][171] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%123, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.019312f], lhs_zero_points=[43], rhs_scales=[0.00250921f, 0.00222029f, 0.0026396f, 0.00144829f, 0.00206777f, 0.00163109f, 0.00290794f, 0.00312592f, 0.00303213f, 0.00199384f, 0.00190982f, 0.00220559f, 0.00245568f, 0.00268756f, 0.00217843f, 0.00259455f, 0.00270156f, 0.00153856f, 0.00275155f, 0.00241893f, 0.00248619f, 0.00290994f, 0.00307676f, 0.00257544f, 0.00213617f, 0.00264487f, 0.00461549f, 0.00282831f, 0.00276547f, 0.00321859f, 0.00182429f, 0.00201417f, 0.00256349f, 0.00212858f, 0.00211563f, 0.00278903f, 0.00264439f, 0.00236109f, 0.00204023f, 0.00188858f, 0.00188024f, 0.00144387f, 0.00186585f, 0.00247809f, 0.00174941f, 0.00310545f, 0.00336967f, 0.0021666f, 0.00263267f, 0.00243842f, 0.00237325f, 0.00224533f, 0.00280374f, 0.0024696f, 0.00401347f, 0.0022489f, 0.00290774f, 0.00211769f, 0.00237215f, 0.00302179f, 0.00251826f, 0.00220759f, 0.00263321f, 0.00259428f, 0.00214782f, 0.00255807f, 0.00458981f, 0.00293899f, 0.0025053f, 0.00183978f, 0.00204099f, 0.00297701f, 0.00275261f, 0.0030148f, 0.00311997f, 0.0024264f, 0.00384944f, 0.00348307f, 0.00239466f, 0.00207084f, 0.00311707f, 0.00316963f, 0.00259248f, 0.00278262f, 0.00269682f, 0.00274618f, 0.00241533f, 0.00253354f, 0.0023024f, 0.00197712f, 0.00269732f, 0.0029554f, 0.00193548f, 0.00239277f, 0.00231192f, 0.00319191f, 0.00148651f, 0.00195195f, 0.00252117f, 0.00191365f, 0.00280739f, 0.00239512f, 0.00186859f, 0.00222613f, 0.0025219f, 0.00265456f, 0.00268809f, 0.00173228f, 0.00249328f, 0.00366116f, 0.00549521f, 0.00245378f, 0.00165134f, 0.00255675f, 0.00258526f, 0.00188648f, 0.00221908f, 0.00274698f, 0.00189126f, 0.00166543f, 0.00265475f, 0.00255455f, 0.00289857f, 0.00197793f, 0.00253797f, 0.00145917f, 0.0023713f, 0.00327058f], rhs_zero_points=[132, 91, 132, 137, 117, 144, 161, 159, 134, 144, 174, 109, 119, 138, 135, 135, 124, 172, 107, 115, 126, 176, 109, 116, 130, 125, 85, 113, 173, 124, 117, 148, 125, 150, 110, 138, 165, 115, 149, 134, 159, 92, 126, 131, 130, 155, 127, 157, 153, 157, 150, 127, 148, 127, 157, 136, 164, 128, 157, 107, 109, 107, 203, 133, 123, 111, 170, 113, 161, 119, 100, 152, 115, 115, 130, 141, 175, 154, 140, 123, 125, 108, 185, 173, 148, 152, 165, 108, 145, 139, 150, 116, 125, 110, 143, 118, 141, 127, 146, 118, 92, 143, 136, 119, 129, 152, 134, 114, 126, 102, 132, 136, 166, 123, 109, 124, 117, 135, 117, 132, 100, 170, 141, 123, 113, 135, 137, 125], scales=[0.0257221f], zero_points=[142]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %172 = %171(%170, meta[relay.Constant][214] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][215] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.019312f], lhs_zero_points=[43], rhs_scales=[0.00250921f, 0.00222029f, 0.0026396f, 0.00144829f, 0.00206777f, 0.00163109f, 0.00290794f, 0.00312592f, 0.00303213f, 0.00199384f, 0.00190982f, 0.00220559f, 0.00245568f, 0.00268756f, 0.00217843f, 0.00259455f, 0.00270156f, 0.00153856f, 0.00275155f, 0.00241893f, 0.00248619f, 0.00290994f, 0.00307676f, 0.00257544f, 0.00213617f, 0.00264487f, 0.00461549f, 0.00282831f, 0.00276547f, 0.00321859f, 0.00182429f, 0.00201417f, 0.00256349f, 0.00212858f, 0.00211563f, 0.00278903f, 0.00264439f, 0.00236109f, 0.00204023f, 0.00188858f, 0.00188024f, 0.00144387f, 0.00186585f, 0.00247809f, 0.00174941f, 0.00310545f, 0.00336967f, 0.0021666f, 0.00263267f, 0.00243842f, 0.00237325f, 0.00224533f, 0.00280374f, 0.0024696f, 0.00401347f, 0.0022489f, 0.00290774f, 0.00211769f, 0.00237215f, 0.00302179f, 0.00251826f, 0.00220759f, 0.00263321f, 0.00259428f, 0.00214782f, 0.00255807f, 0.00458981f, 0.00293899f, 0.0025053f, 0.00183978f, 0.00204099f, 0.00297701f, 0.00275261f, 0.0030148f, 0.00311997f, 0.0024264f, 0.00384944f, 0.00348307f, 0.00239466f, 0.00207084f, 0.00311707f, 0.00316963f, 0.00259248f, 0.00278262f, 0.00269682f, 0.00274618f, 0.00241533f, 0.00253354f, 0.0023024f, 0.00197712f, 0.00269732f, 0.0029554f, 0.00193548f, 0.00239277f, 0.00231192f, 0.00319191f, 0.00148651f, 0.00195195f, 0.00252117f, 0.00191365f, 0.00280739f, 0.00239512f, 0.00186859f, 0.00222613f, 0.0025219f, 0.00265456f, 0.00268809f, 0.00173228f, 0.00249328f, 0.00366116f, 0.00549521f, 0.00245378f, 0.00165134f, 0.00255675f, 0.00258526f, 0.00188648f, 0.00221908f, 0.00274698f, 0.00189126f, 0.00166543f, 0.00265475f, 0.00255455f, 0.00289857f, 0.00197793f, 0.00253797f, 0.00145917f, 0.0023713f, 0.00327058f], rhs_zero_points=[132, 91, 132, 137, 117, 144, 161, 159, 134, 144, 174, 109, 119, 138, 135, 135, 124, 172, 107, 115, 126, 176, 109, 116, 130, 125, 85, 113, 173, 124, 117, 148, 125, 150, 110, 138, 165, 115, 149, 134, 159, 92, 126, 131, 130, 155, 127, 157, 153, 157, 150, 127, 148, 127, 157, 136, 164, 128, 157, 107, 109, 107, 203, 133, 123, 111, 170, 113, 161, 119, 100, 152, 115, 115, 130, 141, 175, 154, 140, 123, 125, 108, 185, 173, 148, 152, 165, 108, 145, 139, 150, 116, 125, 110, 143, 118, 141, 127, 146, 118, 92, 143, 136, 119, 129, 152, 134, 114, 126, 102, 132, 136, 166, 123, 109, 124, 117, 135, 117, 132, 100, 170, 141, 123, 113, 135, 137, 125], scales=[0.0257221f], zero_points=[142], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %173 = dl.dequantize(%172, input_scales=[0.0257221f], input_zero_points=[142]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %174 = sigmoid(%173) /* /model.6/m.0/cv3/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %175 = %122.0;
  %176 = multiply(%173, %174) /* /model.6/m.0/cv3/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %177 = (%175, %125, %176);
  %178 = concatenate(%177, axis=1) /* /model.6/Concat_output_0 */ /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %179 = dl.quantize(%178, output_scales=[0.0152381f], output_zero_points=[18]) /* fake_quant_60 */ /* ty=Tensor[(1, 384, 40, 40), uint8] */;
  %180 = fn (%FunctionVar_67_0: Tensor[(1, 384, 40, 40), uint8], %FunctionVar_67_1: Tensor[(256, 384, 1, 1), uint8], %FunctionVar_67_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aafad7f8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %15 = (%FunctionVar_67_0, %FunctionVar_67_1, %FunctionVar_67_2, meta[relay.Constant][71] /* ty=Tensor[(256), float32] */, meta[relay.Constant][72] /* ty=Tensor[(256), int32] */, meta[relay.Constant][73] /* ty=Tensor[(256), int32] */, meta[relay.Constant][74] /* ty=Tensor[(256), int32] */, meta[relay.Constant][75] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%15, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00228006f, 0.00282733f, 0.00296758f, 0.00225333f, 0.00263173f, 0.00229954f, 0.00328169f, 0.00337261f, 0.00285875f, 0.00220583f, 0.00256468f, 0.00205841f, 0.00187549f, 0.00242696f, 0.00252613f, 0.00120267f, 0.00219862f, 0.00159843f, 0.00271181f, 0.0029263f, 0.00346041f, 0.00193328f, 0.0025399f, 0.00208583f, 0.00174657f, 0.00247733f, 0.00205881f, 0.0030157f, 0.00298866f, 0.00184837f, 0.00173446f, 0.00241045f, 0.00455663f, 0.00334645f, 0.00130994f, 0.00333334f, 0.00225344f, 0.0016759f, 0.00281176f, 0.00200157f, 0.00224294f, 0.00253829f, 0.0023255f, 0.00122183f, 0.00241398f, 0.00197075f, 0.0019494f, 0.00273896f, 0.00190618f, 0.00168435f, 0.00195255f, 0.0022251f, 0.00338004f, 0.00230908f, 0.0029366f, 0.00180879f, 0.00271959f, 0.00214613f, 0.00199094f, 0.00290135f, 0.00323431f, 0.0021752f, 0.00253952f, 0.00186138f, 0.00225968f, 0.00186392f, 0.00209967f, 0.00353579f, 0.00237712f, 0.00278968f, 0.00247287f, 0.00173741f, 0.00265341f, 0.00197572f, 0.0016215f, 0.00159448f, 0.00462542f, 0.00197909f, 0.00210676f, 0.00313302f, 0.00188315f, 0.00199367f, 0.0046236f, 0.00353083f, 0.00190821f, 0.0063395f, 0.00259095f, 0.00164331f, 0.00176479f, 0.00183599f, 0.00205489f, 0.0027026f, 0.0024295f, 0.00169717f, 0.00191642f, 0.00237675f, 0.00196798f, 0.00125011f, 0.00131925f, 0.00197205f, 0.00226287f, 0.00227345f, 0.00229944f, 0.00233087f, 0.00216979f, 0.00255217f, 0.001965f, 0.00121403f, 0.00259023f, 0.00247543f, 0.00206275f, 0.00251592f, 0.00216353f, 0.00224835f, 0.00250948f, 0.00121282f, 0.00285207f, 0.0024535f, 0.00123118f, 0.00134984f, 0.00176995f, 0.00215345f, 0.00154424f, 0.0017852f, 0.00188567f, 0.00188295f, 0.00281768f, 0.00244333f, 0.00194045f, 0.00179578f, 0.00283524f, 0.00390531f, 0.00182181f, 0.00311203f, 0.00294273f, 0.00343738f, 0.00179532f, 0.00215957f, 0.00165094f, 0.00228477f, 0.00305084f, 0.00219751f, 0.00194877f, 0.00214876f, 0.00352741f, 0.00374761f, 0.0023523f, 0.00272804f, 0.00283107f, 0.00229528f, 0.00122453f, 0.00158919f, 0.00205787f, 0.00134312f, 0.00128365f, 0.00289746f, 0.00245776f, 0.00257092f, 0.00230826f, 0.00216658f, 0.00199294f, 0.00200475f, 0.00201488f, 0.00193014f, 0.00428997f, 0.00237451f, 0.00197882f, 0.00254476f, 0.00238921f, 0.00274567f, 0.00184158f, 0.00161011f, 0.00218911f, 0.00255051f, 0.00283643f, 0.00181654f, 0.00207604f, 0.00188964f, 0.00203793f, 0.00136276f, 0.00190977f, 0.00209993f, 0.00319015f, 0.00314952f, 0.00262159f, 0.004311f, 0.00241246f, 0.00277636f, 0.00266653f, 0.00240686f, 0.00262726f, 0.00197256f, 0.00316188f, 0.00131557f, 0.00197747f, 0.00261911f, 0.00199303f, 0.00212505f, 0.00176842f, 0.00163454f, 0.00299215f, 0.00187878f, 0.00195266f, 0.00163745f, 0.00249411f, 0.00248471f, 0.0018378f, 0.00302791f, 0.00318029f, 0.00224672f, 0.00173519f, 0.00259894f, 0.00171547f, 0.00239281f, 0.00216237f, 0.00177777f, 0.00215778f, 0.00212728f, 0.0016679f, 0.00277168f, 0.0030987f, 0.00330225f, 0.00244016f, 0.00270639f, 0.00241388f, 0.00331387f, 0.0016189f, 0.00155205f, 0.00243113f, 0.0030772f, 0.00268057f, 0.00250654f, 0.00104247f, 0.00221929f, 0.00238692f, 0.00198233f, 0.00189701f, 0.0019279f, 0.00179754f, 0.0020844f, 0.00177936f, 0.00239451f, 0.00261215f, 0.00216152f, 0.00155899f, 0.00136709f, 0.00188776f, 0.00213427f, 0.00165547f, 0.00239906f, 0.00250888f, 0.00197929f, 0.00303605f, 0.00210098f, 0.00171477f, 0.00234845f], rhs_zero_points=[100, 103, 133, 111, 122, 130, 97, 117, 106, 174, 111, 125, 129, 137, 160, 128, 104, 140, 133, 119, 182, 132, 116, 163, 147, 100, 121, 128, 93, 114, 95, 138, 139, 99, 137, 95, 148, 133, 128, 126, 159, 134, 118, 131, 99, 142, 108, 96, 149, 85, 132, 87, 101, 102, 130, 143, 132, 152, 107, 158, 131, 127, 115, 119, 122, 122, 116, 162, 108, 142, 118, 142, 137, 133, 135, 134, 145, 135, 170, 145, 154, 117, 136, 123, 117, 177, 171, 137, 144, 134, 144, 124, 119, 136, 119, 118, 147, 141, 136, 149, 123, 121, 117, 114, 100, 109, 113, 149, 129, 138, 126, 155, 104, 165, 115, 117, 114, 170, 121, 146, 132, 154, 115, 171, 129, 99, 92, 171, 132, 111, 178, 159, 140, 133, 113, 188, 137, 101, 103, 134, 104, 132, 122, 153, 95, 134, 128, 97, 105, 137, 121, 117, 117, 101, 120, 130, 105, 141, 162, 118, 116, 122, 115, 125, 99, 128, 141, 111, 125, 102, 124, 124, 125, 154, 82, 137, 130, 135, 110, 108, 149, 119, 74, 118, 128, 72, 122, 131, 124, 109, 146, 147, 140, 129, 141, 100, 124, 120, 100, 140, 138, 163, 136, 119, 151, 125, 110, 86, 115, 141, 124, 123, 120, 100, 129, 129, 136, 120, 145, 124, 69, 157, 143, 141, 152, 135, 133, 164, 132, 116, 93, 158, 135, 137, 126, 133, 152, 127, 127, 114, 127, 105, 137, 102, 109, 127, 131, 93, 138, 117, 139, 139, 99, 112, 102, 123], scales=[0.0325333f], zero_points=[149]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %181 = %180(%179, meta[relay.Constant][216] /* ty=Tensor[(256, 384, 1, 1), uint8] */, meta[relay.Constant][217] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0152381f], lhs_zero_points=[18], rhs_scales=[0.00228006f, 0.00282733f, 0.00296758f, 0.00225333f, 0.00263173f, 0.00229954f, 0.00328169f, 0.00337261f, 0.00285875f, 0.00220583f, 0.00256468f, 0.00205841f, 0.00187549f, 0.00242696f, 0.00252613f, 0.00120267f, 0.00219862f, 0.00159843f, 0.00271181f, 0.0029263f, 0.00346041f, 0.00193328f, 0.0025399f, 0.00208583f, 0.00174657f, 0.00247733f, 0.00205881f, 0.0030157f, 0.00298866f, 0.00184837f, 0.00173446f, 0.00241045f, 0.00455663f, 0.00334645f, 0.00130994f, 0.00333334f, 0.00225344f, 0.0016759f, 0.00281176f, 0.00200157f, 0.00224294f, 0.00253829f, 0.0023255f, 0.00122183f, 0.00241398f, 0.00197075f, 0.0019494f, 0.00273896f, 0.00190618f, 0.00168435f, 0.00195255f, 0.0022251f, 0.00338004f, 0.00230908f, 0.0029366f, 0.00180879f, 0.00271959f, 0.00214613f, 0.00199094f, 0.00290135f, 0.00323431f, 0.0021752f, 0.00253952f, 0.00186138f, 0.00225968f, 0.00186392f, 0.00209967f, 0.00353579f, 0.00237712f, 0.00278968f, 0.00247287f, 0.00173741f, 0.00265341f, 0.00197572f, 0.0016215f, 0.00159448f, 0.00462542f, 0.00197909f, 0.00210676f, 0.00313302f, 0.00188315f, 0.00199367f, 0.0046236f, 0.00353083f, 0.00190821f, 0.0063395f, 0.00259095f, 0.00164331f, 0.00176479f, 0.00183599f, 0.00205489f, 0.0027026f, 0.0024295f, 0.00169717f, 0.00191642f, 0.00237675f, 0.00196798f, 0.00125011f, 0.00131925f, 0.00197205f, 0.00226287f, 0.00227345f, 0.00229944f, 0.00233087f, 0.00216979f, 0.00255217f, 0.001965f, 0.00121403f, 0.00259023f, 0.00247543f, 0.00206275f, 0.00251592f, 0.00216353f, 0.00224835f, 0.00250948f, 0.00121282f, 0.00285207f, 0.0024535f, 0.00123118f, 0.00134984f, 0.00176995f, 0.00215345f, 0.00154424f, 0.0017852f, 0.00188567f, 0.00188295f, 0.00281768f, 0.00244333f, 0.00194045f, 0.00179578f, 0.00283524f, 0.00390531f, 0.00182181f, 0.00311203f, 0.00294273f, 0.00343738f, 0.00179532f, 0.00215957f, 0.00165094f, 0.00228477f, 0.00305084f, 0.00219751f, 0.00194877f, 0.00214876f, 0.00352741f, 0.00374761f, 0.0023523f, 0.00272804f, 0.00283107f, 0.00229528f, 0.00122453f, 0.00158919f, 0.00205787f, 0.00134312f, 0.00128365f, 0.00289746f, 0.00245776f, 0.00257092f, 0.00230826f, 0.00216658f, 0.00199294f, 0.00200475f, 0.00201488f, 0.00193014f, 0.00428997f, 0.00237451f, 0.00197882f, 0.00254476f, 0.00238921f, 0.00274567f, 0.00184158f, 0.00161011f, 0.00218911f, 0.00255051f, 0.00283643f, 0.00181654f, 0.00207604f, 0.00188964f, 0.00203793f, 0.00136276f, 0.00190977f, 0.00209993f, 0.00319015f, 0.00314952f, 0.00262159f, 0.004311f, 0.00241246f, 0.00277636f, 0.00266653f, 0.00240686f, 0.00262726f, 0.00197256f, 0.00316188f, 0.00131557f, 0.00197747f, 0.00261911f, 0.00199303f, 0.00212505f, 0.00176842f, 0.00163454f, 0.00299215f, 0.00187878f, 0.00195266f, 0.00163745f, 0.00249411f, 0.00248471f, 0.0018378f, 0.00302791f, 0.00318029f, 0.00224672f, 0.00173519f, 0.00259894f, 0.00171547f, 0.00239281f, 0.00216237f, 0.00177777f, 0.00215778f, 0.00212728f, 0.0016679f, 0.00277168f, 0.0030987f, 0.00330225f, 0.00244016f, 0.00270639f, 0.00241388f, 0.00331387f, 0.0016189f, 0.00155205f, 0.00243113f, 0.0030772f, 0.00268057f, 0.00250654f, 0.00104247f, 0.00221929f, 0.00238692f, 0.00198233f, 0.00189701f, 0.0019279f, 0.00179754f, 0.0020844f, 0.00177936f, 0.00239451f, 0.00261215f, 0.00216152f, 0.00155899f, 0.00136709f, 0.00188776f, 0.00213427f, 0.00165547f, 0.00239906f, 0.00250888f, 0.00197929f, 0.00303605f, 0.00210098f, 0.00171477f, 0.00234845f], rhs_zero_points=[100, 103, 133, 111, 122, 130, 97, 117, 106, 174, 111, 125, 129, 137, 160, 128, 104, 140, 133, 119, 182, 132, 116, 163, 147, 100, 121, 128, 93, 114, 95, 138, 139, 99, 137, 95, 148, 133, 128, 126, 159, 134, 118, 131, 99, 142, 108, 96, 149, 85, 132, 87, 101, 102, 130, 143, 132, 152, 107, 158, 131, 127, 115, 119, 122, 122, 116, 162, 108, 142, 118, 142, 137, 133, 135, 134, 145, 135, 170, 145, 154, 117, 136, 123, 117, 177, 171, 137, 144, 134, 144, 124, 119, 136, 119, 118, 147, 141, 136, 149, 123, 121, 117, 114, 100, 109, 113, 149, 129, 138, 126, 155, 104, 165, 115, 117, 114, 170, 121, 146, 132, 154, 115, 171, 129, 99, 92, 171, 132, 111, 178, 159, 140, 133, 113, 188, 137, 101, 103, 134, 104, 132, 122, 153, 95, 134, 128, 97, 105, 137, 121, 117, 117, 101, 120, 130, 105, 141, 162, 118, 116, 122, 115, 125, 99, 128, 141, 111, 125, 102, 124, 124, 125, 154, 82, 137, 130, 135, 110, 108, 149, 119, 74, 118, 128, 72, 122, 131, 124, 109, 146, 147, 140, 129, 141, 100, 124, 120, 100, 140, 138, 163, 136, 119, 151, 125, 110, 86, 115, 141, 124, 123, 120, 100, 129, 129, 136, 120, 145, 124, 69, 157, 143, 141, 152, 135, 133, 164, 132, 116, 93, 158, 135, 137, 126, 133, 152, 127, 127, 114, 127, 105, 137, 102, 109, 127, 131, 93, 138, 117, 139, 139, 99, 112, 102, 123], scales=[0.0325333f], zero_points=[149], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %182 = dl.dequantize(%181, input_scales=[0.0325333f], input_zero_points=[149]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %183 = sigmoid(%182) /* /model.6/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %184 = multiply(%182, %183) /* /model.6/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %185 = dl.quantize(%184, output_scales=[0.0142482f], output_zero_points=[20]) /* fake_quant_63 */ /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %186 = fn (%FunctionVar_66_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_66_1: Tensor[(512, 256, 3, 3), uint8], %FunctionVar_66_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a95bba08)) -> Tensor[(1, 512, 20, 20), uint8] {
    %14 = (%FunctionVar_66_0, %FunctionVar_66_1, %FunctionVar_66_2, meta[relay.Constant][66] /* ty=Tensor[(512), float32] */, meta[relay.Constant][67] /* ty=Tensor[(512), int32] */, meta[relay.Constant][68] /* ty=Tensor[(512), int32] */, meta[relay.Constant][69] /* ty=Tensor[(512), int32] */, meta[relay.Constant][70] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%14, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0142482f], lhs_zero_points=[20], rhs_scales=[0.000834854f, 0.00138416f, 0.00111118f, 0.00123191f, 0.000899039f, 0.00130469f, 0.000878f, 0.00130525f, 0.00156538f, 0.00109094f, 0.00102369f, 0.00112522f, 0.00092055f, 0.00105327f, 0.00102663f, 0.000732141f, 0.0012001f, 0.00161054f, 0.00139226f, 0.000831838f, 0.000968097f, 0.00157754f, 0.000807473f, 0.00161573f, 0.0011397f, 0.00147678f, 0.00189864f, 0.00101153f, 0.00121841f, 0.00123758f, 0.00152804f, 0.000666522f, 0.000968195f, 0.000977011f, 0.00108536f, 0.000894831f, 0.00134772f, 0.00156761f, 0.00144042f, 0.00105146f, 0.00110446f, 0.0010839f, 0.000806445f, 0.000809206f, 0.000877776f, 0.00170179f, 0.00135256f, 0.000824069f, 0.000782388f, 0.00147051f, 0.0011023f, 0.00196935f, 0.00159155f, 0.000906399f, 0.00122719f, 0.00140911f, 0.00171799f, 0.00145448f, 0.00143785f, 0.000978311f, 0.000973209f, 0.00164392f, 0.00102257f, 0.00103057f, 0.0015083f, 0.00129868f, 0.00106226f, 0.000833058f, 0.00145546f, 0.000966538f, 0.0010985f, 0.00101752f, 0.00092786f, 0.000918728f, 0.00261719f, 0.000839279f, 0.00090876f, 0.00166319f, 0.000804071f, 0.00117778f, 0.00120892f, 0.00115973f, 0.00128575f, 0.00108444f, 0.00146311f, 0.000909876f, 0.00137052f, 0.00107111f, 0.00119669f, 0.00191015f, 0.0015705f, 0.000870956f, 0.000916019f, 0.0011527f, 0.00148487f, 0.00110975f, 0.00205699f, 0.00103989f, 0.00125962f, 0.00166581f, 0.0011414f, 0.000960773f, 0.000959852f, 0.00159115f, 0.000923199f, 0.00122856f, 0.000913572f, 0.00116909f, 0.000898346f, 0.0012995f, 0.00103519f, 0.00129742f, 0.00159787f, 0.000940685f, 0.00155114f, 0.00142066f, 0.00103644f, 0.00100897f, 0.00117783f, 0.00107434f, 0.00151117f, 0.00163525f, 0.000940377f, 0.00100065f, 0.00143271f, 0.00129044f, 0.000950798f, 0.00122528f, 0.00116754f, 0.00119379f, 0.00147907f, 0.000850222f, 0.00102761f, 0.00138824f, 0.000852323f, 0.00110287f, 0.00122455f, 0.00147676f, 0.00163379f, 0.00101499f, 0.0010976f, 0.000846275f, 0.00117658f, 0.00120248f, 0.00186972f, 0.000950707f, 0.000915312f, 0.00118693f, 0.00121842f, 0.00114047f, 0.00121485f, 0.000938672f, 0.00126719f, 0.00112575f, 0.0010575f, 0.00149526f, 0.00155374f, 0.00218866f, 0.000962915f, 0.000904677f, 0.00130204f, 0.00113125f, 0.00152609f, 0.000877072f, 0.00146499f, 0.00222259f, 0.00117634f, 0.00102215f, 0.00149302f, 0.000941153f, 0.000950273f, 0.00108447f, 0.000845081f, 0.00163196f, 0.000924725f, 0.00103297f, 0.00164697f, 0.00124422f, 0.00126329f, 0.00142236f, 0.00153652f, 0.00115519f, 0.00116822f, 0.00183309f, 0.00119794f, 0.00178348f, 0.000796115f, 0.0011443f, 0.000879879f, 0.00089453f, 0.00120088f, 0.00143343f, 0.0011722f, 0.00128334f, 0.00111271f, 0.00109576f, 0.00102195f, 0.00121018f, 0.00134818f, 0.00111404f, 0.00100069f, 0.000812159f, 0.000820656f, 0.00153481f, 0.00118582f, 0.00087433f, 0.00131162f, 0.000959647f, 0.00116263f, 0.00176436f, 0.00107975f, 0.00138155f, 0.00168288f, 0.00094599f, 0.000916107f, 0.00100071f, 0.00109022f, 0.00111935f, 0.000913237f, 0.00101642f, 0.00129954f, 0.00184264f, 0.00142894f, 0.00146654f, 0.00135416f, 0.00179252f, 0.00129731f, 0.00113032f, 0.00097312f, 0.00127188f, 0.00114983f, 0.00129406f, 0.00104777f, 0.00149558f, 0.00124f, 0.00105994f, 0.00130435f, 0.00128601f, 0.00125492f, 0.000854669f, 0.00138322f, 0.00115382f, 0.00190425f, 0.0014749f, 0.00209874f, 0.000797157f, 0.00102004f, 0.00150743f, 0.00173844f, 0.000836654f, 0.00131698f, 0.00106082f, 0.00127011f, 0.00106823f, 0.0023783f, 0.00106222f, 0.00109767f, 0.00105973f, 0.000955751f, 0.00116256f, 0.000984957f, 0.000962562f, 0.000807829f, 0.000964875f, 0.00153853f, 0.00122569f, 0.00124109f, 0.00112868f, 0.000887934f, 0.000879666f, 0.00194211f, 0.0012038f, 0.00119865f, 0.00148607f, 0.00135383f, 0.00134287f, 0.00144857f, 0.000782386f, 0.00084384f, 0.00184589f, 0.0012517f, 0.000842753f, 0.000981803f, 0.00162023f, 0.000996915f, 0.000957704f, 0.00238479f, 0.0011845f, 0.00172655f, 0.0011591f, 0.00127029f, 0.000659786f, 0.0012857f, 0.0011033f, 0.00178763f, 0.00143589f, 0.00206505f, 0.000914804f, 0.00164404f, 0.00112752f, 0.00119623f, 0.00114941f, 0.000852719f, 0.00106522f, 0.000884395f, 0.0011381f, 0.00138614f, 0.00113405f, 0.00145606f, 0.00107261f, 0.00125418f, 0.000810872f, 0.000993467f, 0.00103996f, 0.00134823f, 0.0010378f, 0.0010717f, 0.00102606f, 0.00110814f, 0.00100926f, 0.00111116f, 0.00192725f, 0.00153175f, 0.000728485f, 0.00139225f, 0.00086641f, 0.000898668f, 0.00143645f, 0.00111181f, 0.000949754f, 0.000848084f, 0.00118267f, 0.00109218f, 0.00100465f, 0.000791729f, 0.00107491f, 0.00187398f, 0.00110215f, 0.000971742f, 0.00109872f, 0.000856128f, 0.00109216f, 0.00130841f, 0.000476941f, 0.00133922f, 0.000652638f, 0.000726227f, 0.00110561f, 0.00140316f, 0.00104334f, 0.000826281f, 0.00105094f, 0.00135178f, 0.000949078f, 0.000881966f, 0.00127451f, 0.00119845f, 0.00172728f, 0.000953291f, 0.00181678f, 0.000918989f, 0.00141695f, 0.00114991f, 0.0023896f, 0.00100188f, 0.0012104f, 0.00101409f, 0.00154562f, 0.00114507f, 0.00102788f, 0.00125005f, 0.00119567f, 0.00124368f, 0.00158477f, 0.00166731f, 0.000985129f, 0.00102823f, 0.00128314f, 0.000996457f, 0.000914029f, 0.00112814f, 0.00220382f, 0.00081664f, 0.000933947f, 0.000918169f, 0.00122134f, 0.00122251f, 0.000970294f, 0.00126584f, 0.00155533f, 0.00135269f, 0.000875023f, 0.00133934f, 0.0016703f, 0.000988703f, 0.00132453f, 0.00116516f, 0.00132447f, 0.000903147f, 0.00110138f, 0.000877781f, 0.000911776f, 0.00139167f, 0.000791238f, 0.00100054f, 0.00129436f, 0.0010387f, 0.000869348f, 0.00138669f, 0.00106027f, 0.000694556f, 0.00103797f, 0.00104723f, 0.00167526f, 0.000913402f, 0.00117822f, 0.00122386f, 0.000985755f, 0.00123691f, 0.0013984f, 0.00157546f, 0.000835829f, 0.00119096f, 0.000684874f, 0.00219543f, 0.000915413f, 0.00107064f, 0.000989056f, 0.000938287f, 0.000756669f, 0.00187708f, 0.00083532f, 0.00111048f, 0.000821071f, 0.00105157f, 0.00126244f, 0.00123038f, 0.000994393f, 0.00134322f, 0.00109094f, 0.00184856f, 0.00112578f, 0.00103758f, 0.000945406f, 0.00119671f, 0.00126634f, 0.00132311f, 0.00263592f, 0.00125456f, 0.000997022f, 0.000913187f, 0.000898843f, 0.00113046f, 0.00112481f, 0.00109068f, 0.00232898f, 0.000809694f, 0.000784827f, 0.00108878f, 0.00175044f, 0.00197388f, 0.00129343f, 0.00122961f, 0.000749194f, 0.00140053f, 0.00115935f, 0.000745949f, 0.00119737f, 0.00113151f, 0.00131087f, 0.000929233f, 0.00126964f, 0.000968889f, 0.000574669f, 0.00112611f, 0.00123271f, 0.00162433f, 0.00102655f, 0.000749686f, 0.00100203f, 0.00128894f, 0.00158126f, 0.00197564f, 0.00115351f, 0.00146409f, 0.00125905f, 0.000945194f, 0.00107862f, 0.00108888f, 0.000781041f, 0.00129655f, 0.00123083f, 0.00119038f, 0.00167434f, 0.00100224f, 0.000849975f, 0.00102936f, 0.00153466f, 0.0016235f, 0.00216251f, 0.00249822f, 0.000956965f, 0.00101299f, 0.000822046f, 0.000997636f, 0.000931387f, 0.00101263f, 0.000880676f, 0.00113367f, 0.00134444f, 0.00153951f, 0.00156677f], rhs_zero_points=[122, 123, 131, 131, 125, 95, 145, 104, 126, 111, 106, 124, 141, 97, 107, 118, 108, 100, 83, 126, 168, 120, 101, 106, 110, 90, 73, 113, 99, 129, 87, 127, 108, 111, 127, 134, 144, 74, 95, 125, 94, 117, 131, 121, 116, 115, 157, 113, 119, 110, 104, 68, 76, 124, 131, 109, 99, 118, 99, 118, 111, 125, 115, 135, 126, 110, 116, 125, 138, 133, 192, 108, 134, 131, 102, 122, 104, 96, 134, 137, 124, 121, 152, 120, 91, 123, 109, 119, 122, 96, 90, 120, 102, 137, 118, 101, 99, 121, 101, 94, 114, 126, 134, 136, 128, 124, 125, 114, 125, 156, 108, 129, 84, 151, 100, 86, 103, 117, 104, 98, 133, 155, 122, 117, 99, 94, 134, 77, 91, 107, 96, 136, 130, 91, 118, 108, 101, 93, 115, 108, 137, 128, 86, 125, 70, 121, 113, 124, 113, 98, 95, 123, 109, 116, 177, 136, 123, 136, 128, 154, 105, 105, 113, 116, 76, 96, 101, 121, 85, 115, 125, 114, 118, 148, 120, 102, 104, 104, 88, 85, 100, 114, 99, 101, 112, 90, 126, 98, 123, 122, 112, 132, 99, 113, 100, 170, 128, 129, 120, 134, 112, 119, 117, 100, 127, 121, 100, 156, 138, 127, 142, 162, 114, 119, 121, 140, 126, 99, 117, 134, 119, 99, 98, 123, 125, 99, 120, 104, 128, 105, 116, 132, 138, 137, 120, 112, 122, 93, 108, 119, 74, 111, 96, 143, 147, 159, 118, 88, 88, 117, 122, 130, 119, 112, 105, 134, 105, 113, 105, 90, 124, 131, 119, 110, 96, 122, 138, 99, 121, 104, 74, 105, 117, 128, 84, 88, 128, 125, 123, 77, 127, 153, 133, 119, 109, 139, 82, 97, 91, 109, 109, 138, 123, 114, 130, 88, 71, 131, 105, 141, 146, 126, 139, 112, 117, 87, 109, 106, 110, 104, 98, 146, 108, 145, 106, 90, 137, 139, 113, 132, 107, 108, 103, 120, 85, 148, 139, 93, 109, 135, 134, 112, 101, 123, 128, 114, 90, 141, 129, 102, 123, 101, 124, 90, 98, 134, 93, 119, 111, 117, 130, 142, 77, 158, 121, 101, 111, 120, 123, 174, 145, 197, 119, 55, 144, 105, 122, 86, 121, 124, 111, 104, 92, 75, 136, 92, 182, 133, 113, 113, 86, 70, 130, 124, 148, 81, 113, 126, 133, 77, 124, 125, 114, 102, 138, 105, 118, 97, 148, 126, 130, 129, 132, 114, 127, 131, 126, 136, 109, 120, 123, 107, 109, 50, 111, 121, 128, 120, 96, 89, 95, 118, 120, 137, 101, 125, 103, 132, 102, 135, 149, 124, 131, 161, 140, 106, 114, 121, 126, 104, 93, 135, 117, 121, 137, 124, 94, 80, 96, 136, 123, 134, 94, 115, 124, 68, 136, 116, 124, 79, 102, 108, 92, 157, 146, 125, 133, 157, 121, 82, 130, 85, 112, 98, 106, 105, 100, 132, 117, 144, 113, 77, 102, 126, 88, 159, 99, 109, 106, 132, 87, 111, 87, 112, 127, 138, 109, 74, 112, 82, 147, 117, 139, 106, 111, 113, 142, 106, 105, 128, 113, 152], scales=[0.0307825f], zero_points=[133]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %187 = %186(%185, meta[relay.Constant][218] /* ty=Tensor[(512, 256, 3, 3), uint8] */, meta[relay.Constant][219] /* ty=Tensor[(512), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=20f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0142482f], lhs_zero_points=[20], rhs_scales=[0.000834854f, 0.00138416f, 0.00111118f, 0.00123191f, 0.000899039f, 0.00130469f, 0.000878f, 0.00130525f, 0.00156538f, 0.00109094f, 0.00102369f, 0.00112522f, 0.00092055f, 0.00105327f, 0.00102663f, 0.000732141f, 0.0012001f, 0.00161054f, 0.00139226f, 0.000831838f, 0.000968097f, 0.00157754f, 0.000807473f, 0.00161573f, 0.0011397f, 0.00147678f, 0.00189864f, 0.00101153f, 0.00121841f, 0.00123758f, 0.00152804f, 0.000666522f, 0.000968195f, 0.000977011f, 0.00108536f, 0.000894831f, 0.00134772f, 0.00156761f, 0.00144042f, 0.00105146f, 0.00110446f, 0.0010839f, 0.000806445f, 0.000809206f, 0.000877776f, 0.00170179f, 0.00135256f, 0.000824069f, 0.000782388f, 0.00147051f, 0.0011023f, 0.00196935f, 0.00159155f, 0.000906399f, 0.00122719f, 0.00140911f, 0.00171799f, 0.00145448f, 0.00143785f, 0.000978311f, 0.000973209f, 0.00164392f, 0.00102257f, 0.00103057f, 0.0015083f, 0.00129868f, 0.00106226f, 0.000833058f, 0.00145546f, 0.000966538f, 0.0010985f, 0.00101752f, 0.00092786f, 0.000918728f, 0.00261719f, 0.000839279f, 0.00090876f, 0.00166319f, 0.000804071f, 0.00117778f, 0.00120892f, 0.00115973f, 0.00128575f, 0.00108444f, 0.00146311f, 0.000909876f, 0.00137052f, 0.00107111f, 0.00119669f, 0.00191015f, 0.0015705f, 0.000870956f, 0.000916019f, 0.0011527f, 0.00148487f, 0.00110975f, 0.00205699f, 0.00103989f, 0.00125962f, 0.00166581f, 0.0011414f, 0.000960773f, 0.000959852f, 0.00159115f, 0.000923199f, 0.00122856f, 0.000913572f, 0.00116909f, 0.000898346f, 0.0012995f, 0.00103519f, 0.00129742f, 0.00159787f, 0.000940685f, 0.00155114f, 0.00142066f, 0.00103644f, 0.00100897f, 0.00117783f, 0.00107434f, 0.00151117f, 0.00163525f, 0.000940377f, 0.00100065f, 0.00143271f, 0.00129044f, 0.000950798f, 0.00122528f, 0.00116754f, 0.00119379f, 0.00147907f, 0.000850222f, 0.00102761f, 0.00138824f, 0.000852323f, 0.00110287f, 0.00122455f, 0.00147676f, 0.00163379f, 0.00101499f, 0.0010976f, 0.000846275f, 0.00117658f, 0.00120248f, 0.00186972f, 0.000950707f, 0.000915312f, 0.00118693f, 0.00121842f, 0.00114047f, 0.00121485f, 0.000938672f, 0.00126719f, 0.00112575f, 0.0010575f, 0.00149526f, 0.00155374f, 0.00218866f, 0.000962915f, 0.000904677f, 0.00130204f, 0.00113125f, 0.00152609f, 0.000877072f, 0.00146499f, 0.00222259f, 0.00117634f, 0.00102215f, 0.00149302f, 0.000941153f, 0.000950273f, 0.00108447f, 0.000845081f, 0.00163196f, 0.000924725f, 0.00103297f, 0.00164697f, 0.00124422f, 0.00126329f, 0.00142236f, 0.00153652f, 0.00115519f, 0.00116822f, 0.00183309f, 0.00119794f, 0.00178348f, 0.000796115f, 0.0011443f, 0.000879879f, 0.00089453f, 0.00120088f, 0.00143343f, 0.0011722f, 0.00128334f, 0.00111271f, 0.00109576f, 0.00102195f, 0.00121018f, 0.00134818f, 0.00111404f, 0.00100069f, 0.000812159f, 0.000820656f, 0.00153481f, 0.00118582f, 0.00087433f, 0.00131162f, 0.000959647f, 0.00116263f, 0.00176436f, 0.00107975f, 0.00138155f, 0.00168288f, 0.00094599f, 0.000916107f, 0.00100071f, 0.00109022f, 0.00111935f, 0.000913237f, 0.00101642f, 0.00129954f, 0.00184264f, 0.00142894f, 0.00146654f, 0.00135416f, 0.00179252f, 0.00129731f, 0.00113032f, 0.00097312f, 0.00127188f, 0.00114983f, 0.00129406f, 0.00104777f, 0.00149558f, 0.00124f, 0.00105994f, 0.00130435f, 0.00128601f, 0.00125492f, 0.000854669f, 0.00138322f, 0.00115382f, 0.00190425f, 0.0014749f, 0.00209874f, 0.000797157f, 0.00102004f, 0.00150743f, 0.00173844f, 0.000836654f, 0.00131698f, 0.00106082f, 0.00127011f, 0.00106823f, 0.0023783f, 0.00106222f, 0.00109767f, 0.00105973f, 0.000955751f, 0.00116256f, 0.000984957f, 0.000962562f, 0.000807829f, 0.000964875f, 0.00153853f, 0.00122569f, 0.00124109f, 0.00112868f, 0.000887934f, 0.000879666f, 0.00194211f, 0.0012038f, 0.00119865f, 0.00148607f, 0.00135383f, 0.00134287f, 0.00144857f, 0.000782386f, 0.00084384f, 0.00184589f, 0.0012517f, 0.000842753f, 0.000981803f, 0.00162023f, 0.000996915f, 0.000957704f, 0.00238479f, 0.0011845f, 0.00172655f, 0.0011591f, 0.00127029f, 0.000659786f, 0.0012857f, 0.0011033f, 0.00178763f, 0.00143589f, 0.00206505f, 0.000914804f, 0.00164404f, 0.00112752f, 0.00119623f, 0.00114941f, 0.000852719f, 0.00106522f, 0.000884395f, 0.0011381f, 0.00138614f, 0.00113405f, 0.00145606f, 0.00107261f, 0.00125418f, 0.000810872f, 0.000993467f, 0.00103996f, 0.00134823f, 0.0010378f, 0.0010717f, 0.00102606f, 0.00110814f, 0.00100926f, 0.00111116f, 0.00192725f, 0.00153175f, 0.000728485f, 0.00139225f, 0.00086641f, 0.000898668f, 0.00143645f, 0.00111181f, 0.000949754f, 0.000848084f, 0.00118267f, 0.00109218f, 0.00100465f, 0.000791729f, 0.00107491f, 0.00187398f, 0.00110215f, 0.000971742f, 0.00109872f, 0.000856128f, 0.00109216f, 0.00130841f, 0.000476941f, 0.00133922f, 0.000652638f, 0.000726227f, 0.00110561f, 0.00140316f, 0.00104334f, 0.000826281f, 0.00105094f, 0.00135178f, 0.000949078f, 0.000881966f, 0.00127451f, 0.00119845f, 0.00172728f, 0.000953291f, 0.00181678f, 0.000918989f, 0.00141695f, 0.00114991f, 0.0023896f, 0.00100188f, 0.0012104f, 0.00101409f, 0.00154562f, 0.00114507f, 0.00102788f, 0.00125005f, 0.00119567f, 0.00124368f, 0.00158477f, 0.00166731f, 0.000985129f, 0.00102823f, 0.00128314f, 0.000996457f, 0.000914029f, 0.00112814f, 0.00220382f, 0.00081664f, 0.000933947f, 0.000918169f, 0.00122134f, 0.00122251f, 0.000970294f, 0.00126584f, 0.00155533f, 0.00135269f, 0.000875023f, 0.00133934f, 0.0016703f, 0.000988703f, 0.00132453f, 0.00116516f, 0.00132447f, 0.000903147f, 0.00110138f, 0.000877781f, 0.000911776f, 0.00139167f, 0.000791238f, 0.00100054f, 0.00129436f, 0.0010387f, 0.000869348f, 0.00138669f, 0.00106027f, 0.000694556f, 0.00103797f, 0.00104723f, 0.00167526f, 0.000913402f, 0.00117822f, 0.00122386f, 0.000985755f, 0.00123691f, 0.0013984f, 0.00157546f, 0.000835829f, 0.00119096f, 0.000684874f, 0.00219543f, 0.000915413f, 0.00107064f, 0.000989056f, 0.000938287f, 0.000756669f, 0.00187708f, 0.00083532f, 0.00111048f, 0.000821071f, 0.00105157f, 0.00126244f, 0.00123038f, 0.000994393f, 0.00134322f, 0.00109094f, 0.00184856f, 0.00112578f, 0.00103758f, 0.000945406f, 0.00119671f, 0.00126634f, 0.00132311f, 0.00263592f, 0.00125456f, 0.000997022f, 0.000913187f, 0.000898843f, 0.00113046f, 0.00112481f, 0.00109068f, 0.00232898f, 0.000809694f, 0.000784827f, 0.00108878f, 0.00175044f, 0.00197388f, 0.00129343f, 0.00122961f, 0.000749194f, 0.00140053f, 0.00115935f, 0.000745949f, 0.00119737f, 0.00113151f, 0.00131087f, 0.000929233f, 0.00126964f, 0.000968889f, 0.000574669f, 0.00112611f, 0.00123271f, 0.00162433f, 0.00102655f, 0.000749686f, 0.00100203f, 0.00128894f, 0.00158126f, 0.00197564f, 0.00115351f, 0.00146409f, 0.00125905f, 0.000945194f, 0.00107862f, 0.00108888f, 0.000781041f, 0.00129655f, 0.00123083f, 0.00119038f, 0.00167434f, 0.00100224f, 0.000849975f, 0.00102936f, 0.00153466f, 0.0016235f, 0.00216251f, 0.00249822f, 0.000956965f, 0.00101299f, 0.000822046f, 0.000997636f, 0.000931387f, 0.00101263f, 0.000880676f, 0.00113367f, 0.00134444f, 0.00153951f, 0.00156677f], rhs_zero_points=[122, 123, 131, 131, 125, 95, 145, 104, 126, 111, 106, 124, 141, 97, 107, 118, 108, 100, 83, 126, 168, 120, 101, 106, 110, 90, 73, 113, 99, 129, 87, 127, 108, 111, 127, 134, 144, 74, 95, 125, 94, 117, 131, 121, 116, 115, 157, 113, 119, 110, 104, 68, 76, 124, 131, 109, 99, 118, 99, 118, 111, 125, 115, 135, 126, 110, 116, 125, 138, 133, 192, 108, 134, 131, 102, 122, 104, 96, 134, 137, 124, 121, 152, 120, 91, 123, 109, 119, 122, 96, 90, 120, 102, 137, 118, 101, 99, 121, 101, 94, 114, 126, 134, 136, 128, 124, 125, 114, 125, 156, 108, 129, 84, 151, 100, 86, 103, 117, 104, 98, 133, 155, 122, 117, 99, 94, 134, 77, 91, 107, 96, 136, 130, 91, 118, 108, 101, 93, 115, 108, 137, 128, 86, 125, 70, 121, 113, 124, 113, 98, 95, 123, 109, 116, 177, 136, 123, 136, 128, 154, 105, 105, 113, 116, 76, 96, 101, 121, 85, 115, 125, 114, 118, 148, 120, 102, 104, 104, 88, 85, 100, 114, 99, 101, 112, 90, 126, 98, 123, 122, 112, 132, 99, 113, 100, 170, 128, 129, 120, 134, 112, 119, 117, 100, 127, 121, 100, 156, 138, 127, 142, 162, 114, 119, 121, 140, 126, 99, 117, 134, 119, 99, 98, 123, 125, 99, 120, 104, 128, 105, 116, 132, 138, 137, 120, 112, 122, 93, 108, 119, 74, 111, 96, 143, 147, 159, 118, 88, 88, 117, 122, 130, 119, 112, 105, 134, 105, 113, 105, 90, 124, 131, 119, 110, 96, 122, 138, 99, 121, 104, 74, 105, 117, 128, 84, 88, 128, 125, 123, 77, 127, 153, 133, 119, 109, 139, 82, 97, 91, 109, 109, 138, 123, 114, 130, 88, 71, 131, 105, 141, 146, 126, 139, 112, 117, 87, 109, 106, 110, 104, 98, 146, 108, 145, 106, 90, 137, 139, 113, 132, 107, 108, 103, 120, 85, 148, 139, 93, 109, 135, 134, 112, 101, 123, 128, 114, 90, 141, 129, 102, 123, 101, 124, 90, 98, 134, 93, 119, 111, 117, 130, 142, 77, 158, 121, 101, 111, 120, 123, 174, 145, 197, 119, 55, 144, 105, 122, 86, 121, 124, 111, 104, 92, 75, 136, 92, 182, 133, 113, 113, 86, 70, 130, 124, 148, 81, 113, 126, 133, 77, 124, 125, 114, 102, 138, 105, 118, 97, 148, 126, 130, 129, 132, 114, 127, 131, 126, 136, 109, 120, 123, 107, 109, 50, 111, 121, 128, 120, 96, 89, 95, 118, 120, 137, 101, 125, 103, 132, 102, 135, 149, 124, 131, 161, 140, 106, 114, 121, 126, 104, 93, 135, 117, 121, 137, 124, 94, 80, 96, 136, 123, 134, 94, 115, 124, 68, 136, 116, 124, 79, 102, 108, 92, 157, 146, 125, 133, 157, 121, 82, 130, 85, 112, 98, 106, 105, 100, 132, 117, 144, 113, 77, 102, 126, 88, 159, 99, 109, 106, 132, 87, 111, 87, 112, 127, 138, 109, 74, 112, 82, 147, 117, 139, 106, 111, 113, 142, 106, 105, 128, 113, 152], scales=[0.0307825f], zero_points=[133], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %188 = dl.dequantize(%187, input_scales=[0.0307825f], input_zero_points=[133]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %189 = sigmoid(%188) /* /model.7/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %190 = multiply(%188, %189) /* /model.7/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %191 = dl.quantize(%190, output_scales=[0.0154209f], output_zero_points=[18]) /* fake_quant_66 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %192 = fn (%FunctionVar_65_0: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_65_1: Tensor[(512, 512, 1, 1), uint8], %FunctionVar_65_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a7b17d98)) -> Tensor[(1, 512, 20, 20), uint8] {
    %13 = (%FunctionVar_65_0, %FunctionVar_65_1, %FunctionVar_65_2, meta[relay.Constant][61] /* ty=Tensor[(512), float32] */, meta[relay.Constant][62] /* ty=Tensor[(512), int32] */, meta[relay.Constant][63] /* ty=Tensor[(512), int32] */, meta[relay.Constant][64] /* ty=Tensor[(512), int32] */, meta[relay.Constant][65] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%13, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0154209f], lhs_zero_points=[18], rhs_scales=[0.0034799f, 0.00288233f, 0.00354926f, 0.00316941f, 0.00334824f, 0.00318522f, 0.00268292f, 0.00272234f, 0.00370802f, 0.00277546f, 0.00341405f, 0.00236203f, 0.00312086f, 0.00285919f, 0.00314993f, 0.00283554f, 0.00295442f, 0.00246644f, 0.00239843f, 0.00353311f, 0.00280401f, 0.0028743f, 0.00300711f, 0.00314835f, 0.00373253f, 0.00333129f, 0.00285917f, 0.00247133f, 0.00286326f, 0.00261898f, 0.00431365f, 0.00296412f, 0.00356095f, 0.00360312f, 0.00270698f, 0.00255829f, 0.00323781f, 0.00244697f, 0.00297373f, 0.00317282f, 0.00292579f, 0.0022298f, 0.00354324f, 0.00250918f, 0.00346913f, 0.00225123f, 0.00466609f, 0.00304117f, 0.00238891f, 0.00290179f, 0.00293498f, 0.0026476f, 0.00308435f, 0.00563081f, 0.00278805f, 0.0029339f, 0.00290298f, 0.00381648f, 0.00288193f, 0.00215743f, 0.0025913f, 0.00229378f, 0.00268557f, 0.00423921f, 0.00229706f, 0.00329648f, 0.00331578f, 0.00285255f, 0.00288485f, 0.00260032f, 0.0036684f, 0.00285448f, 0.00290186f, 0.00248455f, 0.00468521f, 0.00275024f, 0.00343882f, 0.00296634f, 0.0033716f, 0.00371376f, 0.0029125f, 0.00321766f, 0.00349548f, 0.00260935f, 0.00284786f, 0.00218859f, 0.00300073f, 0.00296843f, 0.00303078f, 0.00264762f, 0.00235439f, 0.00241687f, 0.00327343f, 0.00224226f, 0.00420278f, 0.00407335f, 0.00223854f, 0.00360599f, 0.00295016f, 0.00266358f, 0.0028244f, 0.00290717f, 0.0023475f, 0.0027844f, 0.00316964f, 0.00421775f, 0.00278566f, 0.00241708f, 0.00284319f, 0.00256869f, 0.00270881f, 0.0029854f, 0.0025989f, 0.00518883f, 0.00250044f, 0.00372799f, 0.00235949f, 0.00248034f, 0.00225477f, 0.00210397f, 0.00266109f, 0.00336228f, 0.00330109f, 0.00337812f, 0.00343796f, 0.00196426f, 0.0034895f, 0.00294012f, 0.00221341f, 0.00320725f, 0.00322345f, 0.00255003f, 0.00251979f, 0.00314241f, 0.00398209f, 0.00265237f, 0.00242175f, 0.00298296f, 0.00274902f, 0.00329208f, 0.00230941f, 0.00319378f, 0.00283288f, 0.002682f, 0.00262594f, 0.00271082f, 0.0033771f, 0.00212864f, 0.00277584f, 0.00322419f, 0.00233047f, 0.00357397f, 0.00251825f, 0.00286474f, 0.0024714f, 0.00204694f, 0.00493461f, 0.00297346f, 0.00236888f, 0.00344598f, 0.00185887f, 0.00326849f, 0.00244146f, 0.00254282f, 0.00362956f, 0.00253732f, 0.00271094f, 0.00282506f, 0.00300044f, 0.00250939f, 0.00216025f, 0.00222515f, 0.00257147f, 0.0026819f, 0.00260177f, 0.00240004f, 0.00248515f, 0.00239429f, 0.002746f, 0.00352976f, 0.00276987f, 0.00337677f, 0.00295343f, 0.0030645f, 0.0028516f, 0.00216585f, 0.00269622f, 0.00214794f, 0.0028144f, 0.00283228f, 0.00269562f, 0.00400048f, 0.00311629f, 0.00345296f, 0.00303913f, 0.00301807f, 0.0022119f, 0.00197438f, 0.00294762f, 0.00216758f, 0.00253019f, 0.0024671f, 0.00288978f, 0.00301332f, 0.00294713f, 0.00272052f, 0.00362857f, 0.00319257f, 0.00295207f, 0.00314517f, 0.00232854f, 0.00258267f, 0.00240023f, 0.0027088f, 0.00259782f, 0.0027375f, 0.00294982f, 0.00260378f, 0.0029348f, 0.00313528f, 0.00345251f, 0.0029371f, 0.00287402f, 0.0026744f, 0.00302263f, 0.00281084f, 0.00343428f, 0.00307888f, 0.00239211f, 0.00364273f, 0.00286434f, 0.00370557f, 0.00248338f, 0.00244025f, 0.00267821f, 0.00262606f, 0.00399999f, 0.00395312f, 0.00315502f, 0.00304767f, 0.00286825f, 0.0027596f, 0.00285473f, 0.00351689f, 0.00357103f, 0.00230839f, 0.00273177f, 0.00321995f, 0.00260366f, 0.00282233f, 0.00516079f, 0.00261816f, 0.00325546f, 0.00239018f, 0.00352874f, 0.00228461f, 0.00246671f, 0.00327594f, 0.00417085f, 0.0022054f, 0.00330884f, 0.0039369f, 0.00275444f, 0.00241192f, 0.00195335f, 0.00293189f, 0.00315038f, 0.0036753f, 0.00245105f, 0.00279587f, 0.00335577f, 0.00402952f, 0.00276424f, 0.00264966f, 0.00305035f, 0.00268908f, 0.00713637f, 0.00236099f, 0.00234571f, 0.00194924f, 0.00221641f, 0.00256297f, 0.00334505f, 0.00404433f, 0.00267564f, 0.00334019f, 0.00211026f, 0.00196387f, 0.00207401f, 0.00207559f, 0.00583943f, 0.00466428f, 0.00365686f, 0.00173257f, 0.00493542f, 0.00341467f, 0.002665f, 0.00274958f, 0.00249439f, 0.00219407f, 0.0028885f, 0.0026609f, 0.00273843f, 0.00328817f, 0.00373955f, 0.00348385f, 0.00264904f, 0.00364832f, 0.00232652f, 0.00293284f, 0.00255142f, 0.00256609f, 0.00308768f, 0.00436154f, 0.00224824f, 0.00257393f, 0.00243394f, 0.00385444f, 0.00245595f, 0.0032483f, 0.00217379f, 0.00212916f, 0.0036684f, 0.00298489f, 0.00363988f, 0.002511f, 0.00247932f, 0.00308117f, 0.00263188f, 0.00248174f, 0.0022872f, 0.00208284f, 0.00265235f, 0.00180886f, 0.00399859f, 0.00433732f, 0.00329246f, 0.00251848f, 0.00260334f, 0.00300764f, 0.00252479f, 0.00420973f, 0.00239111f, 0.00226332f, 0.00299546f, 0.00395552f, 0.00507026f, 0.00422704f, 0.00386853f, 0.00267002f, 0.00440386f, 0.00223826f, 0.00297995f, 0.00343811f, 0.00359735f, 0.00263816f, 0.00216421f, 0.00294463f, 0.00311904f, 0.00252495f, 0.00220806f, 0.00265662f, 0.00331605f, 0.00320407f, 0.00392f, 0.00231204f, 0.00207229f, 0.00359231f, 0.00309579f, 0.00285803f, 0.00273441f, 0.00389609f, 0.00220405f, 0.00224927f, 0.00273157f, 0.00231731f, 0.00213333f, 0.00312075f, 0.00239222f, 0.00267099f, 0.00356432f, 0.00226153f, 0.00216167f, 0.00282224f, 0.00252136f, 0.00220476f, 0.0033697f, 0.00189732f, 0.00369098f, 0.00247946f, 0.00247485f, 0.00265384f, 0.00236817f, 0.00252306f, 0.00281636f, 0.00208721f, 0.0025694f, 0.00335485f, 0.00295964f, 0.00351748f, 0.00501319f, 0.00341447f, 0.00327082f, 0.00394189f, 0.00281751f, 0.00398058f, 0.00198053f, 0.00316854f, 0.00255142f, 0.00343041f, 0.00262171f, 0.00188503f, 0.0030462f, 0.00397694f, 0.00319938f, 0.00350183f, 0.00280106f, 0.00284854f, 0.00250384f, 0.00217538f, 0.00309529f, 0.00362667f, 0.00327987f, 0.00305766f, 0.00276447f, 0.00245466f, 0.00272466f, 0.00311236f, 0.00275622f, 0.00456041f, 0.00280361f, 0.00201354f, 0.00203145f, 0.00239484f, 0.00297415f, 0.00268364f, 0.00326768f, 0.00253018f, 0.0041478f, 0.0024739f, 0.00454845f, 0.00364641f, 0.00261939f, 0.00248282f, 0.00289351f, 0.00249109f, 0.00350367f, 0.00474904f, 0.00264112f, 0.00368811f, 0.00390446f, 0.00323181f, 0.00299903f, 0.00293696f, 0.0028746f, 0.00205497f, 0.00420484f, 0.00311106f, 0.00245533f, 0.00252289f, 0.00293613f, 0.00453683f, 0.00332675f, 0.00331096f, 0.00297159f, 0.00215898f, 0.00215266f, 0.00205741f, 0.0035373f, 0.00219725f, 0.00347708f, 0.00311456f, 0.00195345f, 0.00370092f, 0.0026915f, 0.00261429f, 0.00348246f, 0.00254089f, 0.002536f, 0.00220463f, 0.00330452f, 0.00240411f, 0.00302934f, 0.00236416f, 0.00219284f, 0.00213323f, 0.00336186f, 0.0024767f, 0.00383196f, 0.0023434f, 0.00276734f, 0.00313531f, 0.00167067f, 0.0018817f, 0.00328154f, 0.00276366f, 0.00225583f, 0.00340608f, 0.0018189f, 0.00299044f, 0.00260319f, 0.00200295f, 0.00297724f, 0.00204764f, 0.00315346f, 0.00256791f, 0.00352744f, 0.0024942f, 0.00303372f, 0.00210678f, 0.00448417f, 0.00371908f], rhs_zero_points=[104, 108, 96, 122, 130, 118, 139, 136, 169, 98, 106, 126, 111, 158, 102, 133, 123, 123, 121, 151, 132, 113, 122, 139, 122, 118, 166, 122, 111, 110, 153, 113, 126, 143, 131, 98, 140, 100, 140, 150, 108, 130, 113, 126, 108, 137, 106, 131, 130, 154, 115, 102, 144, 152, 110, 106, 134, 155, 115, 126, 123, 121, 133, 108, 122, 114, 121, 91, 147, 157, 121, 108, 125, 152, 100, 115, 123, 132, 159, 131, 117, 111, 157, 121, 148, 120, 112, 94, 127, 113, 115, 116, 83, 124, 127, 147, 125, 97, 96, 138, 132, 132, 138, 108, 156, 96, 112, 101, 107, 126, 121, 113, 124, 154, 146, 129, 127, 142, 121, 121, 120, 98, 117, 100, 143, 89, 100, 167, 107, 133, 108, 129, 138, 153, 140, 119, 140, 95, 97, 112, 130, 107, 151, 114, 108, 136, 128, 132, 119, 114, 128, 111, 139, 99, 115, 149, 121, 131, 117, 135, 119, 177, 118, 126, 104, 124, 155, 122, 104, 116, 125, 126, 119, 120, 108, 118, 129, 119, 131, 164, 124, 111, 127, 122, 134, 147, 143, 117, 148, 126, 126, 86, 122, 133, 126, 134, 123, 100, 140, 127, 113, 127, 150, 132, 106, 115, 107, 119, 128, 128, 110, 122, 130, 96, 138, 128, 115, 124, 148, 101, 139, 122, 111, 120, 151, 142, 125, 141, 124, 153, 133, 131, 107, 111, 117, 119, 140, 138, 134, 138, 140, 163, 105, 92, 88, 133, 117, 156, 124, 169, 114, 123, 104, 106, 102, 123, 114, 103, 122, 116, 131, 88, 99, 101, 109, 96, 103, 92, 102, 130, 111, 100, 107, 113, 115, 124, 146, 123, 120, 103, 130, 127, 106, 121, 127, 91, 131, 153, 120, 105, 126, 125, 75, 146, 76, 51, 118, 139, 141, 102, 109, 120, 103, 101, 130, 113, 135, 82, 126, 110, 103, 150, 95, 72, 119, 105, 171, 88, 114, 114, 111, 105, 125, 113, 99, 124, 102, 126, 115, 105, 138, 100, 96, 137, 113, 68, 110, 136, 106, 111, 151, 52, 83, 90, 127, 79, 140, 77, 127, 131, 83, 120, 104, 106, 106, 116, 119, 111, 97, 125, 113, 95, 119, 106, 160, 124, 120, 130, 111, 117, 128, 107, 102, 119, 153, 138, 124, 130, 172, 143, 138, 116, 101, 102, 134, 114, 129, 113, 92, 118, 116, 109, 101, 132, 108, 133, 92, 109, 118, 100, 83, 108, 129, 90, 121, 106, 134, 93, 114, 124, 84, 122, 168, 134, 96, 91, 104, 96, 158, 134, 123, 107, 116, 99, 171, 103, 105, 126, 103, 103, 110, 125, 104, 120, 111, 130, 86, 121, 59, 114, 97, 79, 125, 115, 92, 122, 106, 213, 119, 99, 105, 96, 112, 99, 106, 120, 103, 132, 97, 112, 105, 59, 93, 103, 110, 110, 129, 109, 162, 107, 122, 99, 100, 148, 95, 109, 84, 112, 104, 115, 134, 139, 103, 118, 114, 129, 98, 131, 89, 114, 105, 84, 105, 111, 110, 95, 124, 103, 100, 114, 118, 149, 118, 101, 79, 106, 96, 135, 108, 120, 88, 182], scales=[0.0403526f], zero_points=[135]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %193 = %192(%191, meta[relay.Constant][220] /* ty=Tensor[(512, 512, 1, 1), uint8] */, meta[relay.Constant][221] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0154209f], lhs_zero_points=[18], rhs_scales=[0.0034799f, 0.00288233f, 0.00354926f, 0.00316941f, 0.00334824f, 0.00318522f, 0.00268292f, 0.00272234f, 0.00370802f, 0.00277546f, 0.00341405f, 0.00236203f, 0.00312086f, 0.00285919f, 0.00314993f, 0.00283554f, 0.00295442f, 0.00246644f, 0.00239843f, 0.00353311f, 0.00280401f, 0.0028743f, 0.00300711f, 0.00314835f, 0.00373253f, 0.00333129f, 0.00285917f, 0.00247133f, 0.00286326f, 0.00261898f, 0.00431365f, 0.00296412f, 0.00356095f, 0.00360312f, 0.00270698f, 0.00255829f, 0.00323781f, 0.00244697f, 0.00297373f, 0.00317282f, 0.00292579f, 0.0022298f, 0.00354324f, 0.00250918f, 0.00346913f, 0.00225123f, 0.00466609f, 0.00304117f, 0.00238891f, 0.00290179f, 0.00293498f, 0.0026476f, 0.00308435f, 0.00563081f, 0.00278805f, 0.0029339f, 0.00290298f, 0.00381648f, 0.00288193f, 0.00215743f, 0.0025913f, 0.00229378f, 0.00268557f, 0.00423921f, 0.00229706f, 0.00329648f, 0.00331578f, 0.00285255f, 0.00288485f, 0.00260032f, 0.0036684f, 0.00285448f, 0.00290186f, 0.00248455f, 0.00468521f, 0.00275024f, 0.00343882f, 0.00296634f, 0.0033716f, 0.00371376f, 0.0029125f, 0.00321766f, 0.00349548f, 0.00260935f, 0.00284786f, 0.00218859f, 0.00300073f, 0.00296843f, 0.00303078f, 0.00264762f, 0.00235439f, 0.00241687f, 0.00327343f, 0.00224226f, 0.00420278f, 0.00407335f, 0.00223854f, 0.00360599f, 0.00295016f, 0.00266358f, 0.0028244f, 0.00290717f, 0.0023475f, 0.0027844f, 0.00316964f, 0.00421775f, 0.00278566f, 0.00241708f, 0.00284319f, 0.00256869f, 0.00270881f, 0.0029854f, 0.0025989f, 0.00518883f, 0.00250044f, 0.00372799f, 0.00235949f, 0.00248034f, 0.00225477f, 0.00210397f, 0.00266109f, 0.00336228f, 0.00330109f, 0.00337812f, 0.00343796f, 0.00196426f, 0.0034895f, 0.00294012f, 0.00221341f, 0.00320725f, 0.00322345f, 0.00255003f, 0.00251979f, 0.00314241f, 0.00398209f, 0.00265237f, 0.00242175f, 0.00298296f, 0.00274902f, 0.00329208f, 0.00230941f, 0.00319378f, 0.00283288f, 0.002682f, 0.00262594f, 0.00271082f, 0.0033771f, 0.00212864f, 0.00277584f, 0.00322419f, 0.00233047f, 0.00357397f, 0.00251825f, 0.00286474f, 0.0024714f, 0.00204694f, 0.00493461f, 0.00297346f, 0.00236888f, 0.00344598f, 0.00185887f, 0.00326849f, 0.00244146f, 0.00254282f, 0.00362956f, 0.00253732f, 0.00271094f, 0.00282506f, 0.00300044f, 0.00250939f, 0.00216025f, 0.00222515f, 0.00257147f, 0.0026819f, 0.00260177f, 0.00240004f, 0.00248515f, 0.00239429f, 0.002746f, 0.00352976f, 0.00276987f, 0.00337677f, 0.00295343f, 0.0030645f, 0.0028516f, 0.00216585f, 0.00269622f, 0.00214794f, 0.0028144f, 0.00283228f, 0.00269562f, 0.00400048f, 0.00311629f, 0.00345296f, 0.00303913f, 0.00301807f, 0.0022119f, 0.00197438f, 0.00294762f, 0.00216758f, 0.00253019f, 0.0024671f, 0.00288978f, 0.00301332f, 0.00294713f, 0.00272052f, 0.00362857f, 0.00319257f, 0.00295207f, 0.00314517f, 0.00232854f, 0.00258267f, 0.00240023f, 0.0027088f, 0.00259782f, 0.0027375f, 0.00294982f, 0.00260378f, 0.0029348f, 0.00313528f, 0.00345251f, 0.0029371f, 0.00287402f, 0.0026744f, 0.00302263f, 0.00281084f, 0.00343428f, 0.00307888f, 0.00239211f, 0.00364273f, 0.00286434f, 0.00370557f, 0.00248338f, 0.00244025f, 0.00267821f, 0.00262606f, 0.00399999f, 0.00395312f, 0.00315502f, 0.00304767f, 0.00286825f, 0.0027596f, 0.00285473f, 0.00351689f, 0.00357103f, 0.00230839f, 0.00273177f, 0.00321995f, 0.00260366f, 0.00282233f, 0.00516079f, 0.00261816f, 0.00325546f, 0.00239018f, 0.00352874f, 0.00228461f, 0.00246671f, 0.00327594f, 0.00417085f, 0.0022054f, 0.00330884f, 0.0039369f, 0.00275444f, 0.00241192f, 0.00195335f, 0.00293189f, 0.00315038f, 0.0036753f, 0.00245105f, 0.00279587f, 0.00335577f, 0.00402952f, 0.00276424f, 0.00264966f, 0.00305035f, 0.00268908f, 0.00713637f, 0.00236099f, 0.00234571f, 0.00194924f, 0.00221641f, 0.00256297f, 0.00334505f, 0.00404433f, 0.00267564f, 0.00334019f, 0.00211026f, 0.00196387f, 0.00207401f, 0.00207559f, 0.00583943f, 0.00466428f, 0.00365686f, 0.00173257f, 0.00493542f, 0.00341467f, 0.002665f, 0.00274958f, 0.00249439f, 0.00219407f, 0.0028885f, 0.0026609f, 0.00273843f, 0.00328817f, 0.00373955f, 0.00348385f, 0.00264904f, 0.00364832f, 0.00232652f, 0.00293284f, 0.00255142f, 0.00256609f, 0.00308768f, 0.00436154f, 0.00224824f, 0.00257393f, 0.00243394f, 0.00385444f, 0.00245595f, 0.0032483f, 0.00217379f, 0.00212916f, 0.0036684f, 0.00298489f, 0.00363988f, 0.002511f, 0.00247932f, 0.00308117f, 0.00263188f, 0.00248174f, 0.0022872f, 0.00208284f, 0.00265235f, 0.00180886f, 0.00399859f, 0.00433732f, 0.00329246f, 0.00251848f, 0.00260334f, 0.00300764f, 0.00252479f, 0.00420973f, 0.00239111f, 0.00226332f, 0.00299546f, 0.00395552f, 0.00507026f, 0.00422704f, 0.00386853f, 0.00267002f, 0.00440386f, 0.00223826f, 0.00297995f, 0.00343811f, 0.00359735f, 0.00263816f, 0.00216421f, 0.00294463f, 0.00311904f, 0.00252495f, 0.00220806f, 0.00265662f, 0.00331605f, 0.00320407f, 0.00392f, 0.00231204f, 0.00207229f, 0.00359231f, 0.00309579f, 0.00285803f, 0.00273441f, 0.00389609f, 0.00220405f, 0.00224927f, 0.00273157f, 0.00231731f, 0.00213333f, 0.00312075f, 0.00239222f, 0.00267099f, 0.00356432f, 0.00226153f, 0.00216167f, 0.00282224f, 0.00252136f, 0.00220476f, 0.0033697f, 0.00189732f, 0.00369098f, 0.00247946f, 0.00247485f, 0.00265384f, 0.00236817f, 0.00252306f, 0.00281636f, 0.00208721f, 0.0025694f, 0.00335485f, 0.00295964f, 0.00351748f, 0.00501319f, 0.00341447f, 0.00327082f, 0.00394189f, 0.00281751f, 0.00398058f, 0.00198053f, 0.00316854f, 0.00255142f, 0.00343041f, 0.00262171f, 0.00188503f, 0.0030462f, 0.00397694f, 0.00319938f, 0.00350183f, 0.00280106f, 0.00284854f, 0.00250384f, 0.00217538f, 0.00309529f, 0.00362667f, 0.00327987f, 0.00305766f, 0.00276447f, 0.00245466f, 0.00272466f, 0.00311236f, 0.00275622f, 0.00456041f, 0.00280361f, 0.00201354f, 0.00203145f, 0.00239484f, 0.00297415f, 0.00268364f, 0.00326768f, 0.00253018f, 0.0041478f, 0.0024739f, 0.00454845f, 0.00364641f, 0.00261939f, 0.00248282f, 0.00289351f, 0.00249109f, 0.00350367f, 0.00474904f, 0.00264112f, 0.00368811f, 0.00390446f, 0.00323181f, 0.00299903f, 0.00293696f, 0.0028746f, 0.00205497f, 0.00420484f, 0.00311106f, 0.00245533f, 0.00252289f, 0.00293613f, 0.00453683f, 0.00332675f, 0.00331096f, 0.00297159f, 0.00215898f, 0.00215266f, 0.00205741f, 0.0035373f, 0.00219725f, 0.00347708f, 0.00311456f, 0.00195345f, 0.00370092f, 0.0026915f, 0.00261429f, 0.00348246f, 0.00254089f, 0.002536f, 0.00220463f, 0.00330452f, 0.00240411f, 0.00302934f, 0.00236416f, 0.00219284f, 0.00213323f, 0.00336186f, 0.0024767f, 0.00383196f, 0.0023434f, 0.00276734f, 0.00313531f, 0.00167067f, 0.0018817f, 0.00328154f, 0.00276366f, 0.00225583f, 0.00340608f, 0.0018189f, 0.00299044f, 0.00260319f, 0.00200295f, 0.00297724f, 0.00204764f, 0.00315346f, 0.00256791f, 0.00352744f, 0.0024942f, 0.00303372f, 0.00210678f, 0.00448417f, 0.00371908f], rhs_zero_points=[104, 108, 96, 122, 130, 118, 139, 136, 169, 98, 106, 126, 111, 158, 102, 133, 123, 123, 121, 151, 132, 113, 122, 139, 122, 118, 166, 122, 111, 110, 153, 113, 126, 143, 131, 98, 140, 100, 140, 150, 108, 130, 113, 126, 108, 137, 106, 131, 130, 154, 115, 102, 144, 152, 110, 106, 134, 155, 115, 126, 123, 121, 133, 108, 122, 114, 121, 91, 147, 157, 121, 108, 125, 152, 100, 115, 123, 132, 159, 131, 117, 111, 157, 121, 148, 120, 112, 94, 127, 113, 115, 116, 83, 124, 127, 147, 125, 97, 96, 138, 132, 132, 138, 108, 156, 96, 112, 101, 107, 126, 121, 113, 124, 154, 146, 129, 127, 142, 121, 121, 120, 98, 117, 100, 143, 89, 100, 167, 107, 133, 108, 129, 138, 153, 140, 119, 140, 95, 97, 112, 130, 107, 151, 114, 108, 136, 128, 132, 119, 114, 128, 111, 139, 99, 115, 149, 121, 131, 117, 135, 119, 177, 118, 126, 104, 124, 155, 122, 104, 116, 125, 126, 119, 120, 108, 118, 129, 119, 131, 164, 124, 111, 127, 122, 134, 147, 143, 117, 148, 126, 126, 86, 122, 133, 126, 134, 123, 100, 140, 127, 113, 127, 150, 132, 106, 115, 107, 119, 128, 128, 110, 122, 130, 96, 138, 128, 115, 124, 148, 101, 139, 122, 111, 120, 151, 142, 125, 141, 124, 153, 133, 131, 107, 111, 117, 119, 140, 138, 134, 138, 140, 163, 105, 92, 88, 133, 117, 156, 124, 169, 114, 123, 104, 106, 102, 123, 114, 103, 122, 116, 131, 88, 99, 101, 109, 96, 103, 92, 102, 130, 111, 100, 107, 113, 115, 124, 146, 123, 120, 103, 130, 127, 106, 121, 127, 91, 131, 153, 120, 105, 126, 125, 75, 146, 76, 51, 118, 139, 141, 102, 109, 120, 103, 101, 130, 113, 135, 82, 126, 110, 103, 150, 95, 72, 119, 105, 171, 88, 114, 114, 111, 105, 125, 113, 99, 124, 102, 126, 115, 105, 138, 100, 96, 137, 113, 68, 110, 136, 106, 111, 151, 52, 83, 90, 127, 79, 140, 77, 127, 131, 83, 120, 104, 106, 106, 116, 119, 111, 97, 125, 113, 95, 119, 106, 160, 124, 120, 130, 111, 117, 128, 107, 102, 119, 153, 138, 124, 130, 172, 143, 138, 116, 101, 102, 134, 114, 129, 113, 92, 118, 116, 109, 101, 132, 108, 133, 92, 109, 118, 100, 83, 108, 129, 90, 121, 106, 134, 93, 114, 124, 84, 122, 168, 134, 96, 91, 104, 96, 158, 134, 123, 107, 116, 99, 171, 103, 105, 126, 103, 103, 110, 125, 104, 120, 111, 130, 86, 121, 59, 114, 97, 79, 125, 115, 92, 122, 106, 213, 119, 99, 105, 96, 112, 99, 106, 120, 103, 132, 97, 112, 105, 59, 93, 103, 110, 110, 129, 109, 162, 107, 122, 99, 100, 148, 95, 109, 84, 112, 104, 115, 134, 139, 103, 118, 114, 129, 98, 131, 89, 114, 105, 84, 105, 111, 110, 95, 124, 103, 100, 114, 118, 149, 118, 101, 79, 106, 96, 135, 108, 120, 88, 182], scales=[0.0403526f], zero_points=[135], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %194 = dl.dequantize(%193, input_scales=[0.0403526f], input_zero_points=[135]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %195 = sigmoid(%194) /* /model.8/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %196 = multiply(%194, %195) /* /model.8/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %197 = fn (%FunctionVar_7_0: Tensor[(1, 512, 20, 20), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a95595d8)) -> (Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) {
    split(%FunctionVar_7_0, indices_or_sections=[256], axis=1) /* /model.8/Split_output_0 */ /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */
  };
  %198 = %197(%196, indices_or_sections=[256], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */;
  %201 = %198.1;
  %202 = dl.quantize(%201, output_scales=[0.0139003f], output_zero_points=[20]) /* fake_quant_69 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %203 = fn (%FunctionVar_64_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_64_1: Tensor[(128, 256, 1, 1), uint8], %FunctionVar_64_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9544ff8)) -> Tensor[(1, 128, 20, 20), uint8] {
    %200 = (%FunctionVar_64_0, %FunctionVar_64_1, %FunctionVar_64_2, meta[relay.Constant][227] /* ty=Tensor[(128), float32] */, meta[relay.Constant][228] /* ty=Tensor[(128), int32] */, meta[relay.Constant][229] /* ty=Tensor[(128), int32] */, meta[relay.Constant][230] /* ty=Tensor[(128), int32] */, meta[relay.Constant][231] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%200, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0139003f], lhs_zero_points=[20], rhs_scales=[0.00199584f, 0.00259505f, 0.00302303f, 0.00243117f, 0.00157442f, 0.00192687f, 0.00221318f, 0.00214814f, 0.00180886f, 0.00182161f, 0.00168587f, 0.00228263f, 0.00250111f, 0.00609768f, 0.00190611f, 0.00189684f, 0.00412069f, 0.00164588f, 0.00213997f, 0.00209191f, 0.00162277f, 0.00186923f, 0.00219844f, 0.0019184f, 0.00215383f, 0.00187089f, 0.00235515f, 0.00190112f, 0.00277422f, 0.00529598f, 0.00223722f, 0.00288619f, 0.00236495f, 0.00314409f, 0.00205555f, 0.00267353f, 0.0020974f, 0.00293152f, 0.00211081f, 0.00257315f, 0.00378707f, 0.00321619f, 0.0029671f, 0.00208051f, 0.00406985f, 0.00230955f, 0.00159651f, 0.00223463f, 0.00206154f, 0.00235848f, 0.00163453f, 0.00195579f, 0.00231903f, 0.00460582f, 0.0017025f, 0.0017151f, 0.00433922f, 0.000765992f, 0.00531083f, 0.00214404f, 0.00222634f, 0.00240262f, 0.00232028f, 0.0018443f, 0.000841748f, 0.00206998f, 0.00184175f, 0.00166727f, 0.00631853f, 0.00236035f, 0.00254951f, 0.00178839f, 0.00312904f, 0.00182865f, 0.00252583f, 0.00178061f, 0.00230108f, 0.00206796f, 0.00242956f, 0.00227451f, 0.00453658f, 0.00635032f, 0.00275642f, 0.00486601f, 0.00190457f, 0.00224251f, 0.00245502f, 0.00344359f, 0.00210619f, 0.00279721f, 0.00191982f, 0.00231604f, 0.00325876f, 0.00356709f, 0.00229996f, 0.00404708f, 0.00181946f, 0.00281402f, 0.00237342f, 0.00267164f, 0.00202418f, 0.00187223f, 0.00346675f, 0.0045715f, 0.00190057f, 0.00246908f, 0.0020797f, 0.00524813f, 0.00202036f, 0.00177561f, 0.00173389f, 0.00191849f, 0.00448122f, 0.0026898f, 0.00205509f, 0.00206766f, 0.00429537f, 0.00212007f, 0.00206918f, 0.00226353f, 0.00206685f, 0.0025938f, 0.00227341f, 0.00228434f, 0.00113577f, 0.00203287f, 0.00248911f, 0.00241667f], rhs_zero_points=[105, 114, 78, 116, 128, 113, 116, 109, 130, 131, 136, 126, 121, 128, 136, 117, 144, 132, 100, 157, 127, 96, 141, 98, 98, 136, 115, 195, 92, 82, 129, 97, 115, 97, 124, 128, 155, 80, 133, 132, 113, 85, 105, 130, 150, 115, 110, 160, 147, 98, 112, 105, 89, 152, 128, 104, 138, 154, 125, 156, 100, 197, 92, 122, 114, 129, 144, 128, 84, 122, 115, 139, 89, 125, 165, 123, 102, 104, 83, 128, 52, 160, 133, 138, 132, 126, 106, 170, 117, 99, 112, 121, 89, 104, 89, 137, 114, 111, 105, 103, 122, 132, 89, 151, 126, 120, 128, 112, 92, 113, 113, 113, 128, 81, 122, 151, 136, 121, 110, 103, 135, 117, 115, 102, 105, 119, 97, 89], scales=[0.0222871f], zero_points=[118]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %204 = %203(%202, meta[relay.Constant][232] /* ty=Tensor[(128, 256, 1, 1), uint8] */, meta[relay.Constant][233] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0139003f], lhs_zero_points=[20], rhs_scales=[0.00199584f, 0.00259505f, 0.00302303f, 0.00243117f, 0.00157442f, 0.00192687f, 0.00221318f, 0.00214814f, 0.00180886f, 0.00182161f, 0.00168587f, 0.00228263f, 0.00250111f, 0.00609768f, 0.00190611f, 0.00189684f, 0.00412069f, 0.00164588f, 0.00213997f, 0.00209191f, 0.00162277f, 0.00186923f, 0.00219844f, 0.0019184f, 0.00215383f, 0.00187089f, 0.00235515f, 0.00190112f, 0.00277422f, 0.00529598f, 0.00223722f, 0.00288619f, 0.00236495f, 0.00314409f, 0.00205555f, 0.00267353f, 0.0020974f, 0.00293152f, 0.00211081f, 0.00257315f, 0.00378707f, 0.00321619f, 0.0029671f, 0.00208051f, 0.00406985f, 0.00230955f, 0.00159651f, 0.00223463f, 0.00206154f, 0.00235848f, 0.00163453f, 0.00195579f, 0.00231903f, 0.00460582f, 0.0017025f, 0.0017151f, 0.00433922f, 0.000765992f, 0.00531083f, 0.00214404f, 0.00222634f, 0.00240262f, 0.00232028f, 0.0018443f, 0.000841748f, 0.00206998f, 0.00184175f, 0.00166727f, 0.00631853f, 0.00236035f, 0.00254951f, 0.00178839f, 0.00312904f, 0.00182865f, 0.00252583f, 0.00178061f, 0.00230108f, 0.00206796f, 0.00242956f, 0.00227451f, 0.00453658f, 0.00635032f, 0.00275642f, 0.00486601f, 0.00190457f, 0.00224251f, 0.00245502f, 0.00344359f, 0.00210619f, 0.00279721f, 0.00191982f, 0.00231604f, 0.00325876f, 0.00356709f, 0.00229996f, 0.00404708f, 0.00181946f, 0.00281402f, 0.00237342f, 0.00267164f, 0.00202418f, 0.00187223f, 0.00346675f, 0.0045715f, 0.00190057f, 0.00246908f, 0.0020797f, 0.00524813f, 0.00202036f, 0.00177561f, 0.00173389f, 0.00191849f, 0.00448122f, 0.0026898f, 0.00205509f, 0.00206766f, 0.00429537f, 0.00212007f, 0.00206918f, 0.00226353f, 0.00206685f, 0.0025938f, 0.00227341f, 0.00228434f, 0.00113577f, 0.00203287f, 0.00248911f, 0.00241667f], rhs_zero_points=[105, 114, 78, 116, 128, 113, 116, 109, 130, 131, 136, 126, 121, 128, 136, 117, 144, 132, 100, 157, 127, 96, 141, 98, 98, 136, 115, 195, 92, 82, 129, 97, 115, 97, 124, 128, 155, 80, 133, 132, 113, 85, 105, 130, 150, 115, 110, 160, 147, 98, 112, 105, 89, 152, 128, 104, 138, 154, 125, 156, 100, 197, 92, 122, 114, 129, 144, 128, 84, 122, 115, 139, 89, 125, 165, 123, 102, 104, 83, 128, 52, 160, 133, 138, 132, 126, 106, 170, 117, 99, 112, 121, 89, 104, 89, 137, 114, 111, 105, 103, 122, 132, 89, 151, 126, 120, 128, 112, 92, 113, 113, 113, 128, 81, 122, 151, 136, 121, 110, 103, 135, 117, 115, 102, 105, 119, 97, 89], scales=[0.0222871f], zero_points=[118], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %205 = dl.dequantize(%204, input_scales=[0.0222871f], input_zero_points=[118]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %206 = sigmoid(%205) /* /model.8/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %209 = multiply(%205, %206) /* /model.8/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %210 = dl.quantize(%209, output_scales=[0.0125023f], output_zero_points=[22]) /* fake_quant_72 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %211 = fn (%FunctionVar_63_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_63_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_63_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaed3a88)) -> Tensor[(1, 128, 20, 20), uint8] {
    %208 = (%FunctionVar_63_0, %FunctionVar_63_1, %FunctionVar_63_2, meta[relay.Constant][239] /* ty=Tensor[(128), float32] */, meta[relay.Constant][240] /* ty=Tensor[(128), int32] */, meta[relay.Constant][241] /* ty=Tensor[(128), int32] */, meta[relay.Constant][242] /* ty=Tensor[(128), int32] */, meta[relay.Constant][243] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%208, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0125023f], lhs_zero_points=[22], rhs_scales=[0.00143551f, 0.00177322f, 0.00203225f, 0.0019655f, 0.00278252f, 0.00287639f, 0.00179318f, 0.00248353f, 0.00164838f, 0.00211973f, 0.0010566f, 0.00174732f, 0.00229058f, 0.00232557f, 0.00145586f, 0.00176567f, 0.00133353f, 0.00200982f, 0.00103429f, 0.00158899f, 0.00214863f, 0.00156076f, 0.00288702f, 0.00434669f, 0.00213767f, 0.00207494f, 0.00178225f, 0.00210302f, 0.00104326f, 0.00159335f, 0.00173844f, 0.00216827f, 0.00213385f, 0.00174684f, 0.00220129f, 0.00150334f, 0.00259914f, 0.00381358f, 0.00198983f, 0.00418003f, 0.00207405f, 0.00234873f, 0.00119417f, 0.00236253f, 0.0023149f, 0.00147093f, 0.00205328f, 0.00161046f, 0.00112811f, 0.00195408f, 0.00174353f, 0.00176611f, 0.0015997f, 0.0015851f, 0.00226559f, 0.00152332f, 0.00218313f, 0.00202615f, 0.00250166f, 0.00198426f, 0.00240553f, 0.00270651f, 0.00179462f, 0.00129772f, 0.00677511f, 0.00183258f, 0.00172961f, 0.00171015f, 0.00226635f, 0.00177248f, 0.00496563f, 0.00196841f, 0.00171246f, 0.00279556f, 0.00134364f, 0.00186775f, 0.00227343f, 0.00168568f, 0.00289935f, 0.00135935f, 0.00116263f, 0.00191902f, 0.00120162f, 0.00659764f, 0.00137976f, 0.00124129f, 0.00219442f, 0.00313144f, 0.00127406f, 0.00122217f, 0.00208523f, 0.0014255f, 0.00178366f, 0.00124076f, 0.00290761f, 0.00133606f, 0.00161778f, 0.00197441f, 0.00163542f, 0.00268828f, 0.00115244f, 0.00142494f, 0.00190968f, 0.00114727f, 0.00159793f, 0.0008255f, 0.00275928f, 0.00133525f, 0.00146462f, 0.00257903f, 0.00176847f, 0.00163095f, 0.00104403f, 0.00149829f, 0.00230556f, 0.0012022f, 0.00105639f, 0.00134084f, 0.00102554f, 0.00252746f, 0.00132106f, 0.00199362f, 0.00216066f, 0.00225377f, 0.00234753f, 0.00158855f, 0.00160143f, 0.00126322f], rhs_zero_points=[120, 119, 109, 117, 145, 102, 149, 129, 129, 130, 145, 132, 112, 85, 103, 132, 146, 103, 183, 132, 128, 135, 164, 148, 100, 127, 136, 97, 129, 96, 89, 125, 121, 128, 136, 113, 98, 153, 105, 152, 106, 120, 133, 66, 124, 142, 101, 132, 127, 123, 75, 119, 123, 144, 93, 130, 95, 112, 90, 96, 142, 134, 123, 134, 128, 122, 117, 128, 125, 120, 129, 131, 141, 101, 116, 136, 109, 126, 96, 127, 114, 120, 128, 120, 134, 141, 126, 102, 117, 120, 123, 109, 130, 143, 166, 132, 112, 100, 144, 98, 126, 131, 113, 123, 106, 132, 134, 120, 151, 106, 111, 93, 122, 165, 160, 143, 138, 132, 151, 117, 115, 124, 132, 108, 125, 98, 94, 150], scales=[0.0307355f], zero_points=[155]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %212 = %211(%210, meta[relay.Constant][244] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][245] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=22f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0125023f], lhs_zero_points=[22], rhs_scales=[0.00143551f, 0.00177322f, 0.00203225f, 0.0019655f, 0.00278252f, 0.00287639f, 0.00179318f, 0.00248353f, 0.00164838f, 0.00211973f, 0.0010566f, 0.00174732f, 0.00229058f, 0.00232557f, 0.00145586f, 0.00176567f, 0.00133353f, 0.00200982f, 0.00103429f, 0.00158899f, 0.00214863f, 0.00156076f, 0.00288702f, 0.00434669f, 0.00213767f, 0.00207494f, 0.00178225f, 0.00210302f, 0.00104326f, 0.00159335f, 0.00173844f, 0.00216827f, 0.00213385f, 0.00174684f, 0.00220129f, 0.00150334f, 0.00259914f, 0.00381358f, 0.00198983f, 0.00418003f, 0.00207405f, 0.00234873f, 0.00119417f, 0.00236253f, 0.0023149f, 0.00147093f, 0.00205328f, 0.00161046f, 0.00112811f, 0.00195408f, 0.00174353f, 0.00176611f, 0.0015997f, 0.0015851f, 0.00226559f, 0.00152332f, 0.00218313f, 0.00202615f, 0.00250166f, 0.00198426f, 0.00240553f, 0.00270651f, 0.00179462f, 0.00129772f, 0.00677511f, 0.00183258f, 0.00172961f, 0.00171015f, 0.00226635f, 0.00177248f, 0.00496563f, 0.00196841f, 0.00171246f, 0.00279556f, 0.00134364f, 0.00186775f, 0.00227343f, 0.00168568f, 0.00289935f, 0.00135935f, 0.00116263f, 0.00191902f, 0.00120162f, 0.00659764f, 0.00137976f, 0.00124129f, 0.00219442f, 0.00313144f, 0.00127406f, 0.00122217f, 0.00208523f, 0.0014255f, 0.00178366f, 0.00124076f, 0.00290761f, 0.00133606f, 0.00161778f, 0.00197441f, 0.00163542f, 0.00268828f, 0.00115244f, 0.00142494f, 0.00190968f, 0.00114727f, 0.00159793f, 0.0008255f, 0.00275928f, 0.00133525f, 0.00146462f, 0.00257903f, 0.00176847f, 0.00163095f, 0.00104403f, 0.00149829f, 0.00230556f, 0.0012022f, 0.00105639f, 0.00134084f, 0.00102554f, 0.00252746f, 0.00132106f, 0.00199362f, 0.00216066f, 0.00225377f, 0.00234753f, 0.00158855f, 0.00160143f, 0.00126322f], rhs_zero_points=[120, 119, 109, 117, 145, 102, 149, 129, 129, 130, 145, 132, 112, 85, 103, 132, 146, 103, 183, 132, 128, 135, 164, 148, 100, 127, 136, 97, 129, 96, 89, 125, 121, 128, 136, 113, 98, 153, 105, 152, 106, 120, 133, 66, 124, 142, 101, 132, 127, 123, 75, 119, 123, 144, 93, 130, 95, 112, 90, 96, 142, 134, 123, 134, 128, 122, 117, 128, 125, 120, 129, 131, 141, 101, 116, 136, 109, 126, 96, 127, 114, 120, 128, 120, 134, 141, 126, 102, 117, 120, 123, 109, 130, 143, 166, 132, 112, 100, 144, 98, 126, 131, 113, 123, 106, 132, 134, 120, 151, 106, 111, 93, 122, 165, 160, 143, 138, 132, 151, 117, 115, 124, 132, 108, 125, 98, 94, 150], scales=[0.0307355f], zero_points=[155], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %213 = dl.dequantize(%212, input_scales=[0.0307355f], input_zero_points=[155]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %214 = sigmoid(%213) /* /model.8/m.0/m/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %215 = multiply(%213, %214) /* /model.8/m.0/m/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %216 = dl.quantize(%215, output_scales=[0.0125746f], output_zero_points=[22]) /* fake_quant_75 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %217 = fn (%FunctionVar_62_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_62_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_62_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a963ac48)) -> Tensor[(1, 128, 20, 20), uint8] {
    %207 = (%FunctionVar_62_0, %FunctionVar_62_1, %FunctionVar_62_2, meta[relay.Constant][234] /* ty=Tensor[(128), float32] */, meta[relay.Constant][235] /* ty=Tensor[(128), int32] */, meta[relay.Constant][236] /* ty=Tensor[(128), int32] */, meta[relay.Constant][237] /* ty=Tensor[(128), int32] */, meta[relay.Constant][238] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%207, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0125746f], lhs_zero_points=[22], rhs_scales=[0.00137909f, 0.00183126f, 0.0015759f, 0.00150577f, 0.00364075f, 0.00338078f, 0.00133491f, 0.00155612f, 0.00159049f, 0.00143227f, 0.00236103f, 0.00125514f, 0.00240332f, 0.00260029f, 0.000986248f, 0.00227044f, 0.00188464f, 0.00204029f, 0.00205927f, 0.0021685f, 0.00133955f, 0.00189056f, 0.00123367f, 0.00175352f, 0.00134684f, 0.00120425f, 0.00210978f, 0.00138552f, 0.000911966f, 0.00369329f, 0.00125801f, 0.0024769f, 0.00141127f, 0.00163286f, 0.00277619f, 0.00197495f, 0.00197086f, 0.00308332f, 0.00125433f, 0.00201152f, 0.00250925f, 0.00201448f, 0.00111963f, 0.00531729f, 0.00137802f, 0.000946003f, 0.00170477f, 0.00209952f, 0.00350266f, 0.00081727f, 0.00197132f, 0.000793709f, 0.00154815f, 0.00158755f, 0.00092696f, 0.00164751f, 0.00243733f, 0.00439913f, 0.00143206f, 0.00171179f, 0.0029112f, 0.00110935f, 0.00143444f, 0.00160511f, 0.000985193f, 0.00165976f, 0.00217561f, 0.00177051f, 0.00289445f, 0.00130412f, 0.00173335f, 0.00195561f, 0.00160755f, 0.00130574f, 0.00167312f, 0.001654f, 0.00135137f, 0.00172644f, 0.00231685f, 0.00272566f, 0.00158174f, 0.000965267f, 0.00225648f, 0.00186715f, 0.00173198f, 0.00196886f, 0.00251125f, 0.00122239f, 0.0021826f, 0.00151854f, 0.00126229f, 0.00135235f, 0.00119603f, 0.0054806f, 0.00240098f, 0.00186875f, 0.00133844f, 0.00161639f, 0.00173746f, 0.00192481f, 0.00225583f, 0.00137369f, 0.00112519f, 0.00149603f, 0.0022205f, 0.0016126f, 0.00109252f, 0.00403913f, 0.00114534f, 0.00163979f, 0.0011641f, 0.00217113f, 0.00166621f, 0.00157992f, 0.00171529f, 0.00153863f, 0.00194826f, 0.00169338f, 0.00146187f, 0.000849576f, 0.00192691f, 0.00145944f, 0.00176687f, 0.00203132f, 0.00109924f, 0.00164184f, 0.0032892f, 0.00175975f], rhs_zero_points=[159, 146, 124, 105, 142, 116, 112, 136, 114, 103, 104, 119, 89, 178, 103, 95, 110, 101, 122, 118, 110, 128, 134, 101, 128, 109, 149, 116, 125, 146, 132, 88, 103, 100, 119, 107, 105, 107, 111, 104, 122, 95, 120, 88, 133, 120, 144, 74, 118, 103, 128, 114, 100, 85, 116, 131, 117, 133, 133, 83, 100, 118, 95, 109, 127, 94, 109, 115, 171, 114, 118, 111, 130, 119, 128, 111, 111, 127, 116, 81, 129, 119, 61, 107, 126, 91, 93, 107, 96, 131, 125, 94, 114, 94, 99, 88, 123, 122, 112, 108, 108, 130, 150, 104, 107, 124, 131, 151, 133, 122, 132, 120, 98, 131, 116, 87, 122, 128, 132, 98, 105, 127, 83, 108, 109, 110, 112, 106], scales=[0.0245676f], zero_points=[142]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %218 = %217(%216, meta[relay.Constant][246] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][247] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=22f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0125746f], lhs_zero_points=[22], rhs_scales=[0.00137909f, 0.00183126f, 0.0015759f, 0.00150577f, 0.00364075f, 0.00338078f, 0.00133491f, 0.00155612f, 0.00159049f, 0.00143227f, 0.00236103f, 0.00125514f, 0.00240332f, 0.00260029f, 0.000986248f, 0.00227044f, 0.00188464f, 0.00204029f, 0.00205927f, 0.0021685f, 0.00133955f, 0.00189056f, 0.00123367f, 0.00175352f, 0.00134684f, 0.00120425f, 0.00210978f, 0.00138552f, 0.000911966f, 0.00369329f, 0.00125801f, 0.0024769f, 0.00141127f, 0.00163286f, 0.00277619f, 0.00197495f, 0.00197086f, 0.00308332f, 0.00125433f, 0.00201152f, 0.00250925f, 0.00201448f, 0.00111963f, 0.00531729f, 0.00137802f, 0.000946003f, 0.00170477f, 0.00209952f, 0.00350266f, 0.00081727f, 0.00197132f, 0.000793709f, 0.00154815f, 0.00158755f, 0.00092696f, 0.00164751f, 0.00243733f, 0.00439913f, 0.00143206f, 0.00171179f, 0.0029112f, 0.00110935f, 0.00143444f, 0.00160511f, 0.000985193f, 0.00165976f, 0.00217561f, 0.00177051f, 0.00289445f, 0.00130412f, 0.00173335f, 0.00195561f, 0.00160755f, 0.00130574f, 0.00167312f, 0.001654f, 0.00135137f, 0.00172644f, 0.00231685f, 0.00272566f, 0.00158174f, 0.000965267f, 0.00225648f, 0.00186715f, 0.00173198f, 0.00196886f, 0.00251125f, 0.00122239f, 0.0021826f, 0.00151854f, 0.00126229f, 0.00135235f, 0.00119603f, 0.0054806f, 0.00240098f, 0.00186875f, 0.00133844f, 0.00161639f, 0.00173746f, 0.00192481f, 0.00225583f, 0.00137369f, 0.00112519f, 0.00149603f, 0.0022205f, 0.0016126f, 0.00109252f, 0.00403913f, 0.00114534f, 0.00163979f, 0.0011641f, 0.00217113f, 0.00166621f, 0.00157992f, 0.00171529f, 0.00153863f, 0.00194826f, 0.00169338f, 0.00146187f, 0.000849576f, 0.00192691f, 0.00145944f, 0.00176687f, 0.00203132f, 0.00109924f, 0.00164184f, 0.0032892f, 0.00175975f], rhs_zero_points=[159, 146, 124, 105, 142, 116, 112, 136, 114, 103, 104, 119, 89, 178, 103, 95, 110, 101, 122, 118, 110, 128, 134, 101, 128, 109, 149, 116, 125, 146, 132, 88, 103, 100, 119, 107, 105, 107, 111, 104, 122, 95, 120, 88, 133, 120, 144, 74, 118, 103, 128, 114, 100, 85, 116, 131, 117, 133, 133, 83, 100, 118, 95, 109, 127, 94, 109, 115, 171, 114, 118, 111, 130, 119, 128, 111, 111, 127, 116, 81, 129, 119, 61, 107, 126, 91, 93, 107, 96, 131, 125, 94, 114, 94, 99, 88, 123, 122, 112, 108, 108, 130, 150, 104, 107, 124, 131, 151, 133, 122, 132, 120, 98, 131, 116, 87, 122, 128, 132, 98, 105, 127, 83, 108, 109, 110, 112, 106], scales=[0.0245676f], zero_points=[142], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %219 = dl.dequantize(%218, input_scales=[0.0245676f], input_zero_points=[142]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %220 = sigmoid(%219) /* /model.8/m.0/m/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %221 = multiply(%219, %220) /* /model.8/m.0/m/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %224 = add(%209, %221) /* /model.8/m.0/m/m.0/Add_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %225 = dl.quantize(%224, output_scales=[0.0143736f], output_zero_points=[39]) /* fake_quant_78 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %226 = fn (%FunctionVar_61_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_61_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_61_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a955afa8)) -> Tensor[(1, 128, 20, 20), uint8] {
    %223 = (%FunctionVar_61_0, %FunctionVar_61_1, %FunctionVar_61_2, meta[relay.Constant][253] /* ty=Tensor[(128), float32] */, meta[relay.Constant][254] /* ty=Tensor[(128), int32] */, meta[relay.Constant][255] /* ty=Tensor[(128), int32] */, meta[relay.Constant][256] /* ty=Tensor[(128), int32] */, meta[relay.Constant][257] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%223, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0143736f], lhs_zero_points=[39], rhs_scales=[0.000940035f, 0.00180156f, 0.00163713f, 0.00108391f, 0.00115368f, 0.00149733f, 0.00180523f, 0.00163031f, 0.0023838f, 0.000954029f, 0.00129908f, 0.00062677f, 0.00108835f, 0.00149026f, 0.00197207f, 0.00105401f, 0.000858071f, 0.000997109f, 0.00252963f, 0.00124728f, 0.00148091f, 0.000713795f, 0.000989469f, 0.00102394f, 0.00152592f, 0.0022712f, 0.00220977f, 0.00154071f, 0.000739752f, 0.00127158f, 0.00114353f, 0.00118852f, 0.00133782f, 0.000777532f, 0.000802599f, 0.00122839f, 0.00139205f, 0.000654146f, 0.00158024f, 0.00147583f, 0.00133435f, 0.00136874f, 0.000955264f, 0.000639191f, 0.00117846f, 0.000790451f, 0.000958186f, 0.000856778f, 0.000880325f, 0.000812971f, 0.000720072f, 0.000830442f, 0.00206599f, 0.000708867f, 0.000896512f, 0.000759103f, 0.000939463f, 0.000802001f, 0.00102753f, 0.00100342f, 0.00151597f, 0.000950089f, 0.000846908f, 0.00105759f, 0.00175625f, 0.00051597f, 0.00122196f, 0.00115383f, 0.00114699f, 0.00116344f, 0.00167982f, 0.000884516f, 0.00199807f, 0.00147041f, 0.00118737f, 0.000772584f, 0.00154284f, 0.0010215f, 0.00253265f, 0.000756412f, 0.00167983f, 0.00143335f, 0.000965796f, 0.00165818f, 0.000997547f, 0.00157459f, 0.000681994f, 0.00155668f, 0.00128362f, 0.00135639f, 0.00176421f, 0.00123214f, 0.00144522f, 0.0011025f, 0.00127702f, 0.00112602f, 0.000651381f, 0.000918868f, 0.00162004f, 0.000645258f, 0.0014112f, 0.0015952f, 0.00116171f, 0.00136208f, 0.00133734f, 0.0015699f, 0.00194173f, 0.000704187f, 0.000765125f, 0.00120216f, 0.00126887f, 0.000904715f, 0.0011403f, 0.00106685f, 0.000797417f, 0.000776931f, 0.00117446f, 0.000827644f, 0.00114342f, 0.00141731f, 0.00133602f, 0.00192362f, 0.00176503f, 0.000820107f, 0.00121243f, 0.00160472f, 0.00115827f, 0.000759192f], rhs_zero_points=[153, 117, 118, 127, 133, 95, 96, 76, 98, 142, 114, 135, 154, 100, 78, 119, 135, 134, 104, 106, 154, 128, 127, 132, 119, 133, 63, 90, 125, 133, 122, 125, 123, 149, 115, 125, 110, 140, 115, 106, 130, 114, 147, 138, 144, 134, 177, 132, 114, 173, 134, 116, 125, 121, 95, 105, 130, 125, 117, 179, 106, 130, 112, 120, 89, 124, 105, 90, 101, 107, 203, 136, 75, 126, 169, 160, 98, 124, 103, 128, 68, 90, 121, 94, 124, 115, 129, 121, 106, 125, 92, 112, 131, 134, 184, 121, 138, 130, 103, 105, 83, 101, 108, 123, 136, 101, 84, 132, 124, 119, 156, 149, 134, 121, 125, 117, 125, 125, 119, 111, 107, 107, 103, 133, 124, 123, 114, 121], scales=[0.0260649f], zero_points=[133]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %227 = %226(%225, meta[relay.Constant][258] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][259] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=39f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0143736f], lhs_zero_points=[39], rhs_scales=[0.000940035f, 0.00180156f, 0.00163713f, 0.00108391f, 0.00115368f, 0.00149733f, 0.00180523f, 0.00163031f, 0.0023838f, 0.000954029f, 0.00129908f, 0.00062677f, 0.00108835f, 0.00149026f, 0.00197207f, 0.00105401f, 0.000858071f, 0.000997109f, 0.00252963f, 0.00124728f, 0.00148091f, 0.000713795f, 0.000989469f, 0.00102394f, 0.00152592f, 0.0022712f, 0.00220977f, 0.00154071f, 0.000739752f, 0.00127158f, 0.00114353f, 0.00118852f, 0.00133782f, 0.000777532f, 0.000802599f, 0.00122839f, 0.00139205f, 0.000654146f, 0.00158024f, 0.00147583f, 0.00133435f, 0.00136874f, 0.000955264f, 0.000639191f, 0.00117846f, 0.000790451f, 0.000958186f, 0.000856778f, 0.000880325f, 0.000812971f, 0.000720072f, 0.000830442f, 0.00206599f, 0.000708867f, 0.000896512f, 0.000759103f, 0.000939463f, 0.000802001f, 0.00102753f, 0.00100342f, 0.00151597f, 0.000950089f, 0.000846908f, 0.00105759f, 0.00175625f, 0.00051597f, 0.00122196f, 0.00115383f, 0.00114699f, 0.00116344f, 0.00167982f, 0.000884516f, 0.00199807f, 0.00147041f, 0.00118737f, 0.000772584f, 0.00154284f, 0.0010215f, 0.00253265f, 0.000756412f, 0.00167983f, 0.00143335f, 0.000965796f, 0.00165818f, 0.000997547f, 0.00157459f, 0.000681994f, 0.00155668f, 0.00128362f, 0.00135639f, 0.00176421f, 0.00123214f, 0.00144522f, 0.0011025f, 0.00127702f, 0.00112602f, 0.000651381f, 0.000918868f, 0.00162004f, 0.000645258f, 0.0014112f, 0.0015952f, 0.00116171f, 0.00136208f, 0.00133734f, 0.0015699f, 0.00194173f, 0.000704187f, 0.000765125f, 0.00120216f, 0.00126887f, 0.000904715f, 0.0011403f, 0.00106685f, 0.000797417f, 0.000776931f, 0.00117446f, 0.000827644f, 0.00114342f, 0.00141731f, 0.00133602f, 0.00192362f, 0.00176503f, 0.000820107f, 0.00121243f, 0.00160472f, 0.00115827f, 0.000759192f], rhs_zero_points=[153, 117, 118, 127, 133, 95, 96, 76, 98, 142, 114, 135, 154, 100, 78, 119, 135, 134, 104, 106, 154, 128, 127, 132, 119, 133, 63, 90, 125, 133, 122, 125, 123, 149, 115, 125, 110, 140, 115, 106, 130, 114, 147, 138, 144, 134, 177, 132, 114, 173, 134, 116, 125, 121, 95, 105, 130, 125, 117, 179, 106, 130, 112, 120, 89, 124, 105, 90, 101, 107, 203, 136, 75, 126, 169, 160, 98, 124, 103, 128, 68, 90, 121, 94, 124, 115, 129, 121, 106, 125, 92, 112, 131, 134, 184, 121, 138, 130, 103, 105, 83, 101, 108, 123, 136, 101, 84, 132, 124, 119, 156, 149, 134, 121, 125, 117, 125, 125, 119, 111, 107, 107, 103, 133, 124, 123, 114, 121], scales=[0.0260649f], zero_points=[133], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %228 = dl.dequantize(%227, input_scales=[0.0260649f], input_zero_points=[133]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %229 = sigmoid(%228) /* /model.8/m.0/m/m.1/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %230 = multiply(%228, %229) /* /model.8/m.0/m/m.1/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %231 = dl.quantize(%230, output_scales=[0.0131152f], output_zero_points=[21]) /* fake_quant_81 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %232 = fn (%FunctionVar_60_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_60_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_60_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae49c18)) -> Tensor[(1, 128, 20, 20), uint8] {
    %222 = (%FunctionVar_60_0, %FunctionVar_60_1, %FunctionVar_60_2, meta[relay.Constant][248] /* ty=Tensor[(128), float32] */, meta[relay.Constant][249] /* ty=Tensor[(128), int32] */, meta[relay.Constant][250] /* ty=Tensor[(128), int32] */, meta[relay.Constant][251] /* ty=Tensor[(128), int32] */, meta[relay.Constant][252] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%222, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0131152f], lhs_zero_points=[21], rhs_scales=[0.00182457f, 0.00229419f, 0.00157807f, 0.00234623f, 0.00163906f, 0.00262766f, 0.0014094f, 0.00182599f, 0.00214701f, 0.00164834f, 0.00290925f, 0.0019194f, 0.00200234f, 0.00277453f, 0.002756f, 0.0020118f, 0.00281057f, 0.00193756f, 0.00173106f, 0.00209614f, 0.00250286f, 0.00208038f, 0.0030628f, 0.00228844f, 0.00264412f, 0.00188528f, 0.00179771f, 0.00156255f, 0.00162753f, 0.00507175f, 0.00116123f, 0.00288671f, 0.00180536f, 0.00428624f, 0.00279575f, 0.00269284f, 0.00269656f, 0.00180457f, 0.00139502f, 0.00178821f, 0.00276063f, 0.0025569f, 0.00156143f, 0.00253592f, 0.00234261f, 0.00173263f, 0.00105983f, 0.00367546f, 0.00276171f, 0.00365423f, 0.00255323f, 0.00386001f, 0.00152556f, 0.00206494f, 0.00188478f, 0.00256084f, 0.0031773f, 0.00522003f, 0.00169209f, 0.00241121f, 0.00362772f, 0.00112384f, 0.00175643f, 0.00461803f, 0.00230521f, 0.00257612f, 0.00227723f, 0.00191053f, 0.00312804f, 0.00172053f, 0.00237654f, 0.00205915f, 0.00178529f, 0.00146665f, 0.00259972f, 0.00229232f, 0.00154713f, 0.00178628f, 0.00321617f, 0.00297161f, 0.00191575f, 0.00160448f, 0.00164196f, 0.00230745f, 0.00133935f, 0.00201584f, 0.00329609f, 0.0023051f, 0.00260211f, 0.00189629f, 0.00230891f, 0.00164101f, 0.00568119f, 0.00277318f, 0.00266802f, 0.00198406f, 0.00291217f, 0.00183868f, 0.00179246f, 0.00188832f, 0.00189559f, 0.00176005f, 0.00162717f, 0.00272344f, 0.00209737f, 0.0021712f, 0.00150439f, 0.00469436f, 0.00200702f, 0.00145725f, 0.00147003f, 0.00252197f, 0.00181587f, 0.00183817f, 0.00117113f, 0.00260727f, 0.00259421f, 0.00154394f, 0.00204973f, 0.00328034f, 0.00241026f, 0.00315154f, 0.00198553f, 0.00182551f, 0.00148669f, 0.00211616f, 0.00212157f, 0.00232717f], rhs_zero_points=[130, 120, 124, 113, 128, 102, 110, 117, 134, 115, 102, 120, 98, 132, 153, 120, 115, 138, 109, 110, 130, 110, 122, 128, 144, 94, 130, 116, 101, 167, 119, 94, 119, 84, 85, 151, 112, 112, 116, 131, 97, 170, 118, 82, 81, 101, 128, 105, 114, 64, 131, 116, 127, 89, 133, 142, 109, 98, 104, 113, 97, 132, 137, 118, 140, 105, 119, 108, 164, 108, 117, 101, 123, 135, 152, 122, 101, 116, 74, 121, 128, 146, 80, 142, 139, 118, 105, 127, 124, 80, 129, 134, 98, 100, 120, 161, 87, 123, 132, 113, 94, 123, 139, 119, 96, 121, 126, 184, 142, 107, 141, 135, 111, 124, 132, 77, 109, 122, 122, 66, 101, 84, 88, 108, 121, 140, 117, 135], scales=[0.0463728f], zero_points=[106]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %233 = %232(%231, meta[relay.Constant][260] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][261] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=21f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0131152f], lhs_zero_points=[21], rhs_scales=[0.00182457f, 0.00229419f, 0.00157807f, 0.00234623f, 0.00163906f, 0.00262766f, 0.0014094f, 0.00182599f, 0.00214701f, 0.00164834f, 0.00290925f, 0.0019194f, 0.00200234f, 0.00277453f, 0.002756f, 0.0020118f, 0.00281057f, 0.00193756f, 0.00173106f, 0.00209614f, 0.00250286f, 0.00208038f, 0.0030628f, 0.00228844f, 0.00264412f, 0.00188528f, 0.00179771f, 0.00156255f, 0.00162753f, 0.00507175f, 0.00116123f, 0.00288671f, 0.00180536f, 0.00428624f, 0.00279575f, 0.00269284f, 0.00269656f, 0.00180457f, 0.00139502f, 0.00178821f, 0.00276063f, 0.0025569f, 0.00156143f, 0.00253592f, 0.00234261f, 0.00173263f, 0.00105983f, 0.00367546f, 0.00276171f, 0.00365423f, 0.00255323f, 0.00386001f, 0.00152556f, 0.00206494f, 0.00188478f, 0.00256084f, 0.0031773f, 0.00522003f, 0.00169209f, 0.00241121f, 0.00362772f, 0.00112384f, 0.00175643f, 0.00461803f, 0.00230521f, 0.00257612f, 0.00227723f, 0.00191053f, 0.00312804f, 0.00172053f, 0.00237654f, 0.00205915f, 0.00178529f, 0.00146665f, 0.00259972f, 0.00229232f, 0.00154713f, 0.00178628f, 0.00321617f, 0.00297161f, 0.00191575f, 0.00160448f, 0.00164196f, 0.00230745f, 0.00133935f, 0.00201584f, 0.00329609f, 0.0023051f, 0.00260211f, 0.00189629f, 0.00230891f, 0.00164101f, 0.00568119f, 0.00277318f, 0.00266802f, 0.00198406f, 0.00291217f, 0.00183868f, 0.00179246f, 0.00188832f, 0.00189559f, 0.00176005f, 0.00162717f, 0.00272344f, 0.00209737f, 0.0021712f, 0.00150439f, 0.00469436f, 0.00200702f, 0.00145725f, 0.00147003f, 0.00252197f, 0.00181587f, 0.00183817f, 0.00117113f, 0.00260727f, 0.00259421f, 0.00154394f, 0.00204973f, 0.00328034f, 0.00241026f, 0.00315154f, 0.00198553f, 0.00182551f, 0.00148669f, 0.00211616f, 0.00212157f, 0.00232717f], rhs_zero_points=[130, 120, 124, 113, 128, 102, 110, 117, 134, 115, 102, 120, 98, 132, 153, 120, 115, 138, 109, 110, 130, 110, 122, 128, 144, 94, 130, 116, 101, 167, 119, 94, 119, 84, 85, 151, 112, 112, 116, 131, 97, 170, 118, 82, 81, 101, 128, 105, 114, 64, 131, 116, 127, 89, 133, 142, 109, 98, 104, 113, 97, 132, 137, 118, 140, 105, 119, 108, 164, 108, 117, 101, 123, 135, 152, 122, 101, 116, 74, 121, 128, 146, 80, 142, 139, 118, 105, 127, 124, 80, 129, 134, 98, 100, 120, 161, 87, 123, 132, 113, 94, 123, 139, 119, 96, 121, 126, 184, 142, 107, 141, 135, 111, 124, 132, 77, 109, 122, 122, 66, 101, 84, 88, 108, 121, 140, 117, 135], scales=[0.0463728f], zero_points=[106], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %234 = dl.dequantize(%233, input_scales=[0.0463728f], input_zero_points=[106]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %235 = sigmoid(%234) /* /model.8/m.0/m/m.1/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %236 = multiply(%234, %235) /* /model.8/m.0/m/m.1/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %238 = fn (%FunctionVar_59_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_59_1: Tensor[(128, 256, 1, 1), uint8], %FunctionVar_59_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a97110f8)) -> Tensor[(1, 128, 20, 20), uint8] {
    %237 = (%FunctionVar_59_0, %FunctionVar_59_1, %FunctionVar_59_2, meta[relay.Constant][262] /* ty=Tensor[(128), float32] */, meta[relay.Constant][263] /* ty=Tensor[(128), int32] */, meta[relay.Constant][264] /* ty=Tensor[(128), int32] */, meta[relay.Constant][265] /* ty=Tensor[(128), int32] */, meta[relay.Constant][266] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%237, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0139003f], lhs_zero_points=[20], rhs_scales=[0.00234934f, 0.00339206f, 0.00304145f, 0.00325461f, 0.0025349f, 0.00303498f, 0.00276397f, 0.00265315f, 0.00215241f, 0.00386858f, 0.00394406f, 0.00276495f, 0.00232161f, 0.00369533f, 0.00287938f, 0.00311068f, 0.00268826f, 0.00244515f, 0.00271699f, 0.00307547f, 0.00288652f, 0.00316897f, 0.00316663f, 0.00320029f, 0.00326754f, 0.00260407f, 0.00268118f, 0.00262101f, 0.00239473f, 0.0024461f, 0.00298923f, 0.0025039f, 0.00240416f, 0.00245708f, 0.00393423f, 0.00253705f, 0.00262646f, 0.00408314f, 0.00287439f, 0.00218766f, 0.00274802f, 0.00288496f, 0.00284065f, 0.00287045f, 0.00336229f, 0.00217588f, 0.00294945f, 0.00410961f, 0.00276866f, 0.00297264f, 0.00359189f, 0.00279081f, 0.00288496f, 0.00244791f, 0.00433662f, 0.00240266f, 0.00266512f, 0.00342312f, 0.00337364f, 0.00273102f, 0.00288717f, 0.00292137f, 0.00372187f, 0.00277355f, 0.00251834f, 0.00276155f, 0.0032334f, 0.00296711f, 0.00290418f, 0.00265019f, 0.00251877f, 0.00372278f, 0.00262305f, 0.00336757f, 0.00248438f, 0.00308436f, 0.00323726f, 0.00327458f, 0.00303289f, 0.00238727f, 0.00258772f, 0.00263738f, 0.00297598f, 0.00272125f, 0.00278407f, 0.00292196f, 0.00268271f, 0.00362678f, 0.00300195f, 0.00314748f, 0.00230912f, 0.002791f, 0.00281047f, 0.00310652f, 0.00315107f, 0.00259462f, 0.00215692f, 0.00221871f, 0.00261223f, 0.00272745f, 0.00282269f, 0.00267162f, 0.00270093f, 0.00250287f, 0.0027926f, 0.00228145f, 0.00317097f, 0.00281669f, 0.00294786f, 0.00302727f, 0.00302804f, 0.00310248f, 0.00275376f, 0.00407608f, 0.0031734f, 0.00268984f, 0.00239296f, 0.00281911f, 0.00283129f, 0.00311002f, 0.00255403f, 0.0025107f, 0.00337233f, 0.00263854f, 0.00279132f, 0.00219815f, 0.00280418f, 0.00258713f], rhs_zero_points=[124, 107, 95, 91, 95, 90, 118, 109, 92, 120, 71, 107, 114, 141, 97, 138, 109, 105, 99, 76, 109, 87, 119, 85, 95, 114, 103, 106, 112, 132, 89, 117, 100, 102, 73, 107, 129, 79, 86, 130, 103, 118, 91, 119, 94, 92, 108, 98, 82, 94, 94, 101, 105, 104, 78, 113, 80, 105, 115, 86, 97, 86, 91, 98, 115, 87, 96, 108, 81, 122, 101, 82, 89, 85, 122, 104, 114, 116, 112, 108, 126, 128, 96, 124, 97, 99, 120, 96, 113, 115, 109, 113, 75, 100, 101, 107, 108, 95, 102, 104, 101, 93, 102, 111, 99, 98, 108, 134, 85, 75, 94, 92, 95, 89, 105, 105, 107, 84, 113, 104, 89, 102, 97, 107, 109, 116, 112, 113], scales=[0.0145112f], zero_points=[142]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %239 = %238(%202, meta[relay.Constant][267] /* ty=Tensor[(128, 256, 1, 1), uint8] */, meta[relay.Constant][268] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0139003f], lhs_zero_points=[20], rhs_scales=[0.00234934f, 0.00339206f, 0.00304145f, 0.00325461f, 0.0025349f, 0.00303498f, 0.00276397f, 0.00265315f, 0.00215241f, 0.00386858f, 0.00394406f, 0.00276495f, 0.00232161f, 0.00369533f, 0.00287938f, 0.00311068f, 0.00268826f, 0.00244515f, 0.00271699f, 0.00307547f, 0.00288652f, 0.00316897f, 0.00316663f, 0.00320029f, 0.00326754f, 0.00260407f, 0.00268118f, 0.00262101f, 0.00239473f, 0.0024461f, 0.00298923f, 0.0025039f, 0.00240416f, 0.00245708f, 0.00393423f, 0.00253705f, 0.00262646f, 0.00408314f, 0.00287439f, 0.00218766f, 0.00274802f, 0.00288496f, 0.00284065f, 0.00287045f, 0.00336229f, 0.00217588f, 0.00294945f, 0.00410961f, 0.00276866f, 0.00297264f, 0.00359189f, 0.00279081f, 0.00288496f, 0.00244791f, 0.00433662f, 0.00240266f, 0.00266512f, 0.00342312f, 0.00337364f, 0.00273102f, 0.00288717f, 0.00292137f, 0.00372187f, 0.00277355f, 0.00251834f, 0.00276155f, 0.0032334f, 0.00296711f, 0.00290418f, 0.00265019f, 0.00251877f, 0.00372278f, 0.00262305f, 0.00336757f, 0.00248438f, 0.00308436f, 0.00323726f, 0.00327458f, 0.00303289f, 0.00238727f, 0.00258772f, 0.00263738f, 0.00297598f, 0.00272125f, 0.00278407f, 0.00292196f, 0.00268271f, 0.00362678f, 0.00300195f, 0.00314748f, 0.00230912f, 0.002791f, 0.00281047f, 0.00310652f, 0.00315107f, 0.00259462f, 0.00215692f, 0.00221871f, 0.00261223f, 0.00272745f, 0.00282269f, 0.00267162f, 0.00270093f, 0.00250287f, 0.0027926f, 0.00228145f, 0.00317097f, 0.00281669f, 0.00294786f, 0.00302727f, 0.00302804f, 0.00310248f, 0.00275376f, 0.00407608f, 0.0031734f, 0.00268984f, 0.00239296f, 0.00281911f, 0.00283129f, 0.00311002f, 0.00255403f, 0.0025107f, 0.00337233f, 0.00263854f, 0.00279132f, 0.00219815f, 0.00280418f, 0.00258713f], rhs_zero_points=[124, 107, 95, 91, 95, 90, 118, 109, 92, 120, 71, 107, 114, 141, 97, 138, 109, 105, 99, 76, 109, 87, 119, 85, 95, 114, 103, 106, 112, 132, 89, 117, 100, 102, 73, 107, 129, 79, 86, 130, 103, 118, 91, 119, 94, 92, 108, 98, 82, 94, 94, 101, 105, 104, 78, 113, 80, 105, 115, 86, 97, 86, 91, 98, 115, 87, 96, 108, 81, 122, 101, 82, 89, 85, 122, 104, 114, 116, 112, 108, 126, 128, 96, 124, 97, 99, 120, 96, 113, 115, 109, 113, 75, 100, 101, 107, 108, 95, 102, 104, 101, 93, 102, 111, 99, 98, 108, 134, 85, 75, 94, 92, 95, 89, 105, 105, 107, 84, 113, 104, 89, 102, 97, 107, 109, 116, 112, 113], scales=[0.0145112f], zero_points=[142], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %240 = dl.dequantize(%239, input_scales=[0.0145112f], input_zero_points=[142]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %241 = sigmoid(%240) /* /model.8/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %242 = add(%224, %236) /* /model.8/m.0/m/m.1/Add_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %243 = multiply(%240, %241) /* /model.8/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %244 = (%242, %243);
  %245 = concatenate(%244, axis=1) /* /model.8/m.0/Concat_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %246 = dl.quantize(%245, output_scales=[0.0308016f], output_zero_points=[27]) /* fake_quant_87 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %247 = fn (%FunctionVar_58_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_58_1: Tensor[(256, 256, 1, 1), uint8], %FunctionVar_58_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c1a588)) -> Tensor[(1, 256, 20, 20), uint8] {
    %199 = (%FunctionVar_58_0, %FunctionVar_58_1, %FunctionVar_58_2, meta[relay.Constant][222] /* ty=Tensor[(256), float32] */, meta[relay.Constant][223] /* ty=Tensor[(256), int32] */, meta[relay.Constant][224] /* ty=Tensor[(256), int32] */, meta[relay.Constant][225] /* ty=Tensor[(256), int32] */, meta[relay.Constant][226] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%199, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0308016f], lhs_zero_points=[27], rhs_scales=[0.00157944f, 0.00144775f, 0.0018852f, 0.00153891f, 0.0013368f, 0.00173689f, 0.0018029f, 0.00137582f, 0.00145406f, 0.00157969f, 0.00159962f, 0.00136918f, 0.00137382f, 0.00160559f, 0.00154533f, 0.00154204f, 0.00156099f, 0.00110974f, 0.00216768f, 0.0013674f, 0.00174402f, 0.0012764f, 0.00109274f, 0.00205382f, 0.00185135f, 0.00119122f, 0.00143995f, 0.00178804f, 0.00142531f, 0.00160006f, 0.0013703f, 0.0011676f, 0.00132479f, 0.00154077f, 0.0014591f, 0.00183483f, 0.00184776f, 0.00173769f, 0.00135135f, 0.00189452f, 0.00262507f, 0.00115233f, 0.0017576f, 0.00210436f, 0.00142039f, 0.00343377f, 0.00123696f, 0.00139806f, 0.00181112f, 0.00161955f, 0.00256947f, 0.00117192f, 0.00135684f, 0.00126976f, 0.00222622f, 0.00131069f, 0.00143251f, 0.00170708f, 0.00169612f, 0.00140519f, 0.00147679f, 0.00155193f, 0.00144589f, 0.00346109f, 0.00168262f, 0.00159282f, 0.0016904f, 0.00127832f, 0.00147563f, 0.00250575f, 0.00154404f, 0.00186082f, 0.0021745f, 0.00342591f, 0.00166205f, 0.00176973f, 0.00096101f, 0.00114139f, 0.00130144f, 0.00151301f, 0.00120433f, 0.00136624f, 0.00167722f, 0.00159481f, 0.00144364f, 0.00296459f, 0.00146816f, 0.00160993f, 0.00171007f, 0.00158765f, 0.00206206f, 0.00133424f, 0.00122127f, 0.00140008f, 0.00141554f, 0.00154669f, 0.00160908f, 0.00293633f, 0.00131766f, 0.00211479f, 0.00125206f, 0.00148931f, 0.00190058f, 0.00142472f, 0.00133887f, 0.00105958f, 0.00200098f, 0.0015158f, 0.00349582f, 0.00124039f, 0.00161105f, 0.00164402f, 0.00124584f, 0.00150426f, 0.00181524f, 0.00191286f, 0.00128675f, 0.00161009f, 0.00132364f, 0.001909f, 0.00160647f, 0.00151533f, 0.00146749f, 0.00135549f, 0.00133686f, 0.0013531f, 0.00145216f, 0.00153566f, 0.00146161f, 0.00204329f, 0.00174463f, 0.00136947f, 0.00140378f, 0.00145691f, 0.00182579f, 0.00211111f, 0.00126815f, 0.00139129f, 0.00185627f, 0.00156493f, 0.00202499f, 0.00201222f, 0.00367447f, 0.00176131f, 0.00126316f, 0.00147422f, 0.00128209f, 0.00123213f, 0.00155593f, 0.0015745f, 0.00149955f, 0.00193101f, 0.00146151f, 0.00166169f, 0.00208045f, 0.00108915f, 0.00175293f, 0.00127681f, 0.00127104f, 0.00160345f, 0.00188599f, 0.00158655f, 0.00165243f, 0.00161626f, 0.00158279f, 0.001706f, 0.00147971f, 0.00145073f, 0.00101055f, 0.00112438f, 0.00139613f, 0.00123433f, 0.00169409f, 0.00160129f, 0.00118157f, 0.00194001f, 0.00146129f, 0.00190679f, 0.00150685f, 0.00139489f, 0.00149038f, 0.00145926f, 0.00150059f, 0.0013513f, 0.00161441f, 0.00169997f, 0.00171993f, 0.00126202f, 0.00147911f, 0.00250881f, 0.0017501f, 0.00171365f, 0.00164618f, 0.00177327f, 0.00277544f, 0.00193771f, 0.00127184f, 0.00255352f, 0.00147894f, 0.00153172f, 0.00128389f, 0.00215029f, 0.00177415f, 0.0017017f, 0.00185576f, 0.00220995f, 0.00191587f, 0.00174184f, 0.00165519f, 0.00124843f, 0.00112806f, 0.00151122f, 0.00147699f, 0.00192593f, 0.00159333f, 0.00135033f, 0.00130988f, 0.00170347f, 0.00136964f, 0.00211053f, 0.00106408f, 0.00177592f, 0.0011564f, 0.00156614f, 0.00107625f, 0.00186295f, 0.00141624f, 0.00128356f, 0.00137841f, 0.00211166f, 0.00255345f, 0.00163355f, 0.00141579f, 0.00130566f, 0.00148864f, 0.00173328f, 0.00158415f, 0.00136947f, 0.00180131f, 0.00181584f, 0.00176287f, 0.0016062f, 0.0019422f, 0.00144577f, 0.00132794f, 0.0012621f, 0.00133842f, 0.00359026f, 0.00145057f, 0.00163306f, 0.00120741f, 0.00212071f, 0.00105426f, 0.00189094f, 0.00136167f, 0.00163942f], rhs_zero_points=[147, 127, 104, 159, 145, 104, 151, 129, 160, 156, 106, 131, 147, 153, 170, 137, 173, 127, 69, 129, 116, 135, 136, 166, 112, 118, 93, 132, 106, 159, 101, 140, 140, 126, 136, 107, 90, 92, 107, 120, 148, 115, 98, 170, 145, 172, 122, 128, 141, 140, 95, 133, 146, 117, 128, 148, 117, 141, 152, 143, 115, 105, 118, 130, 146, 174, 113, 106, 133, 154, 152, 95, 152, 60, 122, 123, 142, 133, 153, 103, 141, 141, 115, 96, 134, 125, 155, 107, 152, 137, 170, 137, 147, 143, 129, 119, 126, 95, 128, 93, 138, 158, 170, 127, 115, 141, 119, 152, 125, 134, 125, 131, 140, 121, 111, 120, 127, 130, 139, 107, 152, 123, 109, 130, 118, 141, 132, 158, 153, 113, 128, 150, 140, 135, 126, 154, 156, 125, 122, 152, 149, 118, 169, 112, 144, 132, 147, 155, 133, 159, 137, 103, 110, 146, 173, 147, 85, 166, 123, 92, 131, 126, 103, 130, 156, 110, 127, 135, 112, 134, 145, 131, 147, 99, 130, 131, 109, 115, 134, 122, 132, 126, 125, 147, 99, 125, 106, 147, 104, 126, 116, 117, 130, 156, 70, 152, 146, 121, 129, 142, 146, 124, 143, 139, 130, 104, 173, 125, 143, 141, 148, 139, 176, 160, 162, 152, 157, 148, 119, 126, 123, 145, 166, 100, 138, 117, 123, 122, 110, 176, 87, 107, 158, 132, 149, 107, 179, 138, 128, 133, 93, 136, 90, 130, 133, 147, 124, 119, 128, 127, 136, 92, 130, 148, 162, 174], scales=[0.0286331f], zero_points=[107]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %248 = %247(%246, meta[relay.Constant][269] /* ty=Tensor[(256, 256, 1, 1), uint8] */, meta[relay.Constant][270] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0308016f], lhs_zero_points=[27], rhs_scales=[0.00157944f, 0.00144775f, 0.0018852f, 0.00153891f, 0.0013368f, 0.00173689f, 0.0018029f, 0.00137582f, 0.00145406f, 0.00157969f, 0.00159962f, 0.00136918f, 0.00137382f, 0.00160559f, 0.00154533f, 0.00154204f, 0.00156099f, 0.00110974f, 0.00216768f, 0.0013674f, 0.00174402f, 0.0012764f, 0.00109274f, 0.00205382f, 0.00185135f, 0.00119122f, 0.00143995f, 0.00178804f, 0.00142531f, 0.00160006f, 0.0013703f, 0.0011676f, 0.00132479f, 0.00154077f, 0.0014591f, 0.00183483f, 0.00184776f, 0.00173769f, 0.00135135f, 0.00189452f, 0.00262507f, 0.00115233f, 0.0017576f, 0.00210436f, 0.00142039f, 0.00343377f, 0.00123696f, 0.00139806f, 0.00181112f, 0.00161955f, 0.00256947f, 0.00117192f, 0.00135684f, 0.00126976f, 0.00222622f, 0.00131069f, 0.00143251f, 0.00170708f, 0.00169612f, 0.00140519f, 0.00147679f, 0.00155193f, 0.00144589f, 0.00346109f, 0.00168262f, 0.00159282f, 0.0016904f, 0.00127832f, 0.00147563f, 0.00250575f, 0.00154404f, 0.00186082f, 0.0021745f, 0.00342591f, 0.00166205f, 0.00176973f, 0.00096101f, 0.00114139f, 0.00130144f, 0.00151301f, 0.00120433f, 0.00136624f, 0.00167722f, 0.00159481f, 0.00144364f, 0.00296459f, 0.00146816f, 0.00160993f, 0.00171007f, 0.00158765f, 0.00206206f, 0.00133424f, 0.00122127f, 0.00140008f, 0.00141554f, 0.00154669f, 0.00160908f, 0.00293633f, 0.00131766f, 0.00211479f, 0.00125206f, 0.00148931f, 0.00190058f, 0.00142472f, 0.00133887f, 0.00105958f, 0.00200098f, 0.0015158f, 0.00349582f, 0.00124039f, 0.00161105f, 0.00164402f, 0.00124584f, 0.00150426f, 0.00181524f, 0.00191286f, 0.00128675f, 0.00161009f, 0.00132364f, 0.001909f, 0.00160647f, 0.00151533f, 0.00146749f, 0.00135549f, 0.00133686f, 0.0013531f, 0.00145216f, 0.00153566f, 0.00146161f, 0.00204329f, 0.00174463f, 0.00136947f, 0.00140378f, 0.00145691f, 0.00182579f, 0.00211111f, 0.00126815f, 0.00139129f, 0.00185627f, 0.00156493f, 0.00202499f, 0.00201222f, 0.00367447f, 0.00176131f, 0.00126316f, 0.00147422f, 0.00128209f, 0.00123213f, 0.00155593f, 0.0015745f, 0.00149955f, 0.00193101f, 0.00146151f, 0.00166169f, 0.00208045f, 0.00108915f, 0.00175293f, 0.00127681f, 0.00127104f, 0.00160345f, 0.00188599f, 0.00158655f, 0.00165243f, 0.00161626f, 0.00158279f, 0.001706f, 0.00147971f, 0.00145073f, 0.00101055f, 0.00112438f, 0.00139613f, 0.00123433f, 0.00169409f, 0.00160129f, 0.00118157f, 0.00194001f, 0.00146129f, 0.00190679f, 0.00150685f, 0.00139489f, 0.00149038f, 0.00145926f, 0.00150059f, 0.0013513f, 0.00161441f, 0.00169997f, 0.00171993f, 0.00126202f, 0.00147911f, 0.00250881f, 0.0017501f, 0.00171365f, 0.00164618f, 0.00177327f, 0.00277544f, 0.00193771f, 0.00127184f, 0.00255352f, 0.00147894f, 0.00153172f, 0.00128389f, 0.00215029f, 0.00177415f, 0.0017017f, 0.00185576f, 0.00220995f, 0.00191587f, 0.00174184f, 0.00165519f, 0.00124843f, 0.00112806f, 0.00151122f, 0.00147699f, 0.00192593f, 0.00159333f, 0.00135033f, 0.00130988f, 0.00170347f, 0.00136964f, 0.00211053f, 0.00106408f, 0.00177592f, 0.0011564f, 0.00156614f, 0.00107625f, 0.00186295f, 0.00141624f, 0.00128356f, 0.00137841f, 0.00211166f, 0.00255345f, 0.00163355f, 0.00141579f, 0.00130566f, 0.00148864f, 0.00173328f, 0.00158415f, 0.00136947f, 0.00180131f, 0.00181584f, 0.00176287f, 0.0016062f, 0.0019422f, 0.00144577f, 0.00132794f, 0.0012621f, 0.00133842f, 0.00359026f, 0.00145057f, 0.00163306f, 0.00120741f, 0.00212071f, 0.00105426f, 0.00189094f, 0.00136167f, 0.00163942f], rhs_zero_points=[147, 127, 104, 159, 145, 104, 151, 129, 160, 156, 106, 131, 147, 153, 170, 137, 173, 127, 69, 129, 116, 135, 136, 166, 112, 118, 93, 132, 106, 159, 101, 140, 140, 126, 136, 107, 90, 92, 107, 120, 148, 115, 98, 170, 145, 172, 122, 128, 141, 140, 95, 133, 146, 117, 128, 148, 117, 141, 152, 143, 115, 105, 118, 130, 146, 174, 113, 106, 133, 154, 152, 95, 152, 60, 122, 123, 142, 133, 153, 103, 141, 141, 115, 96, 134, 125, 155, 107, 152, 137, 170, 137, 147, 143, 129, 119, 126, 95, 128, 93, 138, 158, 170, 127, 115, 141, 119, 152, 125, 134, 125, 131, 140, 121, 111, 120, 127, 130, 139, 107, 152, 123, 109, 130, 118, 141, 132, 158, 153, 113, 128, 150, 140, 135, 126, 154, 156, 125, 122, 152, 149, 118, 169, 112, 144, 132, 147, 155, 133, 159, 137, 103, 110, 146, 173, 147, 85, 166, 123, 92, 131, 126, 103, 130, 156, 110, 127, 135, 112, 134, 145, 131, 147, 99, 130, 131, 109, 115, 134, 122, 132, 126, 125, 147, 99, 125, 106, 147, 104, 126, 116, 117, 130, 156, 70, 152, 146, 121, 129, 142, 146, 124, 143, 139, 130, 104, 173, 125, 143, 141, 148, 139, 176, 160, 162, 152, 157, 148, 119, 126, 123, 145, 166, 100, 138, 117, 123, 122, 110, 176, 87, 107, 158, 132, 149, 107, 179, 138, 128, 133, 93, 136, 90, 130, 133, 147, 124, 119, 128, 127, 136, 92, 130, 148, 162, 174], scales=[0.0286331f], zero_points=[107], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %249 = dl.dequantize(%248, input_scales=[0.0286331f], input_zero_points=[107]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %250 = sigmoid(%249) /* /model.8/m.0/cv3/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %251 = %198.0;
  %252 = multiply(%249, %250) /* /model.8/m.0/cv3/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %253 = (%251, %201, %252);
  %254 = concatenate(%253, axis=1) /* /model.8/Concat_output_0 */ /* ty=Tensor[(1, 768, 20, 20), float32] */;
  %255 = dl.quantize(%254, output_scales=[0.0199472f], output_zero_points=[14]) /* fake_quant_90 */ /* ty=Tensor[(1, 768, 20, 20), uint8] */;
  %256 = fn (%FunctionVar_57_0: Tensor[(1, 768, 20, 20), uint8], %FunctionVar_57_1: Tensor[(512, 768, 1, 1), uint8], %FunctionVar_57_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adcde0f8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %12 = (%FunctionVar_57_0, %FunctionVar_57_1, %FunctionVar_57_2, meta[relay.Constant][56] /* ty=Tensor[(512), float32] */, meta[relay.Constant][57] /* ty=Tensor[(512), int32] */, meta[relay.Constant][58] /* ty=Tensor[(512), int32] */, meta[relay.Constant][59] /* ty=Tensor[(512), int32] */, meta[relay.Constant][60] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%12, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0199472f], lhs_zero_points=[14], rhs_scales=[0.00248452f, 0.00171433f, 0.00137422f, 0.00178349f, 0.00129982f, 0.00172202f, 0.00148365f, 0.00214842f, 0.00124841f, 0.000808321f, 0.00171511f, 0.00211217f, 0.00156313f, 0.00147255f, 0.00124879f, 0.00182882f, 0.00189864f, 0.00163344f, 0.00155467f, 0.00197077f, 0.0016668f, 0.00159141f, 0.00145682f, 0.00142736f, 0.00204952f, 0.00117759f, 0.00173411f, 0.00145175f, 0.00142164f, 0.00285167f, 0.00177689f, 0.00148391f, 0.00135316f, 0.00224912f, 0.00157624f, 0.00144715f, 0.00169487f, 0.00181504f, 0.00152513f, 0.00140654f, 0.00201149f, 0.0014177f, 0.00179718f, 0.00141218f, 0.00119688f, 0.00114187f, 0.00172856f, 0.00146946f, 0.00167995f, 0.00141983f, 0.00163286f, 0.00148185f, 0.00143557f, 0.00182648f, 0.00143521f, 0.00119346f, 0.00144039f, 0.00172042f, 0.00193609f, 0.00159587f, 0.00125934f, 0.00151798f, 0.00159857f, 0.00175933f, 0.00137784f, 0.00137849f, 0.00154235f, 0.00191952f, 0.00158522f, 0.00105126f, 0.00141775f, 0.00177965f, 0.00171366f, 0.00181619f, 0.00171227f, 0.00175174f, 0.00105448f, 0.00152841f, 0.0016316f, 0.00148382f, 0.00432388f, 0.00164311f, 0.00175416f, 0.00143998f, 0.00189553f, 0.00154482f, 0.00196038f, 0.00170602f, 0.00162765f, 0.00146407f, 0.00143536f, 0.00153347f, 0.00171817f, 0.00183836f, 0.00136132f, 0.0014846f, 0.00111819f, 0.00129418f, 0.00139626f, 0.00234711f, 0.00177483f, 0.00170742f, 0.00146241f, 0.00192008f, 0.00162062f, 0.00173994f, 0.00139142f, 0.00122802f, 0.00146657f, 0.00144797f, 0.00148265f, 0.0017544f, 0.0016688f, 0.00196857f, 0.00124229f, 0.00232435f, 0.00206811f, 0.0013644f, 0.0023927f, 0.00178921f, 0.00167024f, 0.0013271f, 0.00143683f, 0.00167981f, 0.00451153f, 0.00151564f, 0.00206764f, 0.00172265f, 0.00122431f, 0.00145383f, 0.00163465f, 0.00170001f, 0.00143599f, 0.00198558f, 0.00237961f, 0.00148073f, 0.0022997f, 0.00137945f, 0.00161265f, 0.00155339f, 0.00152968f, 0.00171642f, 0.00129023f, 0.00166728f, 0.00114777f, 0.00207572f, 0.00133781f, 0.00204124f, 0.00190241f, 0.00155915f, 0.0017863f, 0.00165593f, 0.00152322f, 0.00240172f, 0.00132996f, 0.00164451f, 0.0018613f, 0.00225665f, 0.00134674f, 0.00179418f, 0.00167509f, 0.00216444f, 0.00157862f, 0.0015633f, 0.00158591f, 0.00126607f, 0.00124441f, 0.00134147f, 0.00157694f, 0.00114543f, 0.00163766f, 0.00208957f, 0.0017935f, 0.00151654f, 0.0017281f, 0.00110307f, 0.00168276f, 0.00124719f, 0.00117812f, 0.0015394f, 0.00143698f, 0.00283524f, 0.00141606f, 0.00176519f, 0.00158792f, 0.00167408f, 0.00155022f, 0.00201839f, 0.00135915f, 0.00157035f, 0.00169605f, 0.00147019f, 0.00192989f, 0.00186866f, 0.00159412f, 0.0013154f, 0.00109035f, 0.00120634f, 0.00181381f, 0.00172613f, 0.00131152f, 0.00152178f, 0.00166828f, 0.00148804f, 0.00141866f, 0.00149597f, 0.00168928f, 0.0014731f, 0.0013262f, 0.00168179f, 0.00180246f, 0.0013391f, 0.00158084f, 0.00176521f, 0.0010876f, 0.00154459f, 0.00122365f, 0.00104604f, 0.00146541f, 0.00508437f, 0.00199784f, 0.00163329f, 0.00157317f, 0.0013113f, 0.00233994f, 0.00174061f, 0.00156836f, 0.00183846f, 0.00257421f, 0.00162121f, 0.00163067f, 0.00178987f, 0.00158788f, 0.00150858f, 0.00195466f, 0.00144995f, 0.00154633f, 0.00125732f, 0.00316664f, 0.00187864f, 0.00125661f, 0.00112194f, 0.000999164f, 0.00186106f, 0.00134891f, 0.00190942f, 0.00144455f, 0.00123746f, 0.00131614f, 0.00180645f, 0.00165829f, 0.00183889f, 0.00154856f, 0.00206585f, 0.00165998f, 0.00145918f, 0.00134183f, 0.0016394f, 0.00149903f, 0.00181906f, 0.00191876f, 0.0012813f, 0.00180768f, 0.00109067f, 0.00157126f, 0.00104418f, 0.00183146f, 0.0026048f, 0.00189505f, 0.0016156f, 0.0025897f, 0.00164805f, 0.00160339f, 0.00145198f, 0.00217941f, 0.00125165f, 0.00124095f, 0.00108907f, 0.00185333f, 0.00185879f, 0.00177796f, 0.00198152f, 0.00238453f, 0.00120699f, 0.00111377f, 0.00303597f, 0.00133332f, 0.00170723f, 0.00190093f, 0.00155194f, 0.00199807f, 0.00137449f, 0.0013795f, 0.00337492f, 0.00145396f, 0.00137959f, 0.00176422f, 0.00131964f, 0.00139682f, 0.00180307f, 0.00169087f, 0.00154048f, 0.00162256f, 0.00135161f, 0.00131776f, 0.00194062f, 0.00173868f, 0.00219648f, 0.00146062f, 0.00155284f, 0.00213652f, 0.00159641f, 0.0012194f, 0.00132577f, 0.0014245f, 0.00142837f, 0.00170522f, 0.00145983f, 0.00139841f, 0.00153902f, 0.00152999f, 0.00218822f, 0.00232527f, 0.00166742f, 0.00148388f, 0.00116919f, 0.00148612f, 0.00237393f, 0.00181238f, 0.0018232f, 0.00201714f, 0.00143272f, 0.0015612f, 0.00148448f, 0.00158031f, 0.00148867f, 0.00178112f, 0.00146007f, 0.00182602f, 0.0012676f, 0.00163049f, 0.0015214f, 0.00125574f, 0.0014772f, 0.00171845f, 0.00200564f, 0.00154675f, 0.00335967f, 0.00197382f, 0.00122046f, 0.00150386f, 0.00143339f, 0.00150897f, 0.00136122f, 0.00144057f, 0.00205926f, 0.00183882f, 0.00138736f, 0.00536776f, 0.00178561f, 0.00147467f, 0.00167793f, 0.00199474f, 0.00356887f, 0.00160778f, 0.00219924f, 0.00196321f, 0.00173728f, 0.00124208f, 0.00137309f, 0.00168427f, 0.0017868f, 0.00161884f, 0.00190436f, 0.00157206f, 0.00165932f, 0.00147053f, 0.00124494f, 0.00143596f, 0.00150274f, 0.00273985f, 0.0019355f, 0.00170548f, 0.00185223f, 0.00164321f, 0.00111438f, 0.00161566f, 0.00170375f, 0.00129989f, 0.0020014f, 0.00163296f, 0.00169461f, 0.00145788f, 0.00113388f, 0.00214536f, 0.00134593f, 0.00249433f, 0.00167407f, 0.00183348f, 0.00191828f, 0.00173114f, 0.00177514f, 0.00165749f, 0.00166488f, 0.00169665f, 0.00148935f, 0.00147203f, 0.00140889f, 0.00155217f, 0.00166351f, 0.00148416f, 0.00185019f, 0.00136823f, 0.00152641f, 0.00154376f, 0.00121818f, 0.00141332f, 0.00156733f, 0.00149955f, 0.00298077f, 0.00161704f, 0.0018703f, 0.00173392f, 0.00123831f, 0.001487f, 0.00183572f, 0.00152623f, 0.00140349f, 0.00127542f, 0.0014897f, 0.0015942f, 0.00167782f, 0.00139591f, 0.00120477f, 0.00149846f, 0.00165501f, 0.00118492f, 0.00145583f, 0.0012547f, 0.00196092f, 0.00154745f, 0.00135648f, 0.00148601f, 0.00138359f, 0.00158638f, 0.00177328f, 0.00201064f, 0.00150178f, 0.00126074f, 0.00147627f, 0.0014473f, 0.00161361f, 0.00124906f, 0.00169752f, 0.0015847f, 0.00204739f, 0.00143324f, 0.00152401f, 0.00152934f, 0.00144498f, 0.00199222f, 0.00241244f, 0.00197121f, 0.00141685f, 0.00146132f, 0.00123172f, 0.00173198f, 0.00122155f, 0.00160766f, 0.00142111f, 0.00119557f, 0.00126241f, 0.00253845f, 0.00178032f, 0.0016876f, 0.00144684f, 0.00156071f, 0.00167582f, 0.00119796f, 0.00379628f, 0.00152998f, 0.00153901f, 0.00126961f, 0.00187337f, 0.00140635f, 0.00169339f, 0.00183689f, 0.00222636f, 0.00125331f, 0.00199315f, 0.00140489f, 0.00120048f, 0.00135971f, 0.00259134f, 0.00179648f, 0.00140477f, 0.00118688f, 0.00160699f, 0.00142901f, 0.00176488f, 0.00177657f, 0.00155443f, 0.00165853f, 0.00109226f, 0.00149631f, 0.00156513f, 0.00170802f, 0.00146777f, 0.00106674f, 0.00166748f, 0.00127908f, 0.00130038f], rhs_zero_points=[124, 114, 117, 109, 143, 112, 112, 148, 152, 138, 131, 182, 112, 129, 146, 121, 140, 115, 134, 125, 130, 112, 124, 142, 118, 120, 117, 122, 111, 121, 115, 125, 115, 112, 121, 111, 110, 114, 149, 123, 134, 120, 149, 117, 123, 132, 105, 116, 126, 121, 155, 113, 131, 116, 125, 131, 123, 119, 124, 124, 151, 141, 143, 105, 125, 133, 142, 152, 117, 112, 80, 114, 122, 113, 139, 125, 126, 118, 125, 113, 136, 113, 133, 122, 131, 109, 97, 116, 117, 138, 130, 141, 96, 133, 128, 121, 128, 104, 132, 110, 119, 109, 133, 103, 143, 126, 122, 130, 133, 134, 143, 119, 114, 116, 143, 132, 110, 102, 116, 114, 140, 122, 135, 142, 86, 117, 113, 133, 139, 144, 105, 131, 142, 199, 110, 132, 125, 160, 124, 117, 139, 137, 126, 87, 141, 125, 112, 107, 108, 186, 130, 115, 123, 107, 119, 122, 121, 127, 138, 114, 165, 129, 111, 106, 121, 122, 137, 117, 128, 133, 117, 93, 101, 149, 126, 118, 118, 136, 117, 127, 134, 87, 111, 115, 109, 124, 120, 90, 126, 127, 120, 127, 109, 126, 113, 127, 144, 130, 136, 127, 139, 111, 136, 132, 137, 145, 118, 118, 140, 121, 128, 133, 129, 162, 145, 119, 137, 129, 127, 67, 111, 130, 117, 132, 172, 121, 126, 141, 74, 137, 98, 93, 139, 116, 117, 126, 98, 114, 98, 134, 157, 126, 137, 119, 132, 122, 116, 135, 139, 113, 112, 134, 122, 109, 147, 126, 134, 128, 146, 117, 147, 118, 136, 123, 166, 128, 200, 129, 120, 128, 166, 123, 130, 131, 101, 130, 128, 139, 152, 137, 146, 129, 149, 166, 144, 72, 124, 113, 120, 132, 104, 141, 130, 209, 125, 118, 117, 125, 129, 138, 114, 114, 127, 135, 114, 120, 128, 135, 137, 100, 106, 127, 124, 108, 121, 141, 119, 156, 139, 111, 133, 179, 113, 118, 132, 130, 108, 88, 121, 119, 105, 115, 168, 128, 141, 110, 124, 92, 126, 123, 118, 118, 147, 113, 134, 131, 137, 209, 138, 142, 142, 123, 120, 131, 138, 113, 110, 130, 128, 115, 123, 142, 118, 88, 117, 152, 92, 127, 122, 120, 103, 141, 135, 128, 145, 126, 140, 130, 127, 105, 98, 117, 174, 123, 128, 136, 113, 104, 135, 143, 129, 132, 128, 149, 107, 127, 124, 144, 110, 119, 154, 115, 118, 120, 120, 117, 126, 133, 122, 138, 127, 151, 115, 133, 148, 133, 140, 132, 127, 152, 122, 141, 119, 139, 137, 123, 110, 163, 148, 132, 133, 107, 144, 111, 148, 126, 145, 126, 112, 102, 138, 125, 143, 131, 125, 174, 123, 115, 119, 141, 141, 134, 127, 127, 90, 113, 120, 131, 133, 127, 115, 107, 122, 102, 159, 149, 125, 130, 135, 124, 143, 133, 177, 146, 112, 141, 132, 104, 141, 145, 122, 129, 157, 109, 143, 140, 146, 106, 114, 116, 135, 140, 99, 111, 128, 133, 124, 137, 146, 105, 101, 115, 144, 128, 131, 134, 131, 129, 141, 123, 149, 119], scales=[0.0369442f], zero_points=[106]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %257 = %256(%255, meta[relay.Constant][271] /* ty=Tensor[(512, 768, 1, 1), uint8] */, meta[relay.Constant][272] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0199472f], lhs_zero_points=[14], rhs_scales=[0.00248452f, 0.00171433f, 0.00137422f, 0.00178349f, 0.00129982f, 0.00172202f, 0.00148365f, 0.00214842f, 0.00124841f, 0.000808321f, 0.00171511f, 0.00211217f, 0.00156313f, 0.00147255f, 0.00124879f, 0.00182882f, 0.00189864f, 0.00163344f, 0.00155467f, 0.00197077f, 0.0016668f, 0.00159141f, 0.00145682f, 0.00142736f, 0.00204952f, 0.00117759f, 0.00173411f, 0.00145175f, 0.00142164f, 0.00285167f, 0.00177689f, 0.00148391f, 0.00135316f, 0.00224912f, 0.00157624f, 0.00144715f, 0.00169487f, 0.00181504f, 0.00152513f, 0.00140654f, 0.00201149f, 0.0014177f, 0.00179718f, 0.00141218f, 0.00119688f, 0.00114187f, 0.00172856f, 0.00146946f, 0.00167995f, 0.00141983f, 0.00163286f, 0.00148185f, 0.00143557f, 0.00182648f, 0.00143521f, 0.00119346f, 0.00144039f, 0.00172042f, 0.00193609f, 0.00159587f, 0.00125934f, 0.00151798f, 0.00159857f, 0.00175933f, 0.00137784f, 0.00137849f, 0.00154235f, 0.00191952f, 0.00158522f, 0.00105126f, 0.00141775f, 0.00177965f, 0.00171366f, 0.00181619f, 0.00171227f, 0.00175174f, 0.00105448f, 0.00152841f, 0.0016316f, 0.00148382f, 0.00432388f, 0.00164311f, 0.00175416f, 0.00143998f, 0.00189553f, 0.00154482f, 0.00196038f, 0.00170602f, 0.00162765f, 0.00146407f, 0.00143536f, 0.00153347f, 0.00171817f, 0.00183836f, 0.00136132f, 0.0014846f, 0.00111819f, 0.00129418f, 0.00139626f, 0.00234711f, 0.00177483f, 0.00170742f, 0.00146241f, 0.00192008f, 0.00162062f, 0.00173994f, 0.00139142f, 0.00122802f, 0.00146657f, 0.00144797f, 0.00148265f, 0.0017544f, 0.0016688f, 0.00196857f, 0.00124229f, 0.00232435f, 0.00206811f, 0.0013644f, 0.0023927f, 0.00178921f, 0.00167024f, 0.0013271f, 0.00143683f, 0.00167981f, 0.00451153f, 0.00151564f, 0.00206764f, 0.00172265f, 0.00122431f, 0.00145383f, 0.00163465f, 0.00170001f, 0.00143599f, 0.00198558f, 0.00237961f, 0.00148073f, 0.0022997f, 0.00137945f, 0.00161265f, 0.00155339f, 0.00152968f, 0.00171642f, 0.00129023f, 0.00166728f, 0.00114777f, 0.00207572f, 0.00133781f, 0.00204124f, 0.00190241f, 0.00155915f, 0.0017863f, 0.00165593f, 0.00152322f, 0.00240172f, 0.00132996f, 0.00164451f, 0.0018613f, 0.00225665f, 0.00134674f, 0.00179418f, 0.00167509f, 0.00216444f, 0.00157862f, 0.0015633f, 0.00158591f, 0.00126607f, 0.00124441f, 0.00134147f, 0.00157694f, 0.00114543f, 0.00163766f, 0.00208957f, 0.0017935f, 0.00151654f, 0.0017281f, 0.00110307f, 0.00168276f, 0.00124719f, 0.00117812f, 0.0015394f, 0.00143698f, 0.00283524f, 0.00141606f, 0.00176519f, 0.00158792f, 0.00167408f, 0.00155022f, 0.00201839f, 0.00135915f, 0.00157035f, 0.00169605f, 0.00147019f, 0.00192989f, 0.00186866f, 0.00159412f, 0.0013154f, 0.00109035f, 0.00120634f, 0.00181381f, 0.00172613f, 0.00131152f, 0.00152178f, 0.00166828f, 0.00148804f, 0.00141866f, 0.00149597f, 0.00168928f, 0.0014731f, 0.0013262f, 0.00168179f, 0.00180246f, 0.0013391f, 0.00158084f, 0.00176521f, 0.0010876f, 0.00154459f, 0.00122365f, 0.00104604f, 0.00146541f, 0.00508437f, 0.00199784f, 0.00163329f, 0.00157317f, 0.0013113f, 0.00233994f, 0.00174061f, 0.00156836f, 0.00183846f, 0.00257421f, 0.00162121f, 0.00163067f, 0.00178987f, 0.00158788f, 0.00150858f, 0.00195466f, 0.00144995f, 0.00154633f, 0.00125732f, 0.00316664f, 0.00187864f, 0.00125661f, 0.00112194f, 0.000999164f, 0.00186106f, 0.00134891f, 0.00190942f, 0.00144455f, 0.00123746f, 0.00131614f, 0.00180645f, 0.00165829f, 0.00183889f, 0.00154856f, 0.00206585f, 0.00165998f, 0.00145918f, 0.00134183f, 0.0016394f, 0.00149903f, 0.00181906f, 0.00191876f, 0.0012813f, 0.00180768f, 0.00109067f, 0.00157126f, 0.00104418f, 0.00183146f, 0.0026048f, 0.00189505f, 0.0016156f, 0.0025897f, 0.00164805f, 0.00160339f, 0.00145198f, 0.00217941f, 0.00125165f, 0.00124095f, 0.00108907f, 0.00185333f, 0.00185879f, 0.00177796f, 0.00198152f, 0.00238453f, 0.00120699f, 0.00111377f, 0.00303597f, 0.00133332f, 0.00170723f, 0.00190093f, 0.00155194f, 0.00199807f, 0.00137449f, 0.0013795f, 0.00337492f, 0.00145396f, 0.00137959f, 0.00176422f, 0.00131964f, 0.00139682f, 0.00180307f, 0.00169087f, 0.00154048f, 0.00162256f, 0.00135161f, 0.00131776f, 0.00194062f, 0.00173868f, 0.00219648f, 0.00146062f, 0.00155284f, 0.00213652f, 0.00159641f, 0.0012194f, 0.00132577f, 0.0014245f, 0.00142837f, 0.00170522f, 0.00145983f, 0.00139841f, 0.00153902f, 0.00152999f, 0.00218822f, 0.00232527f, 0.00166742f, 0.00148388f, 0.00116919f, 0.00148612f, 0.00237393f, 0.00181238f, 0.0018232f, 0.00201714f, 0.00143272f, 0.0015612f, 0.00148448f, 0.00158031f, 0.00148867f, 0.00178112f, 0.00146007f, 0.00182602f, 0.0012676f, 0.00163049f, 0.0015214f, 0.00125574f, 0.0014772f, 0.00171845f, 0.00200564f, 0.00154675f, 0.00335967f, 0.00197382f, 0.00122046f, 0.00150386f, 0.00143339f, 0.00150897f, 0.00136122f, 0.00144057f, 0.00205926f, 0.00183882f, 0.00138736f, 0.00536776f, 0.00178561f, 0.00147467f, 0.00167793f, 0.00199474f, 0.00356887f, 0.00160778f, 0.00219924f, 0.00196321f, 0.00173728f, 0.00124208f, 0.00137309f, 0.00168427f, 0.0017868f, 0.00161884f, 0.00190436f, 0.00157206f, 0.00165932f, 0.00147053f, 0.00124494f, 0.00143596f, 0.00150274f, 0.00273985f, 0.0019355f, 0.00170548f, 0.00185223f, 0.00164321f, 0.00111438f, 0.00161566f, 0.00170375f, 0.00129989f, 0.0020014f, 0.00163296f, 0.00169461f, 0.00145788f, 0.00113388f, 0.00214536f, 0.00134593f, 0.00249433f, 0.00167407f, 0.00183348f, 0.00191828f, 0.00173114f, 0.00177514f, 0.00165749f, 0.00166488f, 0.00169665f, 0.00148935f, 0.00147203f, 0.00140889f, 0.00155217f, 0.00166351f, 0.00148416f, 0.00185019f, 0.00136823f, 0.00152641f, 0.00154376f, 0.00121818f, 0.00141332f, 0.00156733f, 0.00149955f, 0.00298077f, 0.00161704f, 0.0018703f, 0.00173392f, 0.00123831f, 0.001487f, 0.00183572f, 0.00152623f, 0.00140349f, 0.00127542f, 0.0014897f, 0.0015942f, 0.00167782f, 0.00139591f, 0.00120477f, 0.00149846f, 0.00165501f, 0.00118492f, 0.00145583f, 0.0012547f, 0.00196092f, 0.00154745f, 0.00135648f, 0.00148601f, 0.00138359f, 0.00158638f, 0.00177328f, 0.00201064f, 0.00150178f, 0.00126074f, 0.00147627f, 0.0014473f, 0.00161361f, 0.00124906f, 0.00169752f, 0.0015847f, 0.00204739f, 0.00143324f, 0.00152401f, 0.00152934f, 0.00144498f, 0.00199222f, 0.00241244f, 0.00197121f, 0.00141685f, 0.00146132f, 0.00123172f, 0.00173198f, 0.00122155f, 0.00160766f, 0.00142111f, 0.00119557f, 0.00126241f, 0.00253845f, 0.00178032f, 0.0016876f, 0.00144684f, 0.00156071f, 0.00167582f, 0.00119796f, 0.00379628f, 0.00152998f, 0.00153901f, 0.00126961f, 0.00187337f, 0.00140635f, 0.00169339f, 0.00183689f, 0.00222636f, 0.00125331f, 0.00199315f, 0.00140489f, 0.00120048f, 0.00135971f, 0.00259134f, 0.00179648f, 0.00140477f, 0.00118688f, 0.00160699f, 0.00142901f, 0.00176488f, 0.00177657f, 0.00155443f, 0.00165853f, 0.00109226f, 0.00149631f, 0.00156513f, 0.00170802f, 0.00146777f, 0.00106674f, 0.00166748f, 0.00127908f, 0.00130038f], rhs_zero_points=[124, 114, 117, 109, 143, 112, 112, 148, 152, 138, 131, 182, 112, 129, 146, 121, 140, 115, 134, 125, 130, 112, 124, 142, 118, 120, 117, 122, 111, 121, 115, 125, 115, 112, 121, 111, 110, 114, 149, 123, 134, 120, 149, 117, 123, 132, 105, 116, 126, 121, 155, 113, 131, 116, 125, 131, 123, 119, 124, 124, 151, 141, 143, 105, 125, 133, 142, 152, 117, 112, 80, 114, 122, 113, 139, 125, 126, 118, 125, 113, 136, 113, 133, 122, 131, 109, 97, 116, 117, 138, 130, 141, 96, 133, 128, 121, 128, 104, 132, 110, 119, 109, 133, 103, 143, 126, 122, 130, 133, 134, 143, 119, 114, 116, 143, 132, 110, 102, 116, 114, 140, 122, 135, 142, 86, 117, 113, 133, 139, 144, 105, 131, 142, 199, 110, 132, 125, 160, 124, 117, 139, 137, 126, 87, 141, 125, 112, 107, 108, 186, 130, 115, 123, 107, 119, 122, 121, 127, 138, 114, 165, 129, 111, 106, 121, 122, 137, 117, 128, 133, 117, 93, 101, 149, 126, 118, 118, 136, 117, 127, 134, 87, 111, 115, 109, 124, 120, 90, 126, 127, 120, 127, 109, 126, 113, 127, 144, 130, 136, 127, 139, 111, 136, 132, 137, 145, 118, 118, 140, 121, 128, 133, 129, 162, 145, 119, 137, 129, 127, 67, 111, 130, 117, 132, 172, 121, 126, 141, 74, 137, 98, 93, 139, 116, 117, 126, 98, 114, 98, 134, 157, 126, 137, 119, 132, 122, 116, 135, 139, 113, 112, 134, 122, 109, 147, 126, 134, 128, 146, 117, 147, 118, 136, 123, 166, 128, 200, 129, 120, 128, 166, 123, 130, 131, 101, 130, 128, 139, 152, 137, 146, 129, 149, 166, 144, 72, 124, 113, 120, 132, 104, 141, 130, 209, 125, 118, 117, 125, 129, 138, 114, 114, 127, 135, 114, 120, 128, 135, 137, 100, 106, 127, 124, 108, 121, 141, 119, 156, 139, 111, 133, 179, 113, 118, 132, 130, 108, 88, 121, 119, 105, 115, 168, 128, 141, 110, 124, 92, 126, 123, 118, 118, 147, 113, 134, 131, 137, 209, 138, 142, 142, 123, 120, 131, 138, 113, 110, 130, 128, 115, 123, 142, 118, 88, 117, 152, 92, 127, 122, 120, 103, 141, 135, 128, 145, 126, 140, 130, 127, 105, 98, 117, 174, 123, 128, 136, 113, 104, 135, 143, 129, 132, 128, 149, 107, 127, 124, 144, 110, 119, 154, 115, 118, 120, 120, 117, 126, 133, 122, 138, 127, 151, 115, 133, 148, 133, 140, 132, 127, 152, 122, 141, 119, 139, 137, 123, 110, 163, 148, 132, 133, 107, 144, 111, 148, 126, 145, 126, 112, 102, 138, 125, 143, 131, 125, 174, 123, 115, 119, 141, 141, 134, 127, 127, 90, 113, 120, 131, 133, 127, 115, 107, 122, 102, 159, 149, 125, 130, 135, 124, 143, 133, 177, 146, 112, 141, 132, 104, 141, 145, 122, 129, 157, 109, 143, 140, 146, 106, 114, 116, 135, 140, 99, 111, 128, 133, 124, 137, 146, 105, 101, 115, 144, 128, 131, 134, 131, 129, 141, 123, 149, 119], scales=[0.0369442f], zero_points=[106], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %258 = dl.dequantize(%257, input_scales=[0.0369442f], input_zero_points=[106]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %259 = sigmoid(%258) /* /model.8/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %260 = multiply(%258, %259) /* /model.8/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %261 = dl.quantize(%260, output_scales=[0.0225715f], output_zero_points=[12]) /* fake_quant_93 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %262 = fn (%FunctionVar_56_0: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_56_1: Tensor[(256, 512, 1, 1), uint8], %FunctionVar_56_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aadd57b8)) -> Tensor[(1, 256, 20, 20), uint8] {
    %11 = (%FunctionVar_56_0, %FunctionVar_56_1, %FunctionVar_56_2, meta[relay.Constant][51] /* ty=Tensor[(256), float32] */, meta[relay.Constant][52] /* ty=Tensor[(256), int32] */, meta[relay.Constant][53] /* ty=Tensor[(256), int32] */, meta[relay.Constant][54] /* ty=Tensor[(256), int32] */, meta[relay.Constant][55] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%11, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0225715f], lhs_zero_points=[12], rhs_scales=[0.00106389f, 0.00122081f, 0.0011893f, 0.000892555f, 0.00163037f, 0.00164498f, 0.00130014f, 0.00121529f, 0.00114792f, 0.00121936f, 0.00113006f, 0.00101207f, 0.00126069f, 0.0020759f, 0.00164726f, 0.0012472f, 0.00129945f, 0.00448683f, 0.00117571f, 0.00214051f, 0.00130569f, 0.00115608f, 0.00217654f, 0.00141589f, 0.00111064f, 0.00152793f, 0.00360504f, 0.00132567f, 0.00116965f, 0.00137618f, 0.00130154f, 0.00118026f, 0.00126494f, 0.00129901f, 0.00112542f, 0.00124141f, 0.00119736f, 0.00106407f, 0.00289518f, 0.00127598f, 0.0012662f, 0.00118219f, 0.00124279f, 0.00120744f, 0.00132919f, 0.00119723f, 0.00101262f, 0.00120714f, 0.00142211f, 0.00298319f, 0.0014164f, 0.00145803f, 0.00144484f, 0.0011927f, 0.00114415f, 0.00254975f, 0.00207713f, 0.00121018f, 0.00139875f, 0.00156274f, 0.000955204f, 0.000872589f, 0.00136405f, 0.00237166f, 0.0010659f, 0.00113269f, 0.00127944f, 0.00113621f, 0.00141728f, 0.00104698f, 0.0011174f, 0.00114846f, 0.00314481f, 0.00180662f, 0.00386177f, 0.00124042f, 0.00317025f, 0.00125853f, 0.00120388f, 0.0015349f, 0.00143602f, 0.00133413f, 0.00158138f, 0.0011743f, 0.0012429f, 0.00117708f, 0.00117589f, 0.00130747f, 0.00152872f, 0.00131969f, 0.00154699f, 0.00172568f, 0.00142172f, 0.00116073f, 0.00115488f, 0.00156962f, 0.0036459f, 0.00094414f, 0.00127009f, 0.00140709f, 0.00100603f, 0.00127856f, 0.00125876f, 0.00127999f, 0.00127264f, 0.00119819f, 0.00135682f, 0.00255556f, 0.00140932f, 0.00122734f, 0.0011541f, 0.00114238f, 0.00144202f, 0.0028236f, 0.00129241f, 0.00114781f, 0.00135579f, 0.00153723f, 0.00165284f, 0.00188223f, 0.00115868f, 0.00121621f, 0.00118986f, 0.00124762f, 0.00111315f, 0.00116775f, 0.000993564f, 0.00122457f, 0.00182633f, 0.0013836f, 0.00130037f, 0.00159557f, 0.00127075f, 0.00192973f, 0.0010771f, 0.00129f, 0.00126401f, 0.00129214f, 0.00113542f, 0.0013404f, 0.0011157f, 0.0023487f, 0.00152327f, 0.00131659f, 0.00110221f, 0.00107969f, 0.00158297f, 0.0010561f, 0.00128922f, 0.00124913f, 0.00117793f, 0.00187403f, 0.00146054f, 0.00210377f, 0.00139957f, 0.00121948f, 0.00124498f, 0.00125695f, 0.00156336f, 0.0011586f, 0.00185221f, 0.00119438f, 0.00122337f, 0.000963358f, 0.00168424f, 0.00255266f, 0.0011586f, 0.0015733f, 0.00128687f, 0.00109177f, 0.00137511f, 0.00145052f, 0.00115026f, 0.00119626f, 0.00158679f, 0.00159942f, 0.00142944f, 0.00119785f, 0.00356542f, 0.00120808f, 0.0015371f, 0.00108554f, 0.00116276f, 0.00228798f, 0.00150636f, 0.00141429f, 0.00122988f, 0.00129322f, 0.00121408f, 0.00229161f, 0.00129354f, 0.00124265f, 0.00120924f, 0.00113843f, 0.00145115f, 0.00125328f, 0.001063f, 0.00117183f, 0.0012847f, 0.00135219f, 0.00144097f, 0.00240703f, 0.00110978f, 0.0013415f, 0.00141005f, 0.00126457f, 0.00110738f, 0.00136863f, 0.00197271f, 0.0012613f, 0.00170354f, 0.00187868f, 0.00133425f, 0.00121698f, 0.00137657f, 0.00106294f, 0.000984747f, 0.00149231f, 0.00145044f, 0.000985351f, 0.00195496f, 0.00166932f, 0.00148176f, 0.00128631f, 0.0015438f, 0.00172754f, 0.0013155f, 0.00154429f, 0.00116757f, 0.00134934f, 0.00131727f, 0.00136729f, 0.00116778f, 0.00110754f, 0.0010729f, 0.00121143f, 0.00201545f, 0.00175817f, 0.00101401f, 0.00140574f, 0.00108389f, 0.00157886f, 0.00107791f, 0.00141243f, 0.00118501f, 0.00138288f, 0.00190002f, 0.00129213f, 0.00119165f, 0.0014518f, 0.00151878f, 0.00131549f, 0.00116561f, 0.00237038f, 0.000992489f, 0.002597f], rhs_zero_points=[140, 137, 121, 134, 135, 140, 145, 131, 148, 134, 122, 128, 137, 127, 139, 128, 111, 239, 147, 77, 143, 131, 148, 133, 137, 130, 38, 117, 112, 114, 141, 140, 174, 146, 136, 138, 99, 127, 66, 127, 146, 153, 120, 150, 138, 121, 137, 143, 134, 166, 139, 144, 133, 135, 127, 130, 129, 111, 130, 138, 142, 123, 152, 128, 125, 144, 150, 121, 142, 129, 141, 124, 169, 189, 88, 107, 189, 147, 147, 144, 192, 137, 138, 106, 137, 149, 151, 131, 131, 118, 144, 134, 143, 135, 148, 158, 205, 149, 163, 143, 138, 136, 137, 161, 150, 127, 121, 109, 123, 118, 136, 114, 136, 173, 129, 126, 127, 116, 128, 151, 130, 145, 133, 149, 120, 115, 116, 123, 154, 129, 156, 129, 132, 157, 139, 155, 123, 133, 135, 151, 120, 122, 122, 106, 124, 138, 114, 140, 134, 143, 149, 188, 123, 155, 129, 125, 132, 123, 142, 128, 165, 123, 120, 123, 145, 190, 136, 136, 123, 131, 145, 118, 136, 119, 126, 123, 116, 115, 176, 112, 159, 125, 131, 163, 140, 110, 122, 132, 128, 180, 112, 132, 124, 120, 154, 144, 136, 134, 131, 136, 129, 60, 117, 97, 117, 137, 128, 109, 132, 113, 164, 175, 136, 130, 129, 106, 134, 146, 146, 125, 144, 142, 149, 139, 135, 141, 153, 161, 138, 126, 123, 128, 114, 122, 133, 143, 125, 172, 132, 132, 136, 137, 126, 136, 138, 136, 104, 142, 140, 158, 152, 138, 125, 107, 141, 156], scales=[0.0297035f], zero_points=[88]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %263 = %262(%261, meta[relay.Constant][273] /* ty=Tensor[(256, 512, 1, 1), uint8] */, meta[relay.Constant][274] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0225715f], lhs_zero_points=[12], rhs_scales=[0.00106389f, 0.00122081f, 0.0011893f, 0.000892555f, 0.00163037f, 0.00164498f, 0.00130014f, 0.00121529f, 0.00114792f, 0.00121936f, 0.00113006f, 0.00101207f, 0.00126069f, 0.0020759f, 0.00164726f, 0.0012472f, 0.00129945f, 0.00448683f, 0.00117571f, 0.00214051f, 0.00130569f, 0.00115608f, 0.00217654f, 0.00141589f, 0.00111064f, 0.00152793f, 0.00360504f, 0.00132567f, 0.00116965f, 0.00137618f, 0.00130154f, 0.00118026f, 0.00126494f, 0.00129901f, 0.00112542f, 0.00124141f, 0.00119736f, 0.00106407f, 0.00289518f, 0.00127598f, 0.0012662f, 0.00118219f, 0.00124279f, 0.00120744f, 0.00132919f, 0.00119723f, 0.00101262f, 0.00120714f, 0.00142211f, 0.00298319f, 0.0014164f, 0.00145803f, 0.00144484f, 0.0011927f, 0.00114415f, 0.00254975f, 0.00207713f, 0.00121018f, 0.00139875f, 0.00156274f, 0.000955204f, 0.000872589f, 0.00136405f, 0.00237166f, 0.0010659f, 0.00113269f, 0.00127944f, 0.00113621f, 0.00141728f, 0.00104698f, 0.0011174f, 0.00114846f, 0.00314481f, 0.00180662f, 0.00386177f, 0.00124042f, 0.00317025f, 0.00125853f, 0.00120388f, 0.0015349f, 0.00143602f, 0.00133413f, 0.00158138f, 0.0011743f, 0.0012429f, 0.00117708f, 0.00117589f, 0.00130747f, 0.00152872f, 0.00131969f, 0.00154699f, 0.00172568f, 0.00142172f, 0.00116073f, 0.00115488f, 0.00156962f, 0.0036459f, 0.00094414f, 0.00127009f, 0.00140709f, 0.00100603f, 0.00127856f, 0.00125876f, 0.00127999f, 0.00127264f, 0.00119819f, 0.00135682f, 0.00255556f, 0.00140932f, 0.00122734f, 0.0011541f, 0.00114238f, 0.00144202f, 0.0028236f, 0.00129241f, 0.00114781f, 0.00135579f, 0.00153723f, 0.00165284f, 0.00188223f, 0.00115868f, 0.00121621f, 0.00118986f, 0.00124762f, 0.00111315f, 0.00116775f, 0.000993564f, 0.00122457f, 0.00182633f, 0.0013836f, 0.00130037f, 0.00159557f, 0.00127075f, 0.00192973f, 0.0010771f, 0.00129f, 0.00126401f, 0.00129214f, 0.00113542f, 0.0013404f, 0.0011157f, 0.0023487f, 0.00152327f, 0.00131659f, 0.00110221f, 0.00107969f, 0.00158297f, 0.0010561f, 0.00128922f, 0.00124913f, 0.00117793f, 0.00187403f, 0.00146054f, 0.00210377f, 0.00139957f, 0.00121948f, 0.00124498f, 0.00125695f, 0.00156336f, 0.0011586f, 0.00185221f, 0.00119438f, 0.00122337f, 0.000963358f, 0.00168424f, 0.00255266f, 0.0011586f, 0.0015733f, 0.00128687f, 0.00109177f, 0.00137511f, 0.00145052f, 0.00115026f, 0.00119626f, 0.00158679f, 0.00159942f, 0.00142944f, 0.00119785f, 0.00356542f, 0.00120808f, 0.0015371f, 0.00108554f, 0.00116276f, 0.00228798f, 0.00150636f, 0.00141429f, 0.00122988f, 0.00129322f, 0.00121408f, 0.00229161f, 0.00129354f, 0.00124265f, 0.00120924f, 0.00113843f, 0.00145115f, 0.00125328f, 0.001063f, 0.00117183f, 0.0012847f, 0.00135219f, 0.00144097f, 0.00240703f, 0.00110978f, 0.0013415f, 0.00141005f, 0.00126457f, 0.00110738f, 0.00136863f, 0.00197271f, 0.0012613f, 0.00170354f, 0.00187868f, 0.00133425f, 0.00121698f, 0.00137657f, 0.00106294f, 0.000984747f, 0.00149231f, 0.00145044f, 0.000985351f, 0.00195496f, 0.00166932f, 0.00148176f, 0.00128631f, 0.0015438f, 0.00172754f, 0.0013155f, 0.00154429f, 0.00116757f, 0.00134934f, 0.00131727f, 0.00136729f, 0.00116778f, 0.00110754f, 0.0010729f, 0.00121143f, 0.00201545f, 0.00175817f, 0.00101401f, 0.00140574f, 0.00108389f, 0.00157886f, 0.00107791f, 0.00141243f, 0.00118501f, 0.00138288f, 0.00190002f, 0.00129213f, 0.00119165f, 0.0014518f, 0.00151878f, 0.00131549f, 0.00116561f, 0.00237038f, 0.000992489f, 0.002597f], rhs_zero_points=[140, 137, 121, 134, 135, 140, 145, 131, 148, 134, 122, 128, 137, 127, 139, 128, 111, 239, 147, 77, 143, 131, 148, 133, 137, 130, 38, 117, 112, 114, 141, 140, 174, 146, 136, 138, 99, 127, 66, 127, 146, 153, 120, 150, 138, 121, 137, 143, 134, 166, 139, 144, 133, 135, 127, 130, 129, 111, 130, 138, 142, 123, 152, 128, 125, 144, 150, 121, 142, 129, 141, 124, 169, 189, 88, 107, 189, 147, 147, 144, 192, 137, 138, 106, 137, 149, 151, 131, 131, 118, 144, 134, 143, 135, 148, 158, 205, 149, 163, 143, 138, 136, 137, 161, 150, 127, 121, 109, 123, 118, 136, 114, 136, 173, 129, 126, 127, 116, 128, 151, 130, 145, 133, 149, 120, 115, 116, 123, 154, 129, 156, 129, 132, 157, 139, 155, 123, 133, 135, 151, 120, 122, 122, 106, 124, 138, 114, 140, 134, 143, 149, 188, 123, 155, 129, 125, 132, 123, 142, 128, 165, 123, 120, 123, 145, 190, 136, 136, 123, 131, 145, 118, 136, 119, 126, 123, 116, 115, 176, 112, 159, 125, 131, 163, 140, 110, 122, 132, 128, 180, 112, 132, 124, 120, 154, 144, 136, 134, 131, 136, 129, 60, 117, 97, 117, 137, 128, 109, 132, 113, 164, 175, 136, 130, 129, 106, 134, 146, 146, 125, 144, 142, 149, 139, 135, 141, 153, 161, 138, 126, 123, 128, 114, 122, 133, 143, 125, 172, 132, 132, 136, 137, 126, 136, 138, 136, 104, 142, 140, 158, 152, 138, 125, 107, 141, 156], scales=[0.0297035f], zero_points=[88], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %264 = dl.dequantize(%263, input_scales=[0.0297035f], input_zero_points=[88]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %265 = sigmoid(%264) /* /model.9/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %268 = multiply(%264, %265) /* /model.9/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %269 = dl.quantize(%268, output_scales=[0.0204515f], output_zero_points=[14]) /* fake_quant_96 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %270 = fn (%FunctionVar_2_01: Tensor[(1, 256, 20, 20), uint8], PartitionedFromPattern="dl.dequantize_nn.max_pool2d_dl.quantize_", Composite="ds1:0|te1:0|aso1:0|aso2:1|quantize:1", TuAttrs=relay.attrs.TuAttrs(0x55aaf59fa8)) -> Tensor[(1, 256, 20, 20), uint8] {
    %266 = dl.dequantize(%FunctionVar_2_01, out_dtype="float16", input_scales=[0.0204515f], input_zero_points=[14]) /* ty=Tensor[(1, 256, 20, 20), float16] */;
    %267 = nn.max_pool2d(%266, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* /model.9/m/MaxPool_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float16] */;
    dl.quantize(%267, output_scales=[0.0204186f], output_zero_points=[13]) /* fake_quant_97 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %271 = %270(%269, pool_size=[5, 5], pool_strides=[1, 1], pool_padding=[2, 2, 2, 2], lhs_scales=[0.0204515f], lhs_zero_points=[14], scales=[0.0204186f], zero_points=[13], stage3=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %274 = fn (%FunctionVar_1_02: Tensor[(1, 256, 20, 20), uint8], PartitionedFromPattern="dl.dequantize_nn.max_pool2d_dl.quantize_", Composite="ds1:0|te1:0|aso1:0|aso2:1|quantize:1", TuAttrs=relay.attrs.TuAttrs(0x55a96cba08)) -> Tensor[(1, 256, 20, 20), uint8] {
    %272 = dl.dequantize(%FunctionVar_1_02, out_dtype="float16", input_scales=[0.0204186f], input_zero_points=[13]) /* ty=Tensor[(1, 256, 20, 20), float16] */;
    %273 = nn.max_pool2d(%272, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* /model.9/m_1/MaxPool_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float16] */;
    dl.quantize(%273, output_scales=[0.020362f], output_zero_points=[13]) /* fake_quant_98 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %275 = %274(%271, pool_size=[5, 5], pool_strides=[1, 1], pool_padding=[2, 2, 2, 2], lhs_scales=[0.0204186f], lhs_zero_points=[13], scales=[0.020362f], zero_points=[13], stage3=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %278 = fn (%FunctionVar_0_03: Tensor[(1, 256, 20, 20), uint8], PartitionedFromPattern="dl.dequantize_nn.max_pool2d_dl.quantize_", Composite="ds1:0|te1:0|aso1:0|aso2:1|quantize:1", TuAttrs=relay.attrs.TuAttrs(0x55a9891988)) -> Tensor[(1, 256, 20, 20), uint8] {
    %276 = dl.dequantize(%FunctionVar_0_03, out_dtype="float16", input_scales=[0.020362f], input_zero_points=[13]) /* ty=Tensor[(1, 256, 20, 20), float16] */;
    %277 = nn.max_pool2d(%276, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* /model.9/m_2/MaxPool_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float16] */;
    dl.quantize(%277, output_scales=[0.0203289f], output_zero_points=[12]) /* fake_quant_99 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %279 = %278(%275, pool_size=[5, 5], pool_strides=[1, 1], pool_padding=[2, 2, 2, 2], lhs_scales=[0.020362f], lhs_zero_points=[13], scales=[0.0203289f], zero_points=[12], stage3=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %280 = dl.dequantize(%271, input_scales=[0.0204186f], input_zero_points=[13]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %281 = dl.dequantize(%275, input_scales=[0.020362f], input_zero_points=[13]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %282 = dl.dequantize(%279, input_scales=[0.0203289f], input_zero_points=[12]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %283 = (%268, %280, %281, %282);
  %284 = concatenate(%283, axis=1) /* /model.9/Concat_output_0 */ /* ty=Tensor[(1, 1024, 20, 20), float32] */;
  %285 = dl.quantize(%284, output_scales=[0.0204515f], output_zero_points=[14]) /* fake_quant_100 */ /* ty=Tensor[(1, 1024, 20, 20), uint8] */;
  %286 = fn (%FunctionVar_55_0: Tensor[(1, 1024, 20, 20), uint8], %FunctionVar_55_1: Tensor[(512, 1024, 1, 1), uint8], %FunctionVar_55_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a7cd3dd8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %10 = (%FunctionVar_55_0, %FunctionVar_55_1, %FunctionVar_55_2, meta[relay.Constant][46] /* ty=Tensor[(512), float32] */, meta[relay.Constant][47] /* ty=Tensor[(512), int32] */, meta[relay.Constant][48] /* ty=Tensor[(512), int32] */, meta[relay.Constant][49] /* ty=Tensor[(512), int32] */, meta[relay.Constant][50] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%10, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0204515f], lhs_zero_points=[14], rhs_scales=[0.00118107f, 0.000617961f, 0.000489509f, 0.000642074f, 0.000868975f, 0.000869035f, 0.00121058f, 0.000933262f, 0.000878f, 0.0012513f, 0.000808422f, 0.00112913f, 0.000983201f, 0.000441287f, 0.000878808f, 0.000723361f, 0.000596619f, 0.000753785f, 0.000866853f, 0.000683522f, 0.000661524f, 0.000779878f, 0.00075654f, 0.00116529f, 0.0013974f, 0.00184773f, 0.000759898f, 0.000564989f, 0.000660123f, 0.00131275f, 0.000730709f, 0.00106444f, 0.000678655f, 0.000640444f, 0.000898453f, 0.000829688f, 0.000658369f, 0.00105179f, 0.000781724f, 0.00194671f, 0.00374007f, 0.000933597f, 0.000775317f, 0.0007807f, 0.00108596f, 0.000748071f, 0.000556126f, 0.000859131f, 0.000820938f, 0.000711866f, 0.000620654f, 0.00160436f, 0.00175103f, 0.00051612f, 0.000807901f, 0.000628494f, 0.000662419f, 0.000938069f, 0.00106682f, 0.000714863f, 0.00100046f, 0.00156231f, 0.000632926f, 0.000664801f, 0.000961767f, 0.00074942f, 0.00104623f, 0.000889885f, 0.000871352f, 0.00243552f, 0.00106729f, 0.000935966f, 0.00109328f, 0.000838103f, 0.000652173f, 0.0010467f, 0.000776264f, 0.000913649f, 0.000858761f, 0.00144843f, 0.000683526f, 0.000575852f, 0.000680882f, 0.000965706f, 0.00078277f, 0.000671945f, 0.00120242f, 0.00101939f, 0.000642704f, 0.0012854f, 0.000826801f, 0.000658715f, 0.00112649f, 0.000856279f, 0.000961376f, 0.00107175f, 0.000725315f, 0.000679608f, 0.000730562f, 0.000947409f, 0.00096539f, 0.000681448f, 0.000690575f, 0.00135201f, 0.000725634f, 0.000807276f, 0.00117867f, 0.00102889f, 0.000710515f, 0.000874348f, 0.000856255f, 0.00087633f, 0.000650664f, 0.000933858f, 0.000645357f, 0.000803269f, 0.00118632f, 0.000806233f, 0.00145032f, 0.00090575f, 0.00083966f, 0.000969997f, 0.00115544f, 0.000782823f, 0.00138135f, 0.000526417f, 0.000693534f, 0.00131662f, 0.000804076f, 0.00134087f, 0.000597864f, 0.00111058f, 0.00100647f, 0.00114591f, 0.00101499f, 0.00110078f, 0.000672356f, 0.00121636f, 0.000768804f, 0.000785717f, 0.000475896f, 0.000688877f, 0.000803388f, 0.000399039f, 0.00181979f, 0.000782959f, 0.00111997f, 0.000972297f, 0.00114828f, 0.000624729f, 0.00048275f, 0.00133044f, 0.000694962f, 0.00152558f, 0.000795681f, 0.00107345f, 0.00159637f, 0.00115298f, 0.00067261f, 0.000504709f, 0.000850533f, 0.000826751f, 0.0014525f, 0.0013312f, 0.00240273f, 0.000677693f, 0.00119315f, 0.000685751f, 0.000996313f, 0.00118829f, 0.00111124f, 0.00105873f, 0.00137604f, 0.00104875f, 0.0013245f, 0.00103166f, 0.000567362f, 0.000963388f, 0.000776412f, 0.000710406f, 0.000588805f, 0.00215056f, 0.000613641f, 0.000797075f, 0.00093945f, 0.0010454f, 0.00094897f, 0.000540065f, 0.00124721f, 0.000775752f, 0.000765256f, 0.000745553f, 0.00236843f, 0.000753424f, 0.00071525f, 0.00148698f, 0.000736306f, 0.000962475f, 0.000838741f, 0.000862882f, 0.00131355f, 0.00091754f, 0.00130776f, 0.00161241f, 0.00103873f, 0.000667627f, 0.000819628f, 0.00100084f, 0.00084428f, 0.000751797f, 0.0010972f, 0.0022581f, 0.000658257f, 0.00111249f, 0.00101415f, 0.00108028f, 0.000587237f, 0.000894226f, 0.00074204f, 0.000677534f, 0.00157357f, 0.00111771f, 0.000841299f, 0.000934798f, 0.000761194f, 0.00642883f, 0.0015007f, 0.00153011f, 0.000820305f, 0.00131648f, 0.000928102f, 0.000932437f, 0.000964179f, 0.000559994f, 0.000968516f, 0.00127852f, 0.00070698f, 0.000770682f, 0.000701232f, 0.00102052f, 0.00108942f, 0.000743939f, 0.00105326f, 0.000755587f, 0.00125351f, 0.000948966f, 0.000896754f, 0.000954953f, 0.00108272f, 0.00182094f, 0.00143306f, 0.000581073f, 0.000550308f, 0.00261315f, 0.000739547f, 0.00170455f, 0.00147705f, 0.00084559f, 0.000742794f, 0.00102194f, 0.00081617f, 0.000831369f, 0.000608741f, 0.00117224f, 0.000643332f, 0.00102289f, 0.00105515f, 0.00057431f, 0.000571794f, 0.000870864f, 0.000650259f, 0.000714964f, 0.000891636f, 0.000968712f, 0.00100012f, 0.00152232f, 0.00080527f, 0.00233919f, 0.000581635f, 0.000729465f, 0.000596716f, 0.00147512f, 0.00146628f, 0.00147654f, 0.00131642f, 0.000933116f, 0.000614715f, 0.00092014f, 0.00096378f, 0.000774725f, 0.00115147f, 0.000897959f, 0.000586886f, 0.000822914f, 0.00201198f, 0.000696152f, 0.000645624f, 0.000849333f, 0.000983307f, 0.000581799f, 0.00085115f, 0.00126445f, 0.000643171f, 0.00118789f, 0.00116011f, 0.000900314f, 0.000583747f, 0.00106248f, 0.000793404f, 0.000728807f, 0.000559402f, 0.000828467f, 0.000951866f, 0.00165606f, 0.000714896f, 0.000688986f, 0.000686686f, 0.00143637f, 0.00105566f, 0.00105237f, 0.000666702f, 0.0010733f, 0.000723994f, 0.000729121f, 0.000600257f, 0.000856077f, 0.00153255f, 0.000636769f, 0.000928959f, 0.000841173f, 0.00136669f, 0.000624679f, 0.000627291f, 0.000896344f, 0.00111183f, 0.000606005f, 0.000740939f, 0.000584588f, 0.00102482f, 0.00124322f, 0.000978793f, 0.000825572f, 0.000474569f, 0.000679881f, 0.000709684f, 0.000815789f, 0.000598321f, 0.000604729f, 0.000644768f, 0.00145581f, 0.000736772f, 0.000846053f, 0.000671f, 0.000775448f, 0.000784554f, 0.00153128f, 0.00142914f, 0.000849712f, 0.000979912f, 0.000558249f, 0.00094693f, 0.0007387f, 0.000631099f, 0.000914602f, 0.000870008f, 0.000903599f, 0.000851561f, 0.000988247f, 0.000924413f, 0.00143266f, 0.000831661f, 0.00188015f, 0.00116374f, 0.000874573f, 0.000877637f, 0.00101108f, 0.00151339f, 0.00091533f, 0.000922233f, 0.000684077f, 0.000652938f, 0.000858683f, 0.00159113f, 0.00135518f, 0.000688161f, 0.00113819f, 0.000847193f, 0.00068902f, 0.000638206f, 0.000737059f, 0.000736496f, 0.00139368f, 0.000783791f, 0.000420733f, 0.00164911f, 0.00167536f, 0.000924886f, 0.000711483f, 0.000895792f, 0.00114833f, 0.000936569f, 0.000647293f, 0.000588737f, 0.0010259f, 0.000549641f, 0.00140533f, 0.00126352f, 0.00110627f, 0.000784773f, 0.00143114f, 0.000767021f, 0.00100979f, 0.000811866f, 0.000627114f, 0.00140551f, 0.00092893f, 0.000653356f, 0.000633701f, 0.00164987f, 0.00130315f, 0.000859385f, 0.000729211f, 0.000535312f, 0.00077063f, 0.000518256f, 0.000942183f, 0.00062515f, 0.000702215f, 0.00104503f, 0.000724877f, 0.000681358f, 0.000975985f, 0.000881446f, 0.000715758f, 0.000769606f, 0.000866494f, 0.000993001f, 0.00283143f, 0.00153092f, 0.00120428f, 0.000752044f, 0.000799757f, 0.00105263f, 0.000940693f, 0.000628697f, 0.00071783f, 0.00174538f, 0.00111686f, 0.00124272f, 0.000610348f, 0.000762813f, 0.000774932f, 0.000791042f, 0.000906052f, 0.000891387f, 0.000778218f, 0.000793507f, 0.000730569f, 0.00119224f, 0.00168274f, 0.00141743f, 0.00224692f, 0.000741617f, 0.000542992f, 0.000942496f, 0.000870808f, 0.00139514f, 0.00083224f, 0.000835368f, 0.00108493f, 0.000652431f, 0.000623936f, 0.000672644f, 0.000795865f, 0.00140744f, 0.00118162f, 0.000754411f, 0.00092203f, 0.000686194f, 0.000999634f, 0.000706176f, 0.00148353f, 0.00149033f, 0.00100055f, 0.000931485f, 0.000915931f, 0.00100927f, 0.00096759f, 0.00148119f, 0.000740101f, 0.000857709f, 0.000663945f, 0.00116416f, 0.000538477f, 0.000705374f, 0.000617484f, 0.000694707f, 0.00078091f, 0.000903213f, 0.000910763f, 0.00114858f, 0.00114982f, 0.00216147f, 0.000835546f, 0.00112535f, 0.000746214f, 0.000864169f, 0.000707602f, 0.000681697f, 0.000542654f, 0.000621493f, 0.00104958f], rhs_zero_points=[78, 115, 135, 142, 110, 92, 112, 154, 108, 89, 123, 104, 98, 126, 141, 128, 122, 143, 136, 103, 104, 101, 160, 137, 100, 108, 146, 87, 138, 87, 126, 111, 109, 121, 160, 91, 150, 132, 107, 80, 207, 113, 102, 121, 103, 101, 126, 124, 98, 126, 121, 110, 87, 136, 121, 133, 119, 95, 76, 100, 103, 114, 138, 116, 150, 138, 113, 111, 115, 163, 75, 89, 87, 155, 145, 72, 129, 104, 106, 82, 96, 104, 129, 92, 110, 118, 81, 117, 123, 104, 117, 119, 91, 95, 114, 111, 126, 115, 113, 126, 119, 129, 117, 110, 108, 89, 66, 91, 129, 108, 114, 109, 99, 152, 180, 96, 193, 111, 133, 117, 136, 196, 98, 114, 90, 154, 132, 152, 104, 77, 112, 95, 81, 128, 106, 95, 122, 91, 136, 102, 122, 117, 131, 137, 140, 109, 78, 98, 78, 100, 124, 85, 122, 105, 131, 97, 98, 118, 112, 114, 94, 116, 144, 103, 125, 114, 131, 106, 130, 103, 129, 90, 91, 90, 102, 102, 105, 83, 152, 134, 120, 139, 124, 113, 127, 89, 108, 116, 112, 116, 152, 134, 119, 120, 106, 84, 98, 131, 99, 97, 124, 91, 129, 124, 107, 141, 137, 101, 97, 129, 114, 51, 118, 104, 119, 91, 128, 123, 114, 122, 184, 98, 148, 86, 113, 166, 86, 99, 113, 81, 91, 127, 122, 117, 104, 83, 162, 131, 105, 77, 98, 111, 129, 115, 139, 102, 112, 121, 127, 150, 84, 111, 118, 221, 118, 70, 102, 109, 110, 151, 82, 115, 115, 99, 131, 102, 113, 128, 148, 115, 118, 135, 90, 92, 132, 121, 96, 157, 116, 117, 119, 82, 112, 113, 101, 111, 115, 94, 106, 107, 72, 112, 110, 88, 175, 142, 130, 90, 99, 84, 83, 111, 116, 113, 101, 107, 112, 116, 134, 104, 112, 115, 120, 134, 130, 134, 116, 127, 109, 96, 138, 118, 106, 115, 142, 105, 87, 133, 124, 114, 108, 120, 118, 112, 135, 126, 106, 140, 124, 86, 93, 141, 128, 104, 115, 108, 138, 134, 163, 158, 115, 101, 107, 111, 133, 90, 109, 96, 73, 114, 93, 113, 108, 108, 108, 90, 101, 112, 91, 79, 102, 90, 102, 103, 106, 101, 89, 99, 94, 112, 110, 118, 102, 113, 102, 119, 122, 132, 121, 146, 126, 81, 109, 156, 105, 78, 97, 98, 86, 87, 103, 108, 121, 103, 117, 92, 99, 109, 105, 150, 120, 97, 110, 117, 124, 116, 121, 135, 81, 81, 118, 122, 124, 105, 162, 119, 134, 106, 104, 111, 106, 128, 98, 114, 75, 124, 135, 93, 117, 97, 95, 113, 124, 126, 112, 128, 97, 77, 93, 112, 121, 107, 152, 103, 114, 103, 123, 108, 89, 101, 76, 132, 112, 135, 77, 101, 171, 127, 119, 91, 116, 116, 135, 104, 65, 127, 123, 96, 119, 105, 108, 81, 91, 68, 88, 135, 136, 106, 122, 92, 148, 121, 86, 141, 99, 119, 114, 116, 114, 102, 90, 80, 117, 133, 129, 126, 113, 110, 120, 116, 149, 119], scales=[0.0766704f], zero_points=[188]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %287 = %286(%285, meta[relay.Constant][275] /* ty=Tensor[(512, 1024, 1, 1), uint8] */, meta[relay.Constant][276] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0204515f], lhs_zero_points=[14], rhs_scales=[0.00118107f, 0.000617961f, 0.000489509f, 0.000642074f, 0.000868975f, 0.000869035f, 0.00121058f, 0.000933262f, 0.000878f, 0.0012513f, 0.000808422f, 0.00112913f, 0.000983201f, 0.000441287f, 0.000878808f, 0.000723361f, 0.000596619f, 0.000753785f, 0.000866853f, 0.000683522f, 0.000661524f, 0.000779878f, 0.00075654f, 0.00116529f, 0.0013974f, 0.00184773f, 0.000759898f, 0.000564989f, 0.000660123f, 0.00131275f, 0.000730709f, 0.00106444f, 0.000678655f, 0.000640444f, 0.000898453f, 0.000829688f, 0.000658369f, 0.00105179f, 0.000781724f, 0.00194671f, 0.00374007f, 0.000933597f, 0.000775317f, 0.0007807f, 0.00108596f, 0.000748071f, 0.000556126f, 0.000859131f, 0.000820938f, 0.000711866f, 0.000620654f, 0.00160436f, 0.00175103f, 0.00051612f, 0.000807901f, 0.000628494f, 0.000662419f, 0.000938069f, 0.00106682f, 0.000714863f, 0.00100046f, 0.00156231f, 0.000632926f, 0.000664801f, 0.000961767f, 0.00074942f, 0.00104623f, 0.000889885f, 0.000871352f, 0.00243552f, 0.00106729f, 0.000935966f, 0.00109328f, 0.000838103f, 0.000652173f, 0.0010467f, 0.000776264f, 0.000913649f, 0.000858761f, 0.00144843f, 0.000683526f, 0.000575852f, 0.000680882f, 0.000965706f, 0.00078277f, 0.000671945f, 0.00120242f, 0.00101939f, 0.000642704f, 0.0012854f, 0.000826801f, 0.000658715f, 0.00112649f, 0.000856279f, 0.000961376f, 0.00107175f, 0.000725315f, 0.000679608f, 0.000730562f, 0.000947409f, 0.00096539f, 0.000681448f, 0.000690575f, 0.00135201f, 0.000725634f, 0.000807276f, 0.00117867f, 0.00102889f, 0.000710515f, 0.000874348f, 0.000856255f, 0.00087633f, 0.000650664f, 0.000933858f, 0.000645357f, 0.000803269f, 0.00118632f, 0.000806233f, 0.00145032f, 0.00090575f, 0.00083966f, 0.000969997f, 0.00115544f, 0.000782823f, 0.00138135f, 0.000526417f, 0.000693534f, 0.00131662f, 0.000804076f, 0.00134087f, 0.000597864f, 0.00111058f, 0.00100647f, 0.00114591f, 0.00101499f, 0.00110078f, 0.000672356f, 0.00121636f, 0.000768804f, 0.000785717f, 0.000475896f, 0.000688877f, 0.000803388f, 0.000399039f, 0.00181979f, 0.000782959f, 0.00111997f, 0.000972297f, 0.00114828f, 0.000624729f, 0.00048275f, 0.00133044f, 0.000694962f, 0.00152558f, 0.000795681f, 0.00107345f, 0.00159637f, 0.00115298f, 0.00067261f, 0.000504709f, 0.000850533f, 0.000826751f, 0.0014525f, 0.0013312f, 0.00240273f, 0.000677693f, 0.00119315f, 0.000685751f, 0.000996313f, 0.00118829f, 0.00111124f, 0.00105873f, 0.00137604f, 0.00104875f, 0.0013245f, 0.00103166f, 0.000567362f, 0.000963388f, 0.000776412f, 0.000710406f, 0.000588805f, 0.00215056f, 0.000613641f, 0.000797075f, 0.00093945f, 0.0010454f, 0.00094897f, 0.000540065f, 0.00124721f, 0.000775752f, 0.000765256f, 0.000745553f, 0.00236843f, 0.000753424f, 0.00071525f, 0.00148698f, 0.000736306f, 0.000962475f, 0.000838741f, 0.000862882f, 0.00131355f, 0.00091754f, 0.00130776f, 0.00161241f, 0.00103873f, 0.000667627f, 0.000819628f, 0.00100084f, 0.00084428f, 0.000751797f, 0.0010972f, 0.0022581f, 0.000658257f, 0.00111249f, 0.00101415f, 0.00108028f, 0.000587237f, 0.000894226f, 0.00074204f, 0.000677534f, 0.00157357f, 0.00111771f, 0.000841299f, 0.000934798f, 0.000761194f, 0.00642883f, 0.0015007f, 0.00153011f, 0.000820305f, 0.00131648f, 0.000928102f, 0.000932437f, 0.000964179f, 0.000559994f, 0.000968516f, 0.00127852f, 0.00070698f, 0.000770682f, 0.000701232f, 0.00102052f, 0.00108942f, 0.000743939f, 0.00105326f, 0.000755587f, 0.00125351f, 0.000948966f, 0.000896754f, 0.000954953f, 0.00108272f, 0.00182094f, 0.00143306f, 0.000581073f, 0.000550308f, 0.00261315f, 0.000739547f, 0.00170455f, 0.00147705f, 0.00084559f, 0.000742794f, 0.00102194f, 0.00081617f, 0.000831369f, 0.000608741f, 0.00117224f, 0.000643332f, 0.00102289f, 0.00105515f, 0.00057431f, 0.000571794f, 0.000870864f, 0.000650259f, 0.000714964f, 0.000891636f, 0.000968712f, 0.00100012f, 0.00152232f, 0.00080527f, 0.00233919f, 0.000581635f, 0.000729465f, 0.000596716f, 0.00147512f, 0.00146628f, 0.00147654f, 0.00131642f, 0.000933116f, 0.000614715f, 0.00092014f, 0.00096378f, 0.000774725f, 0.00115147f, 0.000897959f, 0.000586886f, 0.000822914f, 0.00201198f, 0.000696152f, 0.000645624f, 0.000849333f, 0.000983307f, 0.000581799f, 0.00085115f, 0.00126445f, 0.000643171f, 0.00118789f, 0.00116011f, 0.000900314f, 0.000583747f, 0.00106248f, 0.000793404f, 0.000728807f, 0.000559402f, 0.000828467f, 0.000951866f, 0.00165606f, 0.000714896f, 0.000688986f, 0.000686686f, 0.00143637f, 0.00105566f, 0.00105237f, 0.000666702f, 0.0010733f, 0.000723994f, 0.000729121f, 0.000600257f, 0.000856077f, 0.00153255f, 0.000636769f, 0.000928959f, 0.000841173f, 0.00136669f, 0.000624679f, 0.000627291f, 0.000896344f, 0.00111183f, 0.000606005f, 0.000740939f, 0.000584588f, 0.00102482f, 0.00124322f, 0.000978793f, 0.000825572f, 0.000474569f, 0.000679881f, 0.000709684f, 0.000815789f, 0.000598321f, 0.000604729f, 0.000644768f, 0.00145581f, 0.000736772f, 0.000846053f, 0.000671f, 0.000775448f, 0.000784554f, 0.00153128f, 0.00142914f, 0.000849712f, 0.000979912f, 0.000558249f, 0.00094693f, 0.0007387f, 0.000631099f, 0.000914602f, 0.000870008f, 0.000903599f, 0.000851561f, 0.000988247f, 0.000924413f, 0.00143266f, 0.000831661f, 0.00188015f, 0.00116374f, 0.000874573f, 0.000877637f, 0.00101108f, 0.00151339f, 0.00091533f, 0.000922233f, 0.000684077f, 0.000652938f, 0.000858683f, 0.00159113f, 0.00135518f, 0.000688161f, 0.00113819f, 0.000847193f, 0.00068902f, 0.000638206f, 0.000737059f, 0.000736496f, 0.00139368f, 0.000783791f, 0.000420733f, 0.00164911f, 0.00167536f, 0.000924886f, 0.000711483f, 0.000895792f, 0.00114833f, 0.000936569f, 0.000647293f, 0.000588737f, 0.0010259f, 0.000549641f, 0.00140533f, 0.00126352f, 0.00110627f, 0.000784773f, 0.00143114f, 0.000767021f, 0.00100979f, 0.000811866f, 0.000627114f, 0.00140551f, 0.00092893f, 0.000653356f, 0.000633701f, 0.00164987f, 0.00130315f, 0.000859385f, 0.000729211f, 0.000535312f, 0.00077063f, 0.000518256f, 0.000942183f, 0.00062515f, 0.000702215f, 0.00104503f, 0.000724877f, 0.000681358f, 0.000975985f, 0.000881446f, 0.000715758f, 0.000769606f, 0.000866494f, 0.000993001f, 0.00283143f, 0.00153092f, 0.00120428f, 0.000752044f, 0.000799757f, 0.00105263f, 0.000940693f, 0.000628697f, 0.00071783f, 0.00174538f, 0.00111686f, 0.00124272f, 0.000610348f, 0.000762813f, 0.000774932f, 0.000791042f, 0.000906052f, 0.000891387f, 0.000778218f, 0.000793507f, 0.000730569f, 0.00119224f, 0.00168274f, 0.00141743f, 0.00224692f, 0.000741617f, 0.000542992f, 0.000942496f, 0.000870808f, 0.00139514f, 0.00083224f, 0.000835368f, 0.00108493f, 0.000652431f, 0.000623936f, 0.000672644f, 0.000795865f, 0.00140744f, 0.00118162f, 0.000754411f, 0.00092203f, 0.000686194f, 0.000999634f, 0.000706176f, 0.00148353f, 0.00149033f, 0.00100055f, 0.000931485f, 0.000915931f, 0.00100927f, 0.00096759f, 0.00148119f, 0.000740101f, 0.000857709f, 0.000663945f, 0.00116416f, 0.000538477f, 0.000705374f, 0.000617484f, 0.000694707f, 0.00078091f, 0.000903213f, 0.000910763f, 0.00114858f, 0.00114982f, 0.00216147f, 0.000835546f, 0.00112535f, 0.000746214f, 0.000864169f, 0.000707602f, 0.000681697f, 0.000542654f, 0.000621493f, 0.00104958f], rhs_zero_points=[78, 115, 135, 142, 110, 92, 112, 154, 108, 89, 123, 104, 98, 126, 141, 128, 122, 143, 136, 103, 104, 101, 160, 137, 100, 108, 146, 87, 138, 87, 126, 111, 109, 121, 160, 91, 150, 132, 107, 80, 207, 113, 102, 121, 103, 101, 126, 124, 98, 126, 121, 110, 87, 136, 121, 133, 119, 95, 76, 100, 103, 114, 138, 116, 150, 138, 113, 111, 115, 163, 75, 89, 87, 155, 145, 72, 129, 104, 106, 82, 96, 104, 129, 92, 110, 118, 81, 117, 123, 104, 117, 119, 91, 95, 114, 111, 126, 115, 113, 126, 119, 129, 117, 110, 108, 89, 66, 91, 129, 108, 114, 109, 99, 152, 180, 96, 193, 111, 133, 117, 136, 196, 98, 114, 90, 154, 132, 152, 104, 77, 112, 95, 81, 128, 106, 95, 122, 91, 136, 102, 122, 117, 131, 137, 140, 109, 78, 98, 78, 100, 124, 85, 122, 105, 131, 97, 98, 118, 112, 114, 94, 116, 144, 103, 125, 114, 131, 106, 130, 103, 129, 90, 91, 90, 102, 102, 105, 83, 152, 134, 120, 139, 124, 113, 127, 89, 108, 116, 112, 116, 152, 134, 119, 120, 106, 84, 98, 131, 99, 97, 124, 91, 129, 124, 107, 141, 137, 101, 97, 129, 114, 51, 118, 104, 119, 91, 128, 123, 114, 122, 184, 98, 148, 86, 113, 166, 86, 99, 113, 81, 91, 127, 122, 117, 104, 83, 162, 131, 105, 77, 98, 111, 129, 115, 139, 102, 112, 121, 127, 150, 84, 111, 118, 221, 118, 70, 102, 109, 110, 151, 82, 115, 115, 99, 131, 102, 113, 128, 148, 115, 118, 135, 90, 92, 132, 121, 96, 157, 116, 117, 119, 82, 112, 113, 101, 111, 115, 94, 106, 107, 72, 112, 110, 88, 175, 142, 130, 90, 99, 84, 83, 111, 116, 113, 101, 107, 112, 116, 134, 104, 112, 115, 120, 134, 130, 134, 116, 127, 109, 96, 138, 118, 106, 115, 142, 105, 87, 133, 124, 114, 108, 120, 118, 112, 135, 126, 106, 140, 124, 86, 93, 141, 128, 104, 115, 108, 138, 134, 163, 158, 115, 101, 107, 111, 133, 90, 109, 96, 73, 114, 93, 113, 108, 108, 108, 90, 101, 112, 91, 79, 102, 90, 102, 103, 106, 101, 89, 99, 94, 112, 110, 118, 102, 113, 102, 119, 122, 132, 121, 146, 126, 81, 109, 156, 105, 78, 97, 98, 86, 87, 103, 108, 121, 103, 117, 92, 99, 109, 105, 150, 120, 97, 110, 117, 124, 116, 121, 135, 81, 81, 118, 122, 124, 105, 162, 119, 134, 106, 104, 111, 106, 128, 98, 114, 75, 124, 135, 93, 117, 97, 95, 113, 124, 126, 112, 128, 97, 77, 93, 112, 121, 107, 152, 103, 114, 103, 123, 108, 89, 101, 76, 132, 112, 135, 77, 101, 171, 127, 119, 91, 116, 116, 135, 104, 65, 127, 123, 96, 119, 105, 108, 81, 91, 68, 88, 135, 136, 106, 122, 92, 148, 121, 86, 141, 99, 119, 114, 116, 114, 102, 90, 80, 117, 133, 129, 126, 113, 110, 120, 116, 149, 119], scales=[0.0766704f], zero_points=[188], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %288 = dl.dequantize(%287, input_scales=[0.0766704f], input_zero_points=[188]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %289 = sigmoid(%288) /* /model.9/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %290 = multiply(%288, %289) /* /model.9/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %291 = dl.quantize(%290, output_scales=[0.0211377f], output_zero_points=[13]) /* fake_quant_103 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %292 = fn (%FunctionVar_54_0: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_54_1: Tensor[(512, 512, 1, 1), uint8], %FunctionVar_54_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf7a9b8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %9 = (%FunctionVar_54_0, %FunctionVar_54_1, %FunctionVar_54_2, meta[relay.Constant][41] /* ty=Tensor[(512), float32] */, meta[relay.Constant][42] /* ty=Tensor[(512), int32] */, meta[relay.Constant][43] /* ty=Tensor[(512), int32] */, meta[relay.Constant][44] /* ty=Tensor[(512), int32] */, meta[relay.Constant][45] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%9, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0211377f], lhs_zero_points=[13], rhs_scales=[0.00465255f, 0.00517977f, 0.00475464f, 0.0036417f, 0.00430306f, 0.00532176f, 0.00430083f, 0.0040946f, 0.00418737f, 0.00397248f, 0.00474933f, 0.00402096f, 0.00437285f, 0.00460931f, 0.00497432f, 0.00420622f, 0.00510442f, 0.00542117f, 0.00471914f, 0.00416322f, 0.0046384f, 0.00440106f, 0.00413182f, 0.005155f, 0.00404835f, 0.00442988f, 0.00546739f, 0.00514644f, 0.00421299f, 0.00506875f, 0.00380778f, 0.00406626f, 0.00442773f, 0.00426924f, 0.00448223f, 0.00475263f, 0.00468412f, 0.00485145f, 0.00432559f, 0.00361497f, 0.00485089f, 0.00563585f, 0.00470841f, 0.00470606f, 0.00526025f, 0.00585222f, 0.0043042f, 0.00578365f, 0.00566463f, 0.00460553f, 0.00567302f, 0.00436059f, 0.00430384f, 0.00503861f, 0.00449847f, 0.00422165f, 0.00440212f, 0.004355f, 0.00464583f, 0.00524182f, 0.00433302f, 0.00477256f, 0.00310428f, 0.00398223f, 0.00579642f, 0.00393448f, 0.0048188f, 0.00423001f, 0.00441512f, 0.00435178f, 0.00491074f, 0.00480649f, 0.00434861f, 0.00537694f, 0.00439199f, 0.00482368f, 0.00432563f, 0.00549034f, 0.0131154f, 0.00456827f, 0.00384511f, 0.0051992f, 0.00464198f, 0.00401168f, 0.00480702f, 0.00382643f, 0.00471909f, 0.00402605f, 0.00461172f, 0.00627079f, 0.0051035f, 0.00426851f, 0.00415017f, 0.00507572f, 0.00582724f, 0.00411756f, 0.00395394f, 0.00416177f, 0.00507872f, 0.00377769f, 0.00361131f, 0.00514336f, 0.00576545f, 0.00436121f, 0.00405398f, 0.00445497f, 0.00555111f, 0.00468396f, 0.005199f, 0.00517743f, 0.00469345f, 0.00481224f, 0.00439764f, 0.00516207f, 0.00440551f, 0.00505062f, 0.00447577f, 0.00457706f, 0.00343892f, 0.00506481f, 0.0049385f, 0.004704f, 0.00434235f, 0.00465738f, 0.00415851f, 0.00377273f, 0.00378426f, 0.00402623f, 0.0040796f, 0.00575944f, 0.00442307f, 0.00460967f, 0.00461598f, 0.0047981f, 0.00459135f, 0.00477339f, 0.00432771f, 0.00456649f, 0.00580118f, 0.01207f, 0.00441011f, 0.00502838f, 0.00468828f, 0.00477387f, 0.00413074f, 0.00438871f, 0.00601535f, 0.00522095f, 0.00481857f, 0.00429507f, 0.00398065f, 0.00482288f, 0.00495217f, 0.0131813f, 0.00593886f, 0.00590933f, 0.00563686f, 0.0045939f, 0.00497222f, 0.00410275f, 0.00410644f, 0.00549859f, 0.00417416f, 0.0041099f, 0.00400806f, 0.00500132f, 0.00452245f, 0.00415413f, 0.00520412f, 0.00511519f, 0.0042348f, 0.00496525f, 0.005273f, 0.00551728f, 0.00414318f, 0.00454716f, 0.00611009f, 0.00453325f, 0.00265361f, 0.00542044f, 0.00489962f, 0.00472129f, 0.00470104f, 0.00403909f, 0.00600755f, 0.00412352f, 0.00557974f, 0.00523279f, 0.00385711f, 0.00499136f, 0.00486879f, 0.00476692f, 0.00440504f, 0.00574569f, 0.00458858f, 0.00433694f, 0.00448406f, 0.00410786f, 0.00453277f, 0.00467408f, 0.00519196f, 0.00403474f, 0.00442649f, 0.00456593f, 0.00511049f, 0.00477808f, 0.0043686f, 0.00499945f, 0.00435046f, 0.00536891f, 0.00432728f, 0.00499436f, 0.0045855f, 0.00768664f, 0.00507897f, 0.00476868f, 0.00525904f, 0.0061413f, 0.00407346f, 0.00479274f, 0.00432054f, 0.0138583f, 0.00435722f, 0.00541782f, 0.00522796f, 0.00428174f, 0.00418299f, 0.00434432f, 0.00399707f, 0.0053252f, 0.00372055f, 0.0049737f, 0.00470365f, 0.00596547f, 0.0042157f, 0.00576766f, 0.00435256f, 0.00449884f, 0.00427292f, 0.00510502f, 0.0048459f, 0.0045489f, 0.00438729f, 0.00461107f, 0.00535827f, 0.00393878f, 0.00498824f, 0.00447939f, 0.00433204f, 0.00503718f, 0.00404553f, 0.00487115f, 0.00482998f, 0.00533788f, 0.00488239f, 0.00524506f, 0.00341228f, 0.00271169f, 0.00434997f, 0.00269567f, 0.00553162f, 0.0054166f, 0.0052092f, 0.00293674f, 0.00485001f, 0.00407891f, 0.00422802f, 0.00430273f, 0.00352822f, 0.00290804f, 0.0048764f, 0.00358062f, 0.0034499f, 0.00379614f, 0.0089821f, 0.00704561f, 0.00429557f, 0.00769107f, 0.00517631f, 0.00604851f, 0.00363389f, 0.00386257f, 0.00428931f, 0.0125105f, 0.0027854f, 0.00298476f, 0.00261278f, 0.00330974f, 0.00241668f, 0.00504911f, 0.00389425f, 0.00376839f, 0.0047533f, 0.00343568f, 0.00618242f, 0.00418302f, 0.00552166f, 0.00565804f, 0.00264808f, 0.00529384f, 0.00344823f, 0.00337609f, 0.00330416f, 0.00313181f, 0.00292282f, 0.00291809f, 0.00306301f, 0.00319985f, 0.002949f, 0.00431625f, 0.00336411f, 0.00433708f, 0.00445666f, 0.004827f, 0.00452812f, 0.0029432f, 0.00290709f, 0.00393127f, 0.00275362f, 0.00387169f, 0.00811041f, 0.00342741f, 0.00355362f, 0.00360273f, 0.00506991f, 0.00385576f, 0.00415944f, 0.00352425f, 0.0023995f, 0.00363471f, 0.00278972f, 0.0111074f, 0.00304453f, 0.00479261f, 0.00275771f, 0.00614971f, 0.00454633f, 0.00361018f, 0.00323388f, 0.00322212f, 0.00637481f, 0.00313692f, 0.00520598f, 0.00770667f, 0.00501652f, 0.00373349f, 0.00248427f, 0.00354129f, 0.00468453f, 0.00473974f, 0.0028076f, 0.00292221f, 0.00405565f, 0.00309544f, 0.00281148f, 0.00299214f, 0.00682219f, 0.00262495f, 0.00933917f, 0.00244414f, 0.00407096f, 0.00331454f, 0.00382812f, 0.00446257f, 0.00340657f, 0.00781585f, 0.0043559f, 0.00507678f, 0.00240493f, 0.00340766f, 0.00509008f, 0.00339122f, 0.00248417f, 0.00375051f, 0.00456172f, 0.00352536f, 0.0118504f, 0.00330673f, 0.00343013f, 0.00334505f, 0.00278264f, 0.00269907f, 0.00724635f, 0.00563146f, 0.00336753f, 0.00260603f, 0.00404186f, 0.00236865f, 0.00335926f, 0.00277512f, 0.00609382f, 0.00858447f, 0.00413983f, 0.00370225f, 0.00364055f, 0.00587081f, 0.0034528f, 0.00449614f, 0.00304761f, 0.00720216f, 0.00432906f, 0.00602746f, 0.00327865f, 0.00431771f, 0.0108378f, 0.00444871f, 0.00606152f, 0.0029722f, 0.00644325f, 0.00376382f, 0.00254783f, 0.0028951f, 0.00340814f, 0.00547f, 0.00563728f, 0.00487076f, 0.00476257f, 0.0029624f, 0.00304828f, 0.00555736f, 0.0028649f, 0.00980826f, 0.00451996f, 0.00405744f, 0.00291001f, 0.00406472f, 0.00494353f, 0.00362293f, 0.00313068f, 0.00373301f, 0.00317481f, 0.00431218f, 0.00512072f, 0.00269842f, 0.0047325f, 0.00271137f, 0.00313408f, 0.00489376f, 0.00378532f, 0.00356642f, 0.00368076f, 0.00304145f, 0.00305584f, 0.00458813f, 0.00310362f, 0.00416086f, 0.00338762f, 0.00402777f, 0.00283551f, 0.00470945f, 0.011623f, 0.00373131f, 0.00276134f, 0.00584199f, 0.00379356f, 0.00661406f, 0.00397417f, 0.00278643f, 0.00260151f, 0.0071004f, 0.00389159f, 0.00601934f, 0.0071488f, 0.00336717f, 0.00438353f, 0.00329469f, 0.00332909f, 0.00378383f, 0.00320425f, 0.00259777f, 0.0038492f, 0.00339526f, 0.00459397f, 0.00670194f, 0.00290627f, 0.00316111f, 0.00436303f, 0.00327417f, 0.00409303f, 0.00352336f, 0.00288628f, 0.00358956f, 0.00404192f, 0.00359041f, 0.0038055f, 0.00292444f, 0.00479838f, 0.00276694f, 0.00429017f, 0.00670235f, 0.00502813f, 0.00440503f, 0.00443862f, 0.0126217f, 0.00396884f, 0.00322826f, 0.00480512f, 0.00299049f, 0.00423908f, 0.00465911f, 0.00466927f, 0.00484493f, 0.00269638f, 0.0061687f, 0.0028439f, 0.00481238f, 0.00435098f, 0.00333636f, 0.00463452f, 0.0072844f, 0.0027961f, 0.00288524f], rhs_zero_points=[111, 140, 119, 131, 107, 117, 115, 135, 128, 116, 133, 111, 130, 126, 116, 137, 142, 130, 124, 125, 144, 116, 114, 112, 121, 117, 114, 117, 144, 133, 122, 129, 123, 122, 133, 150, 123, 131, 121, 116, 123, 136, 121, 120, 109, 95, 119, 91, 86, 107, 114, 126, 130, 141, 126, 107, 125, 113, 125, 111, 122, 134, 128, 109, 119, 118, 143, 141, 122, 124, 88, 126, 106, 100, 134, 109, 131, 122, 163, 120, 123, 123, 108, 125, 124, 120, 89, 114, 103, 82, 105, 130, 143, 125, 109, 133, 125, 115, 130, 123, 113, 110, 107, 111, 116, 121, 112, 117, 127, 135, 127, 115, 108, 118, 129, 117, 102, 127, 121, 107, 120, 142, 125, 118, 132, 114, 120, 128, 117, 93, 132, 108, 108, 134, 103, 121, 126, 129, 129, 168, 132, 131, 130, 134, 110, 154, 131, 119, 124, 112, 102, 121, 111, 85, 105, 79, 145, 122, 131, 100, 130, 96, 128, 153, 126, 124, 107, 118, 116, 113, 119, 103, 102, 126, 115, 108, 100, 118, 128, 129, 140, 122, 113, 139, 100, 130, 126, 125, 117, 128, 128, 119, 116, 132, 115, 133, 101, 119, 121, 119, 132, 113, 124, 115, 123, 128, 139, 132, 125, 114, 100, 171, 116, 56, 121, 125, 106, 124, 114, 102, 127, 88, 121, 133, 106, 111, 116, 132, 125, 112, 126, 150, 109, 101, 122, 104, 116, 128, 115, 133, 132, 130, 116, 100, 121, 106, 127, 117, 132, 104, 121, 133, 116, 117, 110, 92, 118, 95, 105, 125, 133, 103, 99, 114, 101, 124, 132, 99, 113, 144, 135, 159, 90, 108, 195, 108, 119, 214, 89, 136, 99, 121, 96, 109, 160, 118, 106, 119, 137, 150, 121, 111, 78, 124, 101, 118, 200, 121, 148, 113, 122, 127, 150, 134, 146, 101, 138, 133, 134, 116, 111, 112, 138, 125, 118, 93, 110, 169, 144, 121, 152, 122, 139, 111, 125, 144, 120, 104, 152, 126, 123, 80, 125, 91, 132, 170, 112, 157, 118, 120, 120, 101, 78, 140, 174, 106, 133, 129, 101, 135, 142, 130, 106, 140, 123, 108, 105, 123, 223, 134, 102, 109, 88, 127, 143, 100, 130, 110, 131, 115, 97, 133, 131, 136, 92, 129, 166, 148, 121, 117, 144, 103, 71, 172, 161, 137, 133, 121, 117, 116, 150, 90, 100, 127, 130, 131, 148, 112, 135, 117, 106, 148, 142, 152, 176, 155, 91, 112, 132, 118, 137, 155, 106, 138, 95, 115, 104, 113, 102, 75, 124, 188, 132, 132, 130, 118, 103, 145, 143, 94, 135, 121, 154, 107, 127, 140, 117, 116, 156, 83, 160, 93, 98, 173, 152, 122, 144, 107, 136, 113, 222, 175, 123, 126, 112, 111, 132, 128, 145, 88, 88, 137, 158, 134, 142, 151, 121, 94, 118, 130, 145, 120, 165, 89, 149, 118, 98, 134, 97, 173, 140, 136, 117, 109, 160, 167, 128, 131, 117, 108, 182, 108, 121, 72, 85, 109, 125, 132, 84, 104, 112, 107, 149, 103, 113, 115, 127, 116, 165, 89, 132, 146], scales=[0.0575897f], zero_points=[119]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %293 = %292(%291, meta[relay.Constant][277] /* ty=Tensor[(512, 512, 1, 1), uint8] */, meta[relay.Constant][278] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0211377f], lhs_zero_points=[13], rhs_scales=[0.00465255f, 0.00517977f, 0.00475464f, 0.0036417f, 0.00430306f, 0.00532176f, 0.00430083f, 0.0040946f, 0.00418737f, 0.00397248f, 0.00474933f, 0.00402096f, 0.00437285f, 0.00460931f, 0.00497432f, 0.00420622f, 0.00510442f, 0.00542117f, 0.00471914f, 0.00416322f, 0.0046384f, 0.00440106f, 0.00413182f, 0.005155f, 0.00404835f, 0.00442988f, 0.00546739f, 0.00514644f, 0.00421299f, 0.00506875f, 0.00380778f, 0.00406626f, 0.00442773f, 0.00426924f, 0.00448223f, 0.00475263f, 0.00468412f, 0.00485145f, 0.00432559f, 0.00361497f, 0.00485089f, 0.00563585f, 0.00470841f, 0.00470606f, 0.00526025f, 0.00585222f, 0.0043042f, 0.00578365f, 0.00566463f, 0.00460553f, 0.00567302f, 0.00436059f, 0.00430384f, 0.00503861f, 0.00449847f, 0.00422165f, 0.00440212f, 0.004355f, 0.00464583f, 0.00524182f, 0.00433302f, 0.00477256f, 0.00310428f, 0.00398223f, 0.00579642f, 0.00393448f, 0.0048188f, 0.00423001f, 0.00441512f, 0.00435178f, 0.00491074f, 0.00480649f, 0.00434861f, 0.00537694f, 0.00439199f, 0.00482368f, 0.00432563f, 0.00549034f, 0.0131154f, 0.00456827f, 0.00384511f, 0.0051992f, 0.00464198f, 0.00401168f, 0.00480702f, 0.00382643f, 0.00471909f, 0.00402605f, 0.00461172f, 0.00627079f, 0.0051035f, 0.00426851f, 0.00415017f, 0.00507572f, 0.00582724f, 0.00411756f, 0.00395394f, 0.00416177f, 0.00507872f, 0.00377769f, 0.00361131f, 0.00514336f, 0.00576545f, 0.00436121f, 0.00405398f, 0.00445497f, 0.00555111f, 0.00468396f, 0.005199f, 0.00517743f, 0.00469345f, 0.00481224f, 0.00439764f, 0.00516207f, 0.00440551f, 0.00505062f, 0.00447577f, 0.00457706f, 0.00343892f, 0.00506481f, 0.0049385f, 0.004704f, 0.00434235f, 0.00465738f, 0.00415851f, 0.00377273f, 0.00378426f, 0.00402623f, 0.0040796f, 0.00575944f, 0.00442307f, 0.00460967f, 0.00461598f, 0.0047981f, 0.00459135f, 0.00477339f, 0.00432771f, 0.00456649f, 0.00580118f, 0.01207f, 0.00441011f, 0.00502838f, 0.00468828f, 0.00477387f, 0.00413074f, 0.00438871f, 0.00601535f, 0.00522095f, 0.00481857f, 0.00429507f, 0.00398065f, 0.00482288f, 0.00495217f, 0.0131813f, 0.00593886f, 0.00590933f, 0.00563686f, 0.0045939f, 0.00497222f, 0.00410275f, 0.00410644f, 0.00549859f, 0.00417416f, 0.0041099f, 0.00400806f, 0.00500132f, 0.00452245f, 0.00415413f, 0.00520412f, 0.00511519f, 0.0042348f, 0.00496525f, 0.005273f, 0.00551728f, 0.00414318f, 0.00454716f, 0.00611009f, 0.00453325f, 0.00265361f, 0.00542044f, 0.00489962f, 0.00472129f, 0.00470104f, 0.00403909f, 0.00600755f, 0.00412352f, 0.00557974f, 0.00523279f, 0.00385711f, 0.00499136f, 0.00486879f, 0.00476692f, 0.00440504f, 0.00574569f, 0.00458858f, 0.00433694f, 0.00448406f, 0.00410786f, 0.00453277f, 0.00467408f, 0.00519196f, 0.00403474f, 0.00442649f, 0.00456593f, 0.00511049f, 0.00477808f, 0.0043686f, 0.00499945f, 0.00435046f, 0.00536891f, 0.00432728f, 0.00499436f, 0.0045855f, 0.00768664f, 0.00507897f, 0.00476868f, 0.00525904f, 0.0061413f, 0.00407346f, 0.00479274f, 0.00432054f, 0.0138583f, 0.00435722f, 0.00541782f, 0.00522796f, 0.00428174f, 0.00418299f, 0.00434432f, 0.00399707f, 0.0053252f, 0.00372055f, 0.0049737f, 0.00470365f, 0.00596547f, 0.0042157f, 0.00576766f, 0.00435256f, 0.00449884f, 0.00427292f, 0.00510502f, 0.0048459f, 0.0045489f, 0.00438729f, 0.00461107f, 0.00535827f, 0.00393878f, 0.00498824f, 0.00447939f, 0.00433204f, 0.00503718f, 0.00404553f, 0.00487115f, 0.00482998f, 0.00533788f, 0.00488239f, 0.00524506f, 0.00341228f, 0.00271169f, 0.00434997f, 0.00269567f, 0.00553162f, 0.0054166f, 0.0052092f, 0.00293674f, 0.00485001f, 0.00407891f, 0.00422802f, 0.00430273f, 0.00352822f, 0.00290804f, 0.0048764f, 0.00358062f, 0.0034499f, 0.00379614f, 0.0089821f, 0.00704561f, 0.00429557f, 0.00769107f, 0.00517631f, 0.00604851f, 0.00363389f, 0.00386257f, 0.00428931f, 0.0125105f, 0.0027854f, 0.00298476f, 0.00261278f, 0.00330974f, 0.00241668f, 0.00504911f, 0.00389425f, 0.00376839f, 0.0047533f, 0.00343568f, 0.00618242f, 0.00418302f, 0.00552166f, 0.00565804f, 0.00264808f, 0.00529384f, 0.00344823f, 0.00337609f, 0.00330416f, 0.00313181f, 0.00292282f, 0.00291809f, 0.00306301f, 0.00319985f, 0.002949f, 0.00431625f, 0.00336411f, 0.00433708f, 0.00445666f, 0.004827f, 0.00452812f, 0.0029432f, 0.00290709f, 0.00393127f, 0.00275362f, 0.00387169f, 0.00811041f, 0.00342741f, 0.00355362f, 0.00360273f, 0.00506991f, 0.00385576f, 0.00415944f, 0.00352425f, 0.0023995f, 0.00363471f, 0.00278972f, 0.0111074f, 0.00304453f, 0.00479261f, 0.00275771f, 0.00614971f, 0.00454633f, 0.00361018f, 0.00323388f, 0.00322212f, 0.00637481f, 0.00313692f, 0.00520598f, 0.00770667f, 0.00501652f, 0.00373349f, 0.00248427f, 0.00354129f, 0.00468453f, 0.00473974f, 0.0028076f, 0.00292221f, 0.00405565f, 0.00309544f, 0.00281148f, 0.00299214f, 0.00682219f, 0.00262495f, 0.00933917f, 0.00244414f, 0.00407096f, 0.00331454f, 0.00382812f, 0.00446257f, 0.00340657f, 0.00781585f, 0.0043559f, 0.00507678f, 0.00240493f, 0.00340766f, 0.00509008f, 0.00339122f, 0.00248417f, 0.00375051f, 0.00456172f, 0.00352536f, 0.0118504f, 0.00330673f, 0.00343013f, 0.00334505f, 0.00278264f, 0.00269907f, 0.00724635f, 0.00563146f, 0.00336753f, 0.00260603f, 0.00404186f, 0.00236865f, 0.00335926f, 0.00277512f, 0.00609382f, 0.00858447f, 0.00413983f, 0.00370225f, 0.00364055f, 0.00587081f, 0.0034528f, 0.00449614f, 0.00304761f, 0.00720216f, 0.00432906f, 0.00602746f, 0.00327865f, 0.00431771f, 0.0108378f, 0.00444871f, 0.00606152f, 0.0029722f, 0.00644325f, 0.00376382f, 0.00254783f, 0.0028951f, 0.00340814f, 0.00547f, 0.00563728f, 0.00487076f, 0.00476257f, 0.0029624f, 0.00304828f, 0.00555736f, 0.0028649f, 0.00980826f, 0.00451996f, 0.00405744f, 0.00291001f, 0.00406472f, 0.00494353f, 0.00362293f, 0.00313068f, 0.00373301f, 0.00317481f, 0.00431218f, 0.00512072f, 0.00269842f, 0.0047325f, 0.00271137f, 0.00313408f, 0.00489376f, 0.00378532f, 0.00356642f, 0.00368076f, 0.00304145f, 0.00305584f, 0.00458813f, 0.00310362f, 0.00416086f, 0.00338762f, 0.00402777f, 0.00283551f, 0.00470945f, 0.011623f, 0.00373131f, 0.00276134f, 0.00584199f, 0.00379356f, 0.00661406f, 0.00397417f, 0.00278643f, 0.00260151f, 0.0071004f, 0.00389159f, 0.00601934f, 0.0071488f, 0.00336717f, 0.00438353f, 0.00329469f, 0.00332909f, 0.00378383f, 0.00320425f, 0.00259777f, 0.0038492f, 0.00339526f, 0.00459397f, 0.00670194f, 0.00290627f, 0.00316111f, 0.00436303f, 0.00327417f, 0.00409303f, 0.00352336f, 0.00288628f, 0.00358956f, 0.00404192f, 0.00359041f, 0.0038055f, 0.00292444f, 0.00479838f, 0.00276694f, 0.00429017f, 0.00670235f, 0.00502813f, 0.00440503f, 0.00443862f, 0.0126217f, 0.00396884f, 0.00322826f, 0.00480512f, 0.00299049f, 0.00423908f, 0.00465911f, 0.00466927f, 0.00484493f, 0.00269638f, 0.0061687f, 0.0028439f, 0.00481238f, 0.00435098f, 0.00333636f, 0.00463452f, 0.0072844f, 0.0027961f, 0.00288524f], rhs_zero_points=[111, 140, 119, 131, 107, 117, 115, 135, 128, 116, 133, 111, 130, 126, 116, 137, 142, 130, 124, 125, 144, 116, 114, 112, 121, 117, 114, 117, 144, 133, 122, 129, 123, 122, 133, 150, 123, 131, 121, 116, 123, 136, 121, 120, 109, 95, 119, 91, 86, 107, 114, 126, 130, 141, 126, 107, 125, 113, 125, 111, 122, 134, 128, 109, 119, 118, 143, 141, 122, 124, 88, 126, 106, 100, 134, 109, 131, 122, 163, 120, 123, 123, 108, 125, 124, 120, 89, 114, 103, 82, 105, 130, 143, 125, 109, 133, 125, 115, 130, 123, 113, 110, 107, 111, 116, 121, 112, 117, 127, 135, 127, 115, 108, 118, 129, 117, 102, 127, 121, 107, 120, 142, 125, 118, 132, 114, 120, 128, 117, 93, 132, 108, 108, 134, 103, 121, 126, 129, 129, 168, 132, 131, 130, 134, 110, 154, 131, 119, 124, 112, 102, 121, 111, 85, 105, 79, 145, 122, 131, 100, 130, 96, 128, 153, 126, 124, 107, 118, 116, 113, 119, 103, 102, 126, 115, 108, 100, 118, 128, 129, 140, 122, 113, 139, 100, 130, 126, 125, 117, 128, 128, 119, 116, 132, 115, 133, 101, 119, 121, 119, 132, 113, 124, 115, 123, 128, 139, 132, 125, 114, 100, 171, 116, 56, 121, 125, 106, 124, 114, 102, 127, 88, 121, 133, 106, 111, 116, 132, 125, 112, 126, 150, 109, 101, 122, 104, 116, 128, 115, 133, 132, 130, 116, 100, 121, 106, 127, 117, 132, 104, 121, 133, 116, 117, 110, 92, 118, 95, 105, 125, 133, 103, 99, 114, 101, 124, 132, 99, 113, 144, 135, 159, 90, 108, 195, 108, 119, 214, 89, 136, 99, 121, 96, 109, 160, 118, 106, 119, 137, 150, 121, 111, 78, 124, 101, 118, 200, 121, 148, 113, 122, 127, 150, 134, 146, 101, 138, 133, 134, 116, 111, 112, 138, 125, 118, 93, 110, 169, 144, 121, 152, 122, 139, 111, 125, 144, 120, 104, 152, 126, 123, 80, 125, 91, 132, 170, 112, 157, 118, 120, 120, 101, 78, 140, 174, 106, 133, 129, 101, 135, 142, 130, 106, 140, 123, 108, 105, 123, 223, 134, 102, 109, 88, 127, 143, 100, 130, 110, 131, 115, 97, 133, 131, 136, 92, 129, 166, 148, 121, 117, 144, 103, 71, 172, 161, 137, 133, 121, 117, 116, 150, 90, 100, 127, 130, 131, 148, 112, 135, 117, 106, 148, 142, 152, 176, 155, 91, 112, 132, 118, 137, 155, 106, 138, 95, 115, 104, 113, 102, 75, 124, 188, 132, 132, 130, 118, 103, 145, 143, 94, 135, 121, 154, 107, 127, 140, 117, 116, 156, 83, 160, 93, 98, 173, 152, 122, 144, 107, 136, 113, 222, 175, 123, 126, 112, 111, 132, 128, 145, 88, 88, 137, 158, 134, 142, 151, 121, 94, 118, 130, 145, 120, 165, 89, 149, 118, 98, 134, 97, 173, 140, 136, 117, 109, 160, 167, 128, 131, 117, 108, 182, 108, 121, 72, 85, 109, 125, 132, 84, 104, 112, 107, 149, 103, 113, 115, 127, 116, 165, 89, 132, 146], scales=[0.0575897f], zero_points=[119], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %294 = dl.dequantize(%293, input_scales=[0.0575897f], input_zero_points=[119]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %295 = sigmoid(%294) /* /model.10/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %296 = multiply(%294, %295) /* /model.10/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %297 = fn (%FunctionVar_6_0: Tensor[(1, 512, 20, 20), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab063988)) -> (Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) {
    split(%FunctionVar_6_0, indices_or_sections=[256], axis=1) /* /model.10/Split_output_0 */ /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */
  };
  %298 = %297(%296, indices_or_sections=[256], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */;
  %303 = %298.1;
  %304 = dl.quantize(%303, output_scales=[0.0255063f], output_zero_points=[11]) /* fake_quant_106 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %305 = fn (%FunctionVar_53_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_53_1: Tensor[(512, 256, 1, 1), uint8], %FunctionVar_53_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf45fe8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %302 = (%FunctionVar_53_0, %FunctionVar_53_1, %FunctionVar_53_2, meta[relay.Constant][284] /* ty=Tensor[(512), float32] */, meta[relay.Constant][285] /* ty=Tensor[(512), int32] */, meta[relay.Constant][286] /* ty=Tensor[(512), int32] */, meta[relay.Constant][287] /* ty=Tensor[(512), int32] */, meta[relay.Constant][288] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%302, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0255063f], lhs_zero_points=[11], rhs_scales=[0.00100818f, 0.00123922f, 0.00151065f, 0.00094507f, 0.00101941f, 0.001007f, 0.00116012f, 0.00100042f, 0.0014081f, 0.00111284f, 0.00170309f, 0.00095144f, 0.00124512f, 0.000897645f, 0.000836945f, 0.00106193f, 0.00124081f, 0.0009273f, 0.00109147f, 0.0014182f, 0.00121436f, 0.00152446f, 0.00182031f, 0.00106904f, 0.00113869f, 0.00161165f, 0.00106833f, 0.00105514f, 0.00089939f, 0.0020809f, 0.00101071f, 0.0011325f, 0.00125779f, 0.00108223f, 0.00150572f, 0.00111614f, 0.00150868f, 0.000917361f, 0.00182117f, 0.00151676f, 0.00157031f, 0.00190213f, 0.00200527f, 0.00164705f, 0.0016302f, 0.00109776f, 0.00142009f, 0.0015132f, 0.00102742f, 0.00132467f, 0.00114694f, 0.00136244f, 0.00141436f, 0.00221416f, 0.00253213f, 0.00128373f, 0.0015265f, 0.00193261f, 0.00136717f, 0.00118579f, 0.00122991f, 0.00222076f, 0.00145238f, 0.000987592f, 0.00285714f, 0.00214275f, 0.00193497f, 0.00175475f, 0.00144159f, 0.00219688f, 0.00270437f, 0.00211753f, 0.00101373f, 0.000782813f, 0.00183137f, 0.00197894f, 0.00245079f, 0.00140262f, 0.00151805f, 0.00195157f, 0.00287059f, 0.00285054f, 0.00166781f, 0.00221737f, 0.00230413f, 0.00158546f, 0.00331121f, 0.000320125f, 0.000923203f, 0.000950204f, 0.00142142f, 0.00202457f, 0.00114028f, 0.00109257f, 0.00485991f, 0.00268598f, 0.000798504f, 0.00169586f, 0.0020762f, 0.003916f, 0.00153178f, 0.00159837f, 0.0013874f, 0.00117258f, 0.00104627f, 0.00249876f, 0.00189092f, 0.00105508f, 0.00193684f, 0.00200061f, 0.00282789f, 0.00173497f, 0.00127415f, 0.00225267f, 0.00365056f, 0.0037377f, 0.00188647f, 0.00295901f, 0.00216656f, 0.00229866f, 0.00245914f, 0.00212891f, 0.00120792f, 0.00134326f, 0.00237295f, 0.00257384f, 0.00309329f, 0.0018731f, 0.00177182f, 0.0021629f, 0.00270953f, 0.00293417f, 0.00223192f, 0.00164712f, 0.00189806f, 0.000865993f, 0.00224112f, 0.0027115f, 0.00311809f, 0.00192766f, 0.00225165f, 0.00270739f, 0.00269116f, 0.00506855f, 0.00340515f, 0.00277156f, 0.00193938f, 0.00329292f, 0.00346488f, 0.00382418f, 0.00192758f, 0.00283128f, 0.00219015f, 0.00184791f, 0.00243251f, 0.00214936f, 0.00258788f, 0.00208903f, 0.00270786f, 0.00207528f, 0.0020352f, 0.00186483f, 0.00203171f, 0.00251043f, 0.00187257f, 0.00177761f, 0.00207659f, 0.00367084f, 0.00212471f, 0.0017702f, 0.00261356f, 0.0020875f, 0.00154912f, 0.00252011f, 0.00343666f, 0.00235655f, 0.00319147f, 0.00221346f, 0.00204534f, 0.00282888f, 0.00240608f, 0.00259172f, 0.00198697f, 0.00229234f, 0.00239751f, 0.00187084f, 0.00225883f, 0.00178804f, 0.00235708f, 0.00173291f, 0.00223292f, 0.00172988f, 0.00217083f, 0.00166778f, 0.00245986f, 0.00248713f, 0.00215898f, 0.00239095f, 0.00263659f, 0.00247353f, 0.00325662f, 0.00193179f, 0.0025129f, 0.00234873f, 0.00191262f, 0.00181993f, 0.00280656f, 0.00203947f, 0.0026423f, 0.00247424f, 0.00257558f, 0.0027451f, 0.00228356f, 0.00346274f, 0.00217718f, 0.00225798f, 0.0023098f, 0.003004f, 0.00256895f, 0.00233623f, 0.00258807f, 0.00206289f, 0.00216425f, 0.00231703f, 0.00243347f, 0.00260119f, 0.00263355f, 0.00243599f, 0.00222249f, 0.00246125f, 0.00234621f, 0.00269513f, 0.00230649f, 0.00186325f, 0.00270365f, 0.00273424f, 0.00251086f, 0.00205097f, 0.00212913f, 0.00227248f, 0.00255931f, 0.00254003f, 0.00262864f, 0.00216671f, 0.00240815f, 0.00251269f, 0.00237135f, 0.00218545f, 0.00204243f, 0.00266016f, 0.00166171f, 0.00233076f, 0.0024512f, 0.00160762f, 0.00240137f, 0.00240257f, 0.00217307f, 0.00229476f, 0.000915588f, 0.00230184f, 0.00161239f, 0.00218729f, 0.00243474f, 0.00257516f, 0.00185127f, 0.00228466f, 0.00162791f, 0.00251072f, 0.00177697f, 0.00193002f, 0.0025244f, 0.00208187f, 0.00191987f, 0.0023817f, 0.00251445f, 0.00201299f, 0.00234875f, 0.000987066f, 0.00244867f, 0.00186953f, 0.00220346f, 0.00230895f, 0.00144803f, 0.00210955f, 0.00184383f, 0.00279546f, 0.00199788f, 0.00169749f, 0.00272533f, 0.00251998f, 0.00277864f, 0.00261246f, 0.00188888f, 0.00233511f, 0.00320714f, 0.00233722f, 0.001915f, 0.00222146f, 0.00251121f, 0.00324743f, 0.00193989f, 0.00179327f, 0.00237146f, 0.00237008f, 0.00161423f, 0.002462f, 0.00284909f, 0.00167708f, 0.00258012f, 0.00269532f, 0.00286599f, 0.00200638f, 0.00222123f, 0.00213226f, 0.00247057f, 0.00246395f, 0.0023254f, 0.00291826f, 0.00272807f, 0.00156766f, 0.00212415f, 0.000510142f, 0.00295189f, 0.00229499f, 0.0029768f, 0.00156852f, 0.00105093f, 0.00260759f, 0.00415338f, 0.00175566f, 0.00137419f, 0.00143191f, 0.0023714f, 0.00158332f, 0.00111593f, 0.000612271f, 0.0018652f, 0.00251315f, 0.00306658f, 0.00352795f, 0.00225575f, 0.00209253f, 0.00242409f, 0.00158028f, 0.00125295f, 0.00243895f, 0.00173448f, 0.00245845f, 0.0016397f, 0.0019711f, 0.000989183f, 0.00212011f, 0.00240389f, 0.00249444f, 0.00244558f, 0.00220817f, 0.00240597f, 0.00286842f, 0.000889734f, 0.00221709f, 0.00108727f, 0.00174159f, 0.000939014f, 0.0021514f, 0.00239972f, 0.00210497f, 0.00205923f, 0.00353773f, 0.00232679f, 0.0023307f, 0.00180153f, 0.00224559f, 0.00248082f, 0.00215825f, 0.00259815f, 0.00201967f, 0.00255982f, 0.0016266f, 0.00377166f, 0.00267704f, 0.00134879f, 0.00210607f, 0.00247595f, 0.0010946f, 0.00306911f, 0.00133277f, 0.00222687f, 0.00120706f, 0.00290873f, 0.00347746f, 0.00176183f, 0.00204447f, 0.002373f, 0.00284793f, 0.00229568f, 0.0024471f, 0.00202566f, 0.00134335f, 0.00153353f, 0.00169055f, 0.00183197f, 0.00282075f, 0.000631667f, 0.00208996f, 0.00167924f, 0.00198528f, 0.00212102f, 0.00218504f, 0.00182758f, 0.00187414f, 0.0016294f, 0.00164394f, 0.00200227f, 0.00236933f, 0.00267115f, 0.00180175f, 0.00205735f, 0.00205741f, 0.0022054f, 0.00309303f, 0.00195616f, 0.00207805f, 0.00245608f, 0.00232263f, 0.00250358f, 0.00265366f, 0.00224678f, 0.00171853f, 0.00192391f, 0.00182219f, 0.00240344f, 0.00166916f, 0.00185318f, 0.00264068f, 0.00463235f, 0.00207372f, 0.00278006f, 0.00174468f, 0.00212716f, 0.00159525f, 0.00246927f, 0.00182157f, 0.00140501f, 0.00200579f, 0.00235637f, 0.00216988f, 0.00312915f, 0.00206938f, 0.0022859f, 0.00118829f, 0.00193753f, 0.00239687f, 0.00226515f, 0.00178723f, 0.00141918f, 0.00154574f, 0.0034896f, 0.00261576f, 0.00243686f, 0.00279749f, 0.00237514f, 0.0022706f, 0.00264993f, 0.00212844f, 0.00256601f, 0.00192504f, 0.00209868f, 0.00184442f, 0.00121919f, 0.00292756f, 0.00247856f, 0.00345277f, 0.00174567f, 0.00187884f, 0.00214909f, 0.00266325f, 0.00211264f, 0.00277224f, 0.00260928f, 0.00283624f, 0.00357505f, 0.0026122f, 0.00310925f, 0.00287288f, 0.00166526f, 0.00142352f, 0.0024865f, 0.0028454f, 0.00287274f, 0.00259862f, 0.00262059f, 0.00180052f, 0.002188f, 0.00219396f, 0.00241507f, 0.00151033f, 0.00274697f, 0.000453485f, 0.00228467f, 0.0020886f, 0.00332515f, 0.0041453f, 0.00155344f, 0.00217054f, 0.00146087f, 0.00303499f, 0.00175677f, 0.00318216f, 0.00250331f, 0.00248451f, 0.00270206f, 0.00332082f], rhs_zero_points=[133, 95, 142, 154, 125, 124, 134, 124, 133, 123, 110, 137, 168, 127, 117, 103, 124, 134, 101, 145, 105, 149, 166, 105, 120, 105, 128, 142, 142, 113, 153, 134, 105, 125, 90, 130, 116, 122, 80, 141, 86, 150, 118, 99, 102, 127, 98, 105, 122, 112, 108, 144, 100, 167, 159, 120, 139, 121, 120, 135, 121, 128, 99, 122, 104, 146, 121, 142, 141, 132, 122, 141, 119, 168, 138, 121, 106, 134, 103, 115, 119, 139, 113, 134, 124, 128, 89, 125, 123, 134, 154, 140, 149, 117, 81, 142, 127, 128, 143, 177, 147, 125, 92, 114, 149, 142, 133, 121, 124, 143, 132, 133, 122, 131, 163, 165, 137, 106, 144, 148, 140, 137, 111, 107, 111, 127, 159, 87, 146, 108, 143, 119, 129, 128, 85, 111, 128, 155, 101, 125, 109, 129, 151, 117, 141, 130, 143, 134, 110, 110, 151, 152, 101, 129, 122, 134, 134, 113, 139, 119, 153, 148, 120, 134, 120, 173, 158, 165, 70, 120, 142, 149, 140, 114, 143, 107, 116, 132, 91, 115, 155, 148, 111, 133, 106, 102, 138, 113, 107, 126, 96, 144, 135, 114, 149, 135, 135, 151, 122, 148, 159, 122, 117, 130, 130, 119, 114, 136, 105, 127, 123, 124, 118, 133, 130, 133, 143, 92, 142, 124, 107, 111, 119, 126, 145, 129, 138, 140, 136, 124, 117, 117, 115, 134, 118, 108, 155, 114, 157, 105, 116, 129, 135, 133, 128, 112, 125, 140, 137, 123, 136, 136, 98, 155, 143, 128, 127, 125, 82, 128, 137, 90, 101, 96, 129, 121, 96, 119, 110, 143, 128, 158, 145, 119, 119, 114, 112, 127, 170, 133, 113, 118, 105, 165, 119, 126, 103, 109, 139, 101, 96, 149, 100, 139, 118, 159, 119, 125, 167, 137, 131, 138, 162, 123, 120, 121, 148, 102, 112, 146, 111, 133, 135, 95, 68, 110, 124, 125, 126, 150, 134, 170, 154, 139, 155, 119, 140, 154, 171, 141, 139, 141, 157, 126, 147, 139, 128, 124, 92, 123, 117, 128, 143, 134, 127, 114, 110, 114, 146, 146, 121, 153, 124, 141, 156, 137, 146, 94, 131, 109, 120, 98, 134, 121, 116, 140, 135, 112, 157, 113, 134, 119, 130, 126, 91, 93, 127, 136, 102, 149, 133, 148, 158, 113, 102, 149, 146, 140, 156, 131, 156, 105, 99, 147, 139, 128, 156, 133, 126, 131, 131, 118, 106, 132, 126, 114, 139, 124, 159, 91, 158, 112, 106, 121, 112, 165, 157, 125, 144, 77, 102, 105, 152, 104, 96, 85, 142, 143, 198, 134, 156, 148, 67, 109, 54, 58, 105, 179, 133, 93, 66, 143, 164, 136, 151, 90, 139, 106, 124, 114, 147, 137, 129, 136, 132, 141, 113, 130, 117, 117, 134, 118, 100, 124, 116, 122, 136, 142, 109, 145, 130, 127, 139, 143, 141, 124, 127, 120, 134, 115, 136, 107, 102, 124, 115, 90, 113, 125, 125, 127, 125, 125, 110, 135, 113, 130, 122, 110, 131, 125, 145, 145, 96, 114, 97, 119, 146, 118, 154, 99, 117, 169], scales=[0.0540297f], zero_points=[0]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %306 = %305(%304, meta[relay.Constant][289] /* ty=Tensor[(512, 256, 1, 1), uint8] */, meta[relay.Constant][290] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0255063f], lhs_zero_points=[11], rhs_scales=[0.00100818f, 0.00123922f, 0.00151065f, 0.00094507f, 0.00101941f, 0.001007f, 0.00116012f, 0.00100042f, 0.0014081f, 0.00111284f, 0.00170309f, 0.00095144f, 0.00124512f, 0.000897645f, 0.000836945f, 0.00106193f, 0.00124081f, 0.0009273f, 0.00109147f, 0.0014182f, 0.00121436f, 0.00152446f, 0.00182031f, 0.00106904f, 0.00113869f, 0.00161165f, 0.00106833f, 0.00105514f, 0.00089939f, 0.0020809f, 0.00101071f, 0.0011325f, 0.00125779f, 0.00108223f, 0.00150572f, 0.00111614f, 0.00150868f, 0.000917361f, 0.00182117f, 0.00151676f, 0.00157031f, 0.00190213f, 0.00200527f, 0.00164705f, 0.0016302f, 0.00109776f, 0.00142009f, 0.0015132f, 0.00102742f, 0.00132467f, 0.00114694f, 0.00136244f, 0.00141436f, 0.00221416f, 0.00253213f, 0.00128373f, 0.0015265f, 0.00193261f, 0.00136717f, 0.00118579f, 0.00122991f, 0.00222076f, 0.00145238f, 0.000987592f, 0.00285714f, 0.00214275f, 0.00193497f, 0.00175475f, 0.00144159f, 0.00219688f, 0.00270437f, 0.00211753f, 0.00101373f, 0.000782813f, 0.00183137f, 0.00197894f, 0.00245079f, 0.00140262f, 0.00151805f, 0.00195157f, 0.00287059f, 0.00285054f, 0.00166781f, 0.00221737f, 0.00230413f, 0.00158546f, 0.00331121f, 0.000320125f, 0.000923203f, 0.000950204f, 0.00142142f, 0.00202457f, 0.00114028f, 0.00109257f, 0.00485991f, 0.00268598f, 0.000798504f, 0.00169586f, 0.0020762f, 0.003916f, 0.00153178f, 0.00159837f, 0.0013874f, 0.00117258f, 0.00104627f, 0.00249876f, 0.00189092f, 0.00105508f, 0.00193684f, 0.00200061f, 0.00282789f, 0.00173497f, 0.00127415f, 0.00225267f, 0.00365056f, 0.0037377f, 0.00188647f, 0.00295901f, 0.00216656f, 0.00229866f, 0.00245914f, 0.00212891f, 0.00120792f, 0.00134326f, 0.00237295f, 0.00257384f, 0.00309329f, 0.0018731f, 0.00177182f, 0.0021629f, 0.00270953f, 0.00293417f, 0.00223192f, 0.00164712f, 0.00189806f, 0.000865993f, 0.00224112f, 0.0027115f, 0.00311809f, 0.00192766f, 0.00225165f, 0.00270739f, 0.00269116f, 0.00506855f, 0.00340515f, 0.00277156f, 0.00193938f, 0.00329292f, 0.00346488f, 0.00382418f, 0.00192758f, 0.00283128f, 0.00219015f, 0.00184791f, 0.00243251f, 0.00214936f, 0.00258788f, 0.00208903f, 0.00270786f, 0.00207528f, 0.0020352f, 0.00186483f, 0.00203171f, 0.00251043f, 0.00187257f, 0.00177761f, 0.00207659f, 0.00367084f, 0.00212471f, 0.0017702f, 0.00261356f, 0.0020875f, 0.00154912f, 0.00252011f, 0.00343666f, 0.00235655f, 0.00319147f, 0.00221346f, 0.00204534f, 0.00282888f, 0.00240608f, 0.00259172f, 0.00198697f, 0.00229234f, 0.00239751f, 0.00187084f, 0.00225883f, 0.00178804f, 0.00235708f, 0.00173291f, 0.00223292f, 0.00172988f, 0.00217083f, 0.00166778f, 0.00245986f, 0.00248713f, 0.00215898f, 0.00239095f, 0.00263659f, 0.00247353f, 0.00325662f, 0.00193179f, 0.0025129f, 0.00234873f, 0.00191262f, 0.00181993f, 0.00280656f, 0.00203947f, 0.0026423f, 0.00247424f, 0.00257558f, 0.0027451f, 0.00228356f, 0.00346274f, 0.00217718f, 0.00225798f, 0.0023098f, 0.003004f, 0.00256895f, 0.00233623f, 0.00258807f, 0.00206289f, 0.00216425f, 0.00231703f, 0.00243347f, 0.00260119f, 0.00263355f, 0.00243599f, 0.00222249f, 0.00246125f, 0.00234621f, 0.00269513f, 0.00230649f, 0.00186325f, 0.00270365f, 0.00273424f, 0.00251086f, 0.00205097f, 0.00212913f, 0.00227248f, 0.00255931f, 0.00254003f, 0.00262864f, 0.00216671f, 0.00240815f, 0.00251269f, 0.00237135f, 0.00218545f, 0.00204243f, 0.00266016f, 0.00166171f, 0.00233076f, 0.0024512f, 0.00160762f, 0.00240137f, 0.00240257f, 0.00217307f, 0.00229476f, 0.000915588f, 0.00230184f, 0.00161239f, 0.00218729f, 0.00243474f, 0.00257516f, 0.00185127f, 0.00228466f, 0.00162791f, 0.00251072f, 0.00177697f, 0.00193002f, 0.0025244f, 0.00208187f, 0.00191987f, 0.0023817f, 0.00251445f, 0.00201299f, 0.00234875f, 0.000987066f, 0.00244867f, 0.00186953f, 0.00220346f, 0.00230895f, 0.00144803f, 0.00210955f, 0.00184383f, 0.00279546f, 0.00199788f, 0.00169749f, 0.00272533f, 0.00251998f, 0.00277864f, 0.00261246f, 0.00188888f, 0.00233511f, 0.00320714f, 0.00233722f, 0.001915f, 0.00222146f, 0.00251121f, 0.00324743f, 0.00193989f, 0.00179327f, 0.00237146f, 0.00237008f, 0.00161423f, 0.002462f, 0.00284909f, 0.00167708f, 0.00258012f, 0.00269532f, 0.00286599f, 0.00200638f, 0.00222123f, 0.00213226f, 0.00247057f, 0.00246395f, 0.0023254f, 0.00291826f, 0.00272807f, 0.00156766f, 0.00212415f, 0.000510142f, 0.00295189f, 0.00229499f, 0.0029768f, 0.00156852f, 0.00105093f, 0.00260759f, 0.00415338f, 0.00175566f, 0.00137419f, 0.00143191f, 0.0023714f, 0.00158332f, 0.00111593f, 0.000612271f, 0.0018652f, 0.00251315f, 0.00306658f, 0.00352795f, 0.00225575f, 0.00209253f, 0.00242409f, 0.00158028f, 0.00125295f, 0.00243895f, 0.00173448f, 0.00245845f, 0.0016397f, 0.0019711f, 0.000989183f, 0.00212011f, 0.00240389f, 0.00249444f, 0.00244558f, 0.00220817f, 0.00240597f, 0.00286842f, 0.000889734f, 0.00221709f, 0.00108727f, 0.00174159f, 0.000939014f, 0.0021514f, 0.00239972f, 0.00210497f, 0.00205923f, 0.00353773f, 0.00232679f, 0.0023307f, 0.00180153f, 0.00224559f, 0.00248082f, 0.00215825f, 0.00259815f, 0.00201967f, 0.00255982f, 0.0016266f, 0.00377166f, 0.00267704f, 0.00134879f, 0.00210607f, 0.00247595f, 0.0010946f, 0.00306911f, 0.00133277f, 0.00222687f, 0.00120706f, 0.00290873f, 0.00347746f, 0.00176183f, 0.00204447f, 0.002373f, 0.00284793f, 0.00229568f, 0.0024471f, 0.00202566f, 0.00134335f, 0.00153353f, 0.00169055f, 0.00183197f, 0.00282075f, 0.000631667f, 0.00208996f, 0.00167924f, 0.00198528f, 0.00212102f, 0.00218504f, 0.00182758f, 0.00187414f, 0.0016294f, 0.00164394f, 0.00200227f, 0.00236933f, 0.00267115f, 0.00180175f, 0.00205735f, 0.00205741f, 0.0022054f, 0.00309303f, 0.00195616f, 0.00207805f, 0.00245608f, 0.00232263f, 0.00250358f, 0.00265366f, 0.00224678f, 0.00171853f, 0.00192391f, 0.00182219f, 0.00240344f, 0.00166916f, 0.00185318f, 0.00264068f, 0.00463235f, 0.00207372f, 0.00278006f, 0.00174468f, 0.00212716f, 0.00159525f, 0.00246927f, 0.00182157f, 0.00140501f, 0.00200579f, 0.00235637f, 0.00216988f, 0.00312915f, 0.00206938f, 0.0022859f, 0.00118829f, 0.00193753f, 0.00239687f, 0.00226515f, 0.00178723f, 0.00141918f, 0.00154574f, 0.0034896f, 0.00261576f, 0.00243686f, 0.00279749f, 0.00237514f, 0.0022706f, 0.00264993f, 0.00212844f, 0.00256601f, 0.00192504f, 0.00209868f, 0.00184442f, 0.00121919f, 0.00292756f, 0.00247856f, 0.00345277f, 0.00174567f, 0.00187884f, 0.00214909f, 0.00266325f, 0.00211264f, 0.00277224f, 0.00260928f, 0.00283624f, 0.00357505f, 0.0026122f, 0.00310925f, 0.00287288f, 0.00166526f, 0.00142352f, 0.0024865f, 0.0028454f, 0.00287274f, 0.00259862f, 0.00262059f, 0.00180052f, 0.002188f, 0.00219396f, 0.00241507f, 0.00151033f, 0.00274697f, 0.000453485f, 0.00228467f, 0.0020886f, 0.00332515f, 0.0041453f, 0.00155344f, 0.00217054f, 0.00146087f, 0.00303499f, 0.00175677f, 0.00318216f, 0.00250331f, 0.00248451f, 0.00270206f, 0.00332082f], rhs_zero_points=[133, 95, 142, 154, 125, 124, 134, 124, 133, 123, 110, 137, 168, 127, 117, 103, 124, 134, 101, 145, 105, 149, 166, 105, 120, 105, 128, 142, 142, 113, 153, 134, 105, 125, 90, 130, 116, 122, 80, 141, 86, 150, 118, 99, 102, 127, 98, 105, 122, 112, 108, 144, 100, 167, 159, 120, 139, 121, 120, 135, 121, 128, 99, 122, 104, 146, 121, 142, 141, 132, 122, 141, 119, 168, 138, 121, 106, 134, 103, 115, 119, 139, 113, 134, 124, 128, 89, 125, 123, 134, 154, 140, 149, 117, 81, 142, 127, 128, 143, 177, 147, 125, 92, 114, 149, 142, 133, 121, 124, 143, 132, 133, 122, 131, 163, 165, 137, 106, 144, 148, 140, 137, 111, 107, 111, 127, 159, 87, 146, 108, 143, 119, 129, 128, 85, 111, 128, 155, 101, 125, 109, 129, 151, 117, 141, 130, 143, 134, 110, 110, 151, 152, 101, 129, 122, 134, 134, 113, 139, 119, 153, 148, 120, 134, 120, 173, 158, 165, 70, 120, 142, 149, 140, 114, 143, 107, 116, 132, 91, 115, 155, 148, 111, 133, 106, 102, 138, 113, 107, 126, 96, 144, 135, 114, 149, 135, 135, 151, 122, 148, 159, 122, 117, 130, 130, 119, 114, 136, 105, 127, 123, 124, 118, 133, 130, 133, 143, 92, 142, 124, 107, 111, 119, 126, 145, 129, 138, 140, 136, 124, 117, 117, 115, 134, 118, 108, 155, 114, 157, 105, 116, 129, 135, 133, 128, 112, 125, 140, 137, 123, 136, 136, 98, 155, 143, 128, 127, 125, 82, 128, 137, 90, 101, 96, 129, 121, 96, 119, 110, 143, 128, 158, 145, 119, 119, 114, 112, 127, 170, 133, 113, 118, 105, 165, 119, 126, 103, 109, 139, 101, 96, 149, 100, 139, 118, 159, 119, 125, 167, 137, 131, 138, 162, 123, 120, 121, 148, 102, 112, 146, 111, 133, 135, 95, 68, 110, 124, 125, 126, 150, 134, 170, 154, 139, 155, 119, 140, 154, 171, 141, 139, 141, 157, 126, 147, 139, 128, 124, 92, 123, 117, 128, 143, 134, 127, 114, 110, 114, 146, 146, 121, 153, 124, 141, 156, 137, 146, 94, 131, 109, 120, 98, 134, 121, 116, 140, 135, 112, 157, 113, 134, 119, 130, 126, 91, 93, 127, 136, 102, 149, 133, 148, 158, 113, 102, 149, 146, 140, 156, 131, 156, 105, 99, 147, 139, 128, 156, 133, 126, 131, 131, 118, 106, 132, 126, 114, 139, 124, 159, 91, 158, 112, 106, 121, 112, 165, 157, 125, 144, 77, 102, 105, 152, 104, 96, 85, 142, 143, 198, 134, 156, 148, 67, 109, 54, 58, 105, 179, 133, 93, 66, 143, 164, 136, 151, 90, 139, 106, 124, 114, 147, 137, 129, 136, 132, 141, 113, 130, 117, 117, 134, 118, 100, 124, 116, 122, 136, 142, 109, 145, 130, 127, 139, 143, 141, 124, 127, 120, 134, 115, 136, 107, 102, 124, 115, 90, 113, 125, 125, 127, 125, 125, 110, 135, 113, 130, 122, 110, 131, 125, 145, 145, 96, 114, 97, 119, 146, 118, 154, 99, 117, 169], scales=[0.0540297f], zero_points=[0], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %307 = reshape(%306, newshape=[1, 4, 128, 400]) /* /model.10/m/m.0/attn/Reshape_output_0 */ /* ty=Tensor[(1, 4, 128, 400), uint8] */;
  %308 = dl.dequantize(%307, input_scales=[0.0540297f], input_zero_points=[0]) /* ty=Tensor[(1, 4, 128, 400), float32] */;
  %309 = split(%308, indices_or_sections=[32, 64], axis=2) /* /model.10/m/m.0/attn/Split_output_0 */ /* ty=(Tensor[(1, 4, 32, 400), float32], Tensor[(1, 4, 32, 400), float32], Tensor[(1, 4, 64, 400), float32]) */;
  %310 = %309.2;
  %311 = reshape(%310, newshape=[-1, 64, 400]) /* ty=Tensor[(4, 64, 400), float32] */;
  %314 = %309.0;
  %315 = fn (%FunctionVar_6_01: Tensor[(1, 4, 32, 400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a8722068)) -> Tensor[(1, 4, 400, 32), float32] {
    transpose(%FunctionVar_6_01, axes=[0, 1, 3, 2]) /* /model.10/m/m.0/attn/Transpose_output_0 */ /* ty=Tensor[(1, 4, 400, 32), float32] */
  };
  %316 = %315(%314, axes=[0, 1, 3, 2], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 4, 400, 32), float32] */;
  %317 = reshape(%316, newshape=[-1, 400, 32]) /* ty=Tensor[(4, 400, 32), float32] */;
  %318 = %309.1;
  %319 = reshape(%318, newshape=[-1, 32, 400]) /* ty=Tensor[(4, 32, 400), float32] */;
  %320 = fn (%FunctionVar_5_0: Tensor[(4, 32, 400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad96eeb8)) -> Tensor[(4, 400, 32), float32] {
    transpose(%FunctionVar_5_0, axes=[0, 2, 1]) /* ty=Tensor[(4, 400, 32), float32] */
  };
  %321 = %320(%319, axes=[0, 2, 1], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(4, 400, 32), float32] */;
  %322 = dl.quantize(%317, out_dtype="int8", output_scales=[0.0540297f], output_zero_points=[0]) /* fake_quant_109 */ /* ty=Tensor[(4, 400, 32), int8] */;
  %323 = dl.quantize(%321, out_dtype="int8", output_scales=[0.0540297f], output_zero_points=[0]) /* fake_quant_110 */ /* ty=Tensor[(4, 400, 32), int8] */;
  %324 = fn (%FunctionVar_1_03: Tensor[(4, 400, 32), int8], %FunctionVar_1_1: Tensor[(4, 400, 32), int8], PartitionedFromPattern="Tuple_dl.quantized_batch_matmul_dl.quantize_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:1", TuAttrs=relay.attrs.TuAttrs(0x55a9c16948)) -> Tensor[(4, 400, 400), uint8] {
    %312 = (%FunctionVar_1_03, %FunctionVar_1_1);
    %313 = dl.quantized_batch_matmul(%312, out_dtype="float16", lhs_scales=[0.0540297f], rhs_scales=[0.0540297f], lhs_zero_points=[0], rhs_zero_points=[0]) /* ty=Tensor[(4, 400, 400), float16] */;
    dl.quantize(%313, output_scales=[0.263234f], output_zero_points=[33]) /* fake_quant_111 */ /* ty=Tensor[(4, 400, 400), uint8] */
  };
  %325 = %324(%322, %323, lhs_scales=[0.0540297f], lhs_zero_points=[0], rhs_scales=[0.0540297f], rhs_zero_points=[0], scales=[0.263234f], zero_points=[33], stage0=2, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(4, 400, 400), uint8] */;
  %326 = reshape(%325, newshape=[1, 4, 400, 400]) /* /model.10/m/m.0/attn/MatMul_output_0 */ /* ty=Tensor[(1, 4, 400, 400), uint8] */;
  %327 = dl.dequantize(%326, input_scales=[0.263234f], input_zero_points=[33]) /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %328 = multiply(%327, 0.176777f /* ty=float32 */) /* /model.10/m/m.0/attn/Mul_output_0 */ /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %329 = max(%328, axis=[3], keepdims=True) /* ty=Tensor[(1, 4, 400, 1), float32] */;
  %330 = subtract(%328, %329) /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %331 = exp(%330) /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %332 = sum(%331, axis=[3], keepdims=True) /* ty=Tensor[(1, 4, 400, 1), float32] */;
  %333 = divide(%331, %332) /* /model.10/m/m.0/attn/Softmax_output_0 */ /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %334 = fn (%FunctionVar_4_01: Tensor[(1, 4, 400, 400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9722438)) -> Tensor[(1, 4, 400, 400), float32] {
    transpose(%FunctionVar_4_01, axes=[0, 1, 3, 2]) /* /model.10/m/m.0/attn/Transpose_1_output_0 */ /* ty=Tensor[(1, 4, 400, 400), float32] */
  };
  %335 = %334(%333, axes=[0, 1, 3, 2], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 4, 400, 400), float32] */;
  %336 = reshape(%335, newshape=[-1, 400, 400]) /* ty=Tensor[(4, 400, 400), float32] */;
  %337 = fn (%FunctionVar_3_01: Tensor[(4, 400, 400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab05d7c8)) -> Tensor[(4, 400, 400), float32] {
    transpose(%FunctionVar_3_01, axes=[0, 2, 1]) /* ty=Tensor[(4, 400, 400), float32] */
  };
  %338 = %337(%336, axes=[0, 2, 1], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(4, 400, 400), float32] */;
  %339 = dl.quantize(%311, out_dtype="int8", output_scales=[0.0540297f], output_zero_points=[0]) /* fake_quant_112 */ /* ty=Tensor[(4, 64, 400), int8] */;
  %340 = dl.quantize(%338, out_dtype="int8", output_scales=[0.000387075f], output_zero_points=[0]) /* fake_quant_113 */ /* ty=Tensor[(4, 400, 400), int8] */;
  %341 = fn (%FunctionVar_0_04: Tensor[(4, 64, 400), int8], %FunctionVar_0_11: Tensor[(4, 400, 400), int8], PartitionedFromPattern="Tuple_dl.quantized_batch_matmul_dl.quantize_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:1", TuAttrs=relay.attrs.TuAttrs(0x55aae72ae8)) -> Tensor[(4, 64, 400), uint8] {
    %300 = (%FunctionVar_0_04, %FunctionVar_0_11);
    %301 = dl.quantized_batch_matmul(%300, out_dtype="float16", lhs_scales=[0.0540297f], rhs_scales=[0.000387075f], lhs_zero_points=[0], rhs_zero_points=[0]) /* ty=Tensor[(4, 64, 400), float16] */;
    dl.quantize(%301, output_scales=[0.0269926f], output_zero_points=[130]) /* fake_quant_114 */ /* ty=Tensor[(4, 64, 400), uint8] */
  };
  %342 = %341(%339, %340, lhs_scales=[0.0540297f], lhs_zero_points=[0], rhs_scales=[0.000387075f], rhs_zero_points=[0], scales=[0.0269926f], zero_points=[130], stage0=2, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(4, 64, 400), uint8] */;
  %344 = reshape(%310, newshape=[1, 256, 20, 20]) /* /model.10/m/m.0/attn/Reshape_2_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %345 = dl.quantize(%344, out_dtype="int8", output_scales=[0.0540297f], output_zero_points=[0]) /* fake_quant_115 */ /* ty=Tensor[(1, 256, 20, 20), int8] */;
  %346 = fn (%FunctionVar_52_0: Tensor[(1, 256, 20, 20), int8], %FunctionVar_52_1: Tensor[(256, 1, 3, 3), uint8], %FunctionVar_52_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab024848)) -> Tensor[(1, 256, 20, 20), uint8] {
    %343 = (%FunctionVar_52_0, %FunctionVar_52_1, %FunctionVar_52_2, meta[relay.Constant][291] /* ty=Tensor[(256), float32] */, meta[relay.Constant][292] /* ty=Tensor[(256), int32] */, meta[relay.Constant][293] /* ty=Tensor[(256), int32] */, meta[relay.Constant][294] /* ty=Tensor[(256), int32] */, meta[relay.Constant][295] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%343, groups=256, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0540297f], lhs_zero_points=[0], rhs_scales=[0.000754028f, 0.00186841f, 0.00182852f, 0.0025626f, 0.00350401f, 0.00066355f, 0.000490172f, 0.00144591f, 0.0055986f, 0.00696954f, 0.00183676f, 0.00172898f, 0.000565646f, 0.00268496f, 0.00207358f, 0.00169653f, 0.00083537f, 0.000370475f, 0.00185542f, 0.00136979f, 0.00131849f, 0.00221424f, 0.00150043f, 0.00653949f, 0.00459246f, 0.00456511f, 0.00381115f, 0.00102767f, 0.0026767f, 0.0058214f, 0.00201776f, 0.00132449f, 0.00496698f, 0.0027971f, 0.000930973f, 0.000365092f, 0.00383986f, 0.000857411f, 0.00423821f, 0.00580938f, 0.00407736f, 0.00105376f, 0.00159451f, 0.00302789f, 0.00152864f, 0.00157574f, 0.000270161f, 0.00176919f, 0.00277837f, 0.00249815f, 0.000470298f, 0.0014139f, 0.00269861f, 0.000336399f, 0.00089802f, 0.000350788f, 0.000544741f, 0.000938365f, 0.00380117f, 0.00424122f, 0.000929046f, 0.000330702f, 0.000453127f, 0.00291256f, 0.00426116f, 0.00357786f, 0.00301979f, 0.00339773f, 0.00380414f, 0.00327832f, 0.00351009f, 0.00307762f, 0.00315156f, 0.00308042f, 0.00270713f, 0.00355941f, 0.00326899f, 0.00365153f, 0.00229651f, 0.00274085f, 0.00267763f, 0.00329495f, 0.00321439f, 0.00313068f, 0.00303924f, 0.00210823f, 0.00251347f, 0.00363695f, 0.00161854f, 0.00301537f, 0.00300497f, 0.00208336f, 0.00315823f, 0.00303882f, 0.00303758f, 0.00293649f, 0.00335884f, 0.00239804f, 0.00301543f, 0.00229243f, 0.00233931f, 0.00304123f, 0.00375463f, 0.00323853f, 0.00332246f, 0.00299868f, 0.00349322f, 0.00283662f, 0.000963905f, 0.00229535f, 0.00326059f, 0.00252989f, 0.00306963f, 0.00331573f, 0.00309526f, 0.00223401f, 0.00316352f, 0.00257339f, 0.00316271f, 0.00363819f, 0.00237795f, 0.00297116f, 0.00337031f, 0.00203873f, 0.00343843f, 0.00424791f, 0.00292418f, 0.00296311f, 0.00328446f, 0.00403635f, 0.00283366f, 0.00273286f, 0.00299607f, 0.000862982f, 0.00463394f, 0.0023641f, 0.00261891f, 0.00290387f, 0.00242617f, 0.00360731f, 0.00260866f, 0.00229075f, 0.00536413f, 0.00690845f, 0.00145262f, 0.00274864f, 0.00299136f, 0.00212079f, 0.00292043f, 0.00314041f, 0.00348097f, 0.00570206f, 0.00164626f, 0.00249166f, 0.00285877f, 0.00341808f, 0.00266912f, 0.00277555f, 0.0028572f, 0.00453421f, 0.00292774f, 0.00328515f, 0.00216761f, 0.0016136f, 0.00288349f, 0.0035884f, 0.00472633f, 0.00339609f, 0.0029419f, 0.00388534f, 0.00552944f, 0.00306265f, 0.00212482f, 0.00345838f, 0.00323975f, 0.00277991f, 0.00287758f, 0.00313441f, 0.00342079f, 0.00246192f, 0.00280811f, 0.00327775f, 0.00256234f, 0.00153762f, 0.00333322f, 0.00362963f, 0.00269736f, 0.00299382f, 0.00108495f, 0.00193426f, 0.00240743f, 0.00407275f, 0.00197088f, 0.00304655f, 0.00232513f, 0.00171385f, 0.00183293f, 0.00187869f, 0.00230155f, 0.00227556f, 0.00168856f, 0.00160373f, 0.0016477f, 0.00186893f, 0.00163621f, 0.00204641f, 0.00174533f, 0.0019006f, 0.00196327f, 0.00197522f, 0.00133338f, 0.00184016f, 0.00322639f, 0.00124553f, 0.00159461f, 0.00153975f, 0.00123054f, 0.002654f, 0.00194093f, 0.00172965f, 0.00146276f, 0.00148634f, 0.00147346f, 0.00173579f, 0.00141329f, 0.00161734f, 0.00160091f, 0.00172212f, 0.00173692f, 0.00127838f, 0.00169426f, 0.00157375f, 0.00166936f, 0.00161813f, 0.00184176f, 0.0016438f, 0.00190589f, 0.00153694f, 0.0016438f, 0.0016747f, 0.00168523f, 0.00830591f, 0.00200891f, 0.00203121f, 0.00130938f, 0.00154661f, 0.00170062f, 0.00170669f, 0.000978428f, 0.0016695f, 0.000287865f, 0.00168309f, 0.0015447f, 0.00173973f, 0.00150785f, 0.00138812f], rhs_zero_points=[186, 149, 163, 177, 108, 243, 253, 228, 188, 82, 180, 114, 239, 185, 158, 120, 219, 255, 200, 220, 187, 169, 253, 134, 186, 93, 172, 171, 167, 196, 249, 234, 152, 170, 197, 255, 186, 237, 213, 183, 192, 143, 240, 165, 176, 186, 255, 118, 178, 232, 255, 247, 141, 255, 182, 255, 255, 168, 199, 99, 255, 255, 194, 139, 225, 150, 238, 233, 236, 236, 237, 243, 242, 246, 255, 229, 243, 218, 255, 242, 252, 207, 239, 236, 251, 254, 255, 208, 252, 243, 247, 226, 237, 248, 210, 247, 241, 255, 247, 255, 246, 239, 240, 239, 239, 239, 232, 248, 255, 221, 244, 228, 239, 229, 238, 255, 245, 255, 243, 233, 255, 241, 248, 254, 186, 162, 242, 251, 199, 106, 249, 244, 250, 255, 175, 255, 234, 248, 202, 188, 255, 200, 213, 152, 239, 248, 237, 255, 251, 190, 233, 137, 167, 253, 196, 231, 201, 196, 203, 228, 245, 236, 255, 241, 241, 232, 173, 240, 143, 176, 193, 220, 255, 183, 214, 240, 242, 220, 228, 246, 249, 238, 225, 255, 232, 193, 241, 253, 255, 249, 250, 168, 254, 142, 190, 226, 225, 254, 180, 220, 249, 236, 250, 235, 248, 249, 241, 255, 255, 232, 235, 203, 138, 229, 243, 254, 208, 244, 254, 243, 215, 244, 255, 248, 252, 247, 252, 248, 220, 169, 236, 244, 244, 247, 210, 248, 226, 247, 242, 228, 229, 122, 234, 216, 245, 253, 210, 243, 193, 246, 255, 236, 249, 249, 248, 243], scales=[0.0314915f], zero_points=[118]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %347 = reshape(%342, newshape=[1, 256, 20, 20]) /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %348 = %346(%345, meta[relay.Constant][296] /* ty=Tensor[(256, 1, 3, 3), uint8] */, meta[relay.Constant][297] /* ty=Tensor[(256), int32] */, groups=256, kernel_size=[3, 3], pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0540297f], lhs_zero_points=[0], rhs_scales=[0.000754028f, 0.00186841f, 0.00182852f, 0.0025626f, 0.00350401f, 0.00066355f, 0.000490172f, 0.00144591f, 0.0055986f, 0.00696954f, 0.00183676f, 0.00172898f, 0.000565646f, 0.00268496f, 0.00207358f, 0.00169653f, 0.00083537f, 0.000370475f, 0.00185542f, 0.00136979f, 0.00131849f, 0.00221424f, 0.00150043f, 0.00653949f, 0.00459246f, 0.00456511f, 0.00381115f, 0.00102767f, 0.0026767f, 0.0058214f, 0.00201776f, 0.00132449f, 0.00496698f, 0.0027971f, 0.000930973f, 0.000365092f, 0.00383986f, 0.000857411f, 0.00423821f, 0.00580938f, 0.00407736f, 0.00105376f, 0.00159451f, 0.00302789f, 0.00152864f, 0.00157574f, 0.000270161f, 0.00176919f, 0.00277837f, 0.00249815f, 0.000470298f, 0.0014139f, 0.00269861f, 0.000336399f, 0.00089802f, 0.000350788f, 0.000544741f, 0.000938365f, 0.00380117f, 0.00424122f, 0.000929046f, 0.000330702f, 0.000453127f, 0.00291256f, 0.00426116f, 0.00357786f, 0.00301979f, 0.00339773f, 0.00380414f, 0.00327832f, 0.00351009f, 0.00307762f, 0.00315156f, 0.00308042f, 0.00270713f, 0.00355941f, 0.00326899f, 0.00365153f, 0.00229651f, 0.00274085f, 0.00267763f, 0.00329495f, 0.00321439f, 0.00313068f, 0.00303924f, 0.00210823f, 0.00251347f, 0.00363695f, 0.00161854f, 0.00301537f, 0.00300497f, 0.00208336f, 0.00315823f, 0.00303882f, 0.00303758f, 0.00293649f, 0.00335884f, 0.00239804f, 0.00301543f, 0.00229243f, 0.00233931f, 0.00304123f, 0.00375463f, 0.00323853f, 0.00332246f, 0.00299868f, 0.00349322f, 0.00283662f, 0.000963905f, 0.00229535f, 0.00326059f, 0.00252989f, 0.00306963f, 0.00331573f, 0.00309526f, 0.00223401f, 0.00316352f, 0.00257339f, 0.00316271f, 0.00363819f, 0.00237795f, 0.00297116f, 0.00337031f, 0.00203873f, 0.00343843f, 0.00424791f, 0.00292418f, 0.00296311f, 0.00328446f, 0.00403635f, 0.00283366f, 0.00273286f, 0.00299607f, 0.000862982f, 0.00463394f, 0.0023641f, 0.00261891f, 0.00290387f, 0.00242617f, 0.00360731f, 0.00260866f, 0.00229075f, 0.00536413f, 0.00690845f, 0.00145262f, 0.00274864f, 0.00299136f, 0.00212079f, 0.00292043f, 0.00314041f, 0.00348097f, 0.00570206f, 0.00164626f, 0.00249166f, 0.00285877f, 0.00341808f, 0.00266912f, 0.00277555f, 0.0028572f, 0.00453421f, 0.00292774f, 0.00328515f, 0.00216761f, 0.0016136f, 0.00288349f, 0.0035884f, 0.00472633f, 0.00339609f, 0.0029419f, 0.00388534f, 0.00552944f, 0.00306265f, 0.00212482f, 0.00345838f, 0.00323975f, 0.00277991f, 0.00287758f, 0.00313441f, 0.00342079f, 0.00246192f, 0.00280811f, 0.00327775f, 0.00256234f, 0.00153762f, 0.00333322f, 0.00362963f, 0.00269736f, 0.00299382f, 0.00108495f, 0.00193426f, 0.00240743f, 0.00407275f, 0.00197088f, 0.00304655f, 0.00232513f, 0.00171385f, 0.00183293f, 0.00187869f, 0.00230155f, 0.00227556f, 0.00168856f, 0.00160373f, 0.0016477f, 0.00186893f, 0.00163621f, 0.00204641f, 0.00174533f, 0.0019006f, 0.00196327f, 0.00197522f, 0.00133338f, 0.00184016f, 0.00322639f, 0.00124553f, 0.00159461f, 0.00153975f, 0.00123054f, 0.002654f, 0.00194093f, 0.00172965f, 0.00146276f, 0.00148634f, 0.00147346f, 0.00173579f, 0.00141329f, 0.00161734f, 0.00160091f, 0.00172212f, 0.00173692f, 0.00127838f, 0.00169426f, 0.00157375f, 0.00166936f, 0.00161813f, 0.00184176f, 0.0016438f, 0.00190589f, 0.00153694f, 0.0016438f, 0.0016747f, 0.00168523f, 0.00830591f, 0.00200891f, 0.00203121f, 0.00130938f, 0.00154661f, 0.00170062f, 0.00170669f, 0.000978428f, 0.0016695f, 0.000287865f, 0.00168309f, 0.0015447f, 0.00173973f, 0.00150785f, 0.00138812f], rhs_zero_points=[186, 149, 163, 177, 108, 243, 253, 228, 188, 82, 180, 114, 239, 185, 158, 120, 219, 255, 200, 220, 187, 169, 253, 134, 186, 93, 172, 171, 167, 196, 249, 234, 152, 170, 197, 255, 186, 237, 213, 183, 192, 143, 240, 165, 176, 186, 255, 118, 178, 232, 255, 247, 141, 255, 182, 255, 255, 168, 199, 99, 255, 255, 194, 139, 225, 150, 238, 233, 236, 236, 237, 243, 242, 246, 255, 229, 243, 218, 255, 242, 252, 207, 239, 236, 251, 254, 255, 208, 252, 243, 247, 226, 237, 248, 210, 247, 241, 255, 247, 255, 246, 239, 240, 239, 239, 239, 232, 248, 255, 221, 244, 228, 239, 229, 238, 255, 245, 255, 243, 233, 255, 241, 248, 254, 186, 162, 242, 251, 199, 106, 249, 244, 250, 255, 175, 255, 234, 248, 202, 188, 255, 200, 213, 152, 239, 248, 237, 255, 251, 190, 233, 137, 167, 253, 196, 231, 201, 196, 203, 228, 245, 236, 255, 241, 241, 232, 173, 240, 143, 176, 193, 220, 255, 183, 214, 240, 242, 220, 228, 246, 249, 238, 225, 255, 232, 193, 241, 253, 255, 249, 250, 168, 254, 142, 190, 226, 225, 254, 180, 220, 249, 236, 250, 235, 248, 249, 241, 255, 255, 232, 235, 203, 138, 229, 243, 254, 208, 244, 254, 243, 215, 244, 255, 248, 252, 247, 252, 248, 220, 169, 236, 244, 244, 247, 210, 248, 226, 247, 242, 228, 229, 122, 234, 216, 245, 253, 210, 243, 193, 246, 255, 236, 249, 249, 248, 243], scales=[0.0314915f], zero_points=[118], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %349 = dl.quantized_add(%347, %348, out_dtype="uint8", lhs_scales=[0.0269926f], rhs_scales=[0.0314915f], scales=[0.0213702f], lhs_zero_points=[130], rhs_zero_points=[118], zero_points=[99], with_relu=0, DLExtParamsStrides=[], DLExtRetStrides=[]) /* /model.10/m/m.0/attn/Add_output_0 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %350 = fn (%FunctionVar_51_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_51_1: Tensor[(256, 256, 1, 1), uint8], %FunctionVar_51_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad9861e8)) -> Tensor[(1, 256, 20, 20), uint8] {
    %299 = (%FunctionVar_51_0, %FunctionVar_51_1, %FunctionVar_51_2, meta[relay.Constant][279] /* ty=Tensor[(256), float32] */, meta[relay.Constant][280] /* ty=Tensor[(256), int32] */, meta[relay.Constant][281] /* ty=Tensor[(256), int32] */, meta[relay.Constant][282] /* ty=Tensor[(256), int32] */, meta[relay.Constant][283] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%299, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0213702f], lhs_zero_points=[99], rhs_scales=[0.00162094f, 0.00219945f, 0.00134021f, 0.0012763f, 0.00153037f, 0.0017768f, 0.00183103f, 0.00199137f, 0.00236146f, 0.00167534f, 0.00185898f, 0.00249677f, 0.00183512f, 0.00189069f, 0.00270177f, 0.00210721f, 0.00188664f, 0.00157924f, 0.00180489f, 0.00223546f, 0.00177508f, 0.0027996f, 0.00156696f, 0.00220109f, 0.0017531f, 0.00158994f, 0.00224466f, 0.0050366f, 0.00189566f, 0.00177839f, 0.00130169f, 0.00134553f, 0.0014296f, 0.00194424f, 0.00337767f, 0.00155899f, 0.00161785f, 0.00148929f, 0.00147421f, 0.00121827f, 0.00280331f, 0.00210399f, 0.00174108f, 0.00242024f, 0.00148773f, 0.00166431f, 0.00156223f, 0.00204902f, 0.00172611f, 0.00217819f, 0.0016428f, 0.00176198f, 0.00196045f, 0.00214147f, 0.00281751f, 0.00227931f, 0.00114097f, 0.00187568f, 0.00169231f, 0.0017942f, 0.00155025f, 0.0017443f, 0.00196159f, 0.0016737f, 0.00501009f, 0.00202468f, 0.00195169f, 0.00120728f, 0.00167271f, 0.0021007f, 0.00189927f, 0.00214714f, 0.00169493f, 0.00191149f, 0.00194729f, 0.00457828f, 0.00158578f, 0.00195004f, 0.00188173f, 0.00203146f, 0.00163897f, 0.00189049f, 0.00168238f, 0.0017921f, 0.0014838f, 0.00165574f, 0.00199445f, 0.00124657f, 0.00171376f, 0.00171989f, 0.00195197f, 0.00156027f, 0.00143356f, 0.00235645f, 0.00149625f, 0.00175055f, 0.0022592f, 0.00109128f, 0.0014651f, 0.00277187f, 0.00209011f, 0.00132322f, 0.0013556f, 0.00180182f, 0.00181346f, 0.00170051f, 0.00149324f, 0.00133101f, 0.00173172f, 0.00152122f, 0.00226675f, 0.00117956f, 0.00176147f, 0.00228311f, 0.00187213f, 0.00193836f, 0.00192404f, 0.00191478f, 0.00226573f, 0.00191161f, 0.00577137f, 0.00147253f, 0.00159584f, 0.00143774f, 0.00222013f, 0.00169461f, 0.00218064f, 0.0015284f, 0.0015521f, 0.00180911f, 0.00152885f, 0.00172477f, 0.00220685f, 0.00131182f, 0.00168235f, 0.00241389f, 0.00195846f, 0.00165509f, 0.00219915f, 0.00206766f, 0.00186837f, 0.00170671f, 0.0015125f, 0.00188531f, 0.00207385f, 0.00135047f, 0.00178126f, 0.00170087f, 0.0016506f, 0.00192897f, 0.00144277f, 0.0015723f, 0.00161154f, 0.00151205f, 0.00112726f, 0.00188086f, 0.00164117f, 0.00294442f, 0.00253736f, 0.002763f, 0.00156235f, 0.00175419f, 0.00152496f, 0.00182932f, 0.00150192f, 0.00549358f, 0.00162663f, 0.00219856f, 0.00151762f, 0.00297129f, 0.00227717f, 0.00163618f, 0.00156424f, 0.00150618f, 0.00180337f, 0.00238908f, 0.00159405f, 0.0037011f, 0.00165191f, 0.00161066f, 0.002177f, 0.00154854f, 0.00175247f, 0.00221561f, 0.00192393f, 0.00177275f, 0.00193498f, 0.00169756f, 0.00153134f, 0.00133855f, 0.00185805f, 0.00170296f, 0.00126139f, 0.00219993f, 0.00410641f, 0.00166181f, 0.00193979f, 0.00275089f, 0.00194697f, 0.00186509f, 0.00135739f, 0.0018718f, 0.00199833f, 0.00141768f, 0.00169208f, 0.00196425f, 0.00279209f, 0.00165568f, 0.00175343f, 0.00158275f, 0.00181244f, 0.00159594f, 0.00174019f, 0.0016687f, 0.00182549f, 0.00196937f, 0.00158661f, 0.00201905f, 0.00152673f, 0.00163041f, 0.00202799f, 0.00111504f, 0.00146477f, 0.00164621f, 0.00145845f, 0.00188307f, 0.00145157f, 0.00142904f, 0.00149648f, 0.00183557f, 0.0025698f, 0.00174254f, 0.00123171f, 0.00187056f, 0.00194828f, 0.00164488f, 0.00197828f, 0.00143414f, 0.00151962f, 0.001371f, 0.00189104f, 0.00170048f, 0.00177024f, 0.00172078f, 0.00277782f, 0.0012987f, 0.00134767f, 0.00203668f, 0.00184904f, 0.00185826f, 0.00166207f, 0.0019117f, 0.00127743f, 0.00187554f, 0.00207378f, 0.00199638f], rhs_zero_points=[143, 111, 140, 137, 114, 120, 141, 123, 159, 126, 132, 140, 119, 117, 126, 100, 108, 114, 87, 135, 150, 123, 148, 157, 112, 137, 138, 155, 127, 122, 128, 123, 132, 142, 152, 120, 152, 152, 102, 139, 119, 147, 114, 117, 124, 115, 137, 110, 144, 127, 145, 127, 128, 106, 171, 110, 141, 156, 138, 111, 104, 116, 129, 115, 165, 118, 125, 110, 111, 146, 121, 109, 137, 113, 128, 165, 142, 114, 127, 111, 108, 115, 124, 114, 152, 121, 142, 119, 138, 113, 133, 120, 136, 134, 117, 122, 157, 116, 130, 63, 127, 139, 135, 121, 129, 142, 125, 156, 96, 97, 135, 118, 140, 134, 127, 82, 112, 149, 124, 121, 117, 118, 121, 123, 142, 126, 98, 108, 127, 134, 128, 138, 142, 136, 124, 148, 104, 134, 123, 151, 148, 108, 143, 127, 106, 128, 144, 143, 131, 124, 141, 115, 150, 126, 121, 116, 163, 157, 170, 127, 128, 134, 116, 149, 126, 143, 115, 95, 120, 95, 87, 100, 135, 110, 98, 112, 153, 161, 117, 131, 118, 116, 144, 131, 128, 107, 113, 113, 138, 127, 143, 116, 140, 147, 127, 143, 135, 110, 110, 108, 106, 117, 124, 148, 140, 159, 144, 123, 121, 127, 130, 114, 125, 142, 97, 158, 117, 124, 121, 125, 110, 118, 144, 133, 117, 135, 126, 130, 117, 149, 118, 151, 126, 125, 120, 121, 140, 122, 130, 107, 140, 116, 133, 114, 141, 124, 115, 125, 128, 131, 127, 141, 126, 146, 123, 149], scales=[0.0226729f], zero_points=[108]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %351 = %350(%349, meta[relay.Constant][298] /* ty=Tensor[(256, 256, 1, 1), uint8] */, meta[relay.Constant][299] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0213702f], lhs_zero_points=[99], rhs_scales=[0.00162094f, 0.00219945f, 0.00134021f, 0.0012763f, 0.00153037f, 0.0017768f, 0.00183103f, 0.00199137f, 0.00236146f, 0.00167534f, 0.00185898f, 0.00249677f, 0.00183512f, 0.00189069f, 0.00270177f, 0.00210721f, 0.00188664f, 0.00157924f, 0.00180489f, 0.00223546f, 0.00177508f, 0.0027996f, 0.00156696f, 0.00220109f, 0.0017531f, 0.00158994f, 0.00224466f, 0.0050366f, 0.00189566f, 0.00177839f, 0.00130169f, 0.00134553f, 0.0014296f, 0.00194424f, 0.00337767f, 0.00155899f, 0.00161785f, 0.00148929f, 0.00147421f, 0.00121827f, 0.00280331f, 0.00210399f, 0.00174108f, 0.00242024f, 0.00148773f, 0.00166431f, 0.00156223f, 0.00204902f, 0.00172611f, 0.00217819f, 0.0016428f, 0.00176198f, 0.00196045f, 0.00214147f, 0.00281751f, 0.00227931f, 0.00114097f, 0.00187568f, 0.00169231f, 0.0017942f, 0.00155025f, 0.0017443f, 0.00196159f, 0.0016737f, 0.00501009f, 0.00202468f, 0.00195169f, 0.00120728f, 0.00167271f, 0.0021007f, 0.00189927f, 0.00214714f, 0.00169493f, 0.00191149f, 0.00194729f, 0.00457828f, 0.00158578f, 0.00195004f, 0.00188173f, 0.00203146f, 0.00163897f, 0.00189049f, 0.00168238f, 0.0017921f, 0.0014838f, 0.00165574f, 0.00199445f, 0.00124657f, 0.00171376f, 0.00171989f, 0.00195197f, 0.00156027f, 0.00143356f, 0.00235645f, 0.00149625f, 0.00175055f, 0.0022592f, 0.00109128f, 0.0014651f, 0.00277187f, 0.00209011f, 0.00132322f, 0.0013556f, 0.00180182f, 0.00181346f, 0.00170051f, 0.00149324f, 0.00133101f, 0.00173172f, 0.00152122f, 0.00226675f, 0.00117956f, 0.00176147f, 0.00228311f, 0.00187213f, 0.00193836f, 0.00192404f, 0.00191478f, 0.00226573f, 0.00191161f, 0.00577137f, 0.00147253f, 0.00159584f, 0.00143774f, 0.00222013f, 0.00169461f, 0.00218064f, 0.0015284f, 0.0015521f, 0.00180911f, 0.00152885f, 0.00172477f, 0.00220685f, 0.00131182f, 0.00168235f, 0.00241389f, 0.00195846f, 0.00165509f, 0.00219915f, 0.00206766f, 0.00186837f, 0.00170671f, 0.0015125f, 0.00188531f, 0.00207385f, 0.00135047f, 0.00178126f, 0.00170087f, 0.0016506f, 0.00192897f, 0.00144277f, 0.0015723f, 0.00161154f, 0.00151205f, 0.00112726f, 0.00188086f, 0.00164117f, 0.00294442f, 0.00253736f, 0.002763f, 0.00156235f, 0.00175419f, 0.00152496f, 0.00182932f, 0.00150192f, 0.00549358f, 0.00162663f, 0.00219856f, 0.00151762f, 0.00297129f, 0.00227717f, 0.00163618f, 0.00156424f, 0.00150618f, 0.00180337f, 0.00238908f, 0.00159405f, 0.0037011f, 0.00165191f, 0.00161066f, 0.002177f, 0.00154854f, 0.00175247f, 0.00221561f, 0.00192393f, 0.00177275f, 0.00193498f, 0.00169756f, 0.00153134f, 0.00133855f, 0.00185805f, 0.00170296f, 0.00126139f, 0.00219993f, 0.00410641f, 0.00166181f, 0.00193979f, 0.00275089f, 0.00194697f, 0.00186509f, 0.00135739f, 0.0018718f, 0.00199833f, 0.00141768f, 0.00169208f, 0.00196425f, 0.00279209f, 0.00165568f, 0.00175343f, 0.00158275f, 0.00181244f, 0.00159594f, 0.00174019f, 0.0016687f, 0.00182549f, 0.00196937f, 0.00158661f, 0.00201905f, 0.00152673f, 0.00163041f, 0.00202799f, 0.00111504f, 0.00146477f, 0.00164621f, 0.00145845f, 0.00188307f, 0.00145157f, 0.00142904f, 0.00149648f, 0.00183557f, 0.0025698f, 0.00174254f, 0.00123171f, 0.00187056f, 0.00194828f, 0.00164488f, 0.00197828f, 0.00143414f, 0.00151962f, 0.001371f, 0.00189104f, 0.00170048f, 0.00177024f, 0.00172078f, 0.00277782f, 0.0012987f, 0.00134767f, 0.00203668f, 0.00184904f, 0.00185826f, 0.00166207f, 0.0019117f, 0.00127743f, 0.00187554f, 0.00207378f, 0.00199638f], rhs_zero_points=[143, 111, 140, 137, 114, 120, 141, 123, 159, 126, 132, 140, 119, 117, 126, 100, 108, 114, 87, 135, 150, 123, 148, 157, 112, 137, 138, 155, 127, 122, 128, 123, 132, 142, 152, 120, 152, 152, 102, 139, 119, 147, 114, 117, 124, 115, 137, 110, 144, 127, 145, 127, 128, 106, 171, 110, 141, 156, 138, 111, 104, 116, 129, 115, 165, 118, 125, 110, 111, 146, 121, 109, 137, 113, 128, 165, 142, 114, 127, 111, 108, 115, 124, 114, 152, 121, 142, 119, 138, 113, 133, 120, 136, 134, 117, 122, 157, 116, 130, 63, 127, 139, 135, 121, 129, 142, 125, 156, 96, 97, 135, 118, 140, 134, 127, 82, 112, 149, 124, 121, 117, 118, 121, 123, 142, 126, 98, 108, 127, 134, 128, 138, 142, 136, 124, 148, 104, 134, 123, 151, 148, 108, 143, 127, 106, 128, 144, 143, 131, 124, 141, 115, 150, 126, 121, 116, 163, 157, 170, 127, 128, 134, 116, 149, 126, 143, 115, 95, 120, 95, 87, 100, 135, 110, 98, 112, 153, 161, 117, 131, 118, 116, 144, 131, 128, 107, 113, 113, 138, 127, 143, 116, 140, 147, 127, 143, 135, 110, 110, 108, 106, 117, 124, 148, 140, 159, 144, 123, 121, 127, 130, 114, 125, 142, 97, 158, 117, 124, 121, 125, 110, 118, 144, 133, 117, 135, 126, 130, 117, 149, 118, 151, 126, 125, 120, 121, 140, 122, 130, 107, 140, 116, 133, 114, 141, 124, 115, 125, 128, 131, 127, 141, 126, 146, 123, 149], scales=[0.0226729f], zero_points=[108], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %352 = dl.dequantize(%351, input_scales=[0.0226729f], input_zero_points=[108]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %355 = add(%303, %352) /* /model.10/m/m.0/Add_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %356 = dl.quantize(%355, output_scales=[0.0350616f], output_zero_points=[78]) /* fake_quant_122 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %357 = fn (%FunctionVar_50_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_50_1: Tensor[(512, 256, 1, 1), uint8], %FunctionVar_50_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae01dc8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %354 = (%FunctionVar_50_0, %FunctionVar_50_1, %FunctionVar_50_2, meta[relay.Constant][305] /* ty=Tensor[(512), float32] */, meta[relay.Constant][306] /* ty=Tensor[(512), int32] */, meta[relay.Constant][307] /* ty=Tensor[(512), int32] */, meta[relay.Constant][308] /* ty=Tensor[(512), int32] */, meta[relay.Constant][309] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%354, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0350616f], lhs_zero_points=[78], rhs_scales=[0.00137533f, 0.00285882f, 0.00218705f, 0.00107148f, 0.00144451f, 0.00152936f, 0.00173837f, 0.0014249f, 0.00156842f, 0.00210585f, 0.00161997f, 0.00127582f, 0.00186694f, 0.00173501f, 0.00172105f, 0.00165445f, 0.00136328f, 0.00118453f, 0.00134716f, 0.00158228f, 0.00142117f, 0.00106879f, 0.00110032f, 0.00138511f, 0.0014977f, 0.00140658f, 0.00151237f, 0.00158237f, 0.00197825f, 0.00122096f, 0.00169083f, 0.00158344f, 0.00183273f, 0.00177519f, 0.00206047f, 0.00173086f, 0.00100084f, 0.00154805f, 0.00179896f, 0.00220637f, 0.00145209f, 0.00162091f, 0.00181337f, 0.00163044f, 0.00188417f, 0.00171955f, 0.00142411f, 0.0018662f, 0.00136942f, 0.00142116f, 0.00206693f, 0.0018479f, 0.00153823f, 0.0013984f, 0.00192824f, 0.00124934f, 0.00168462f, 0.00156681f, 0.00190899f, 0.00176226f, 0.00155171f, 0.00180684f, 0.00147204f, 0.00151282f, 0.00148442f, 0.00185691f, 0.00175451f, 0.00116953f, 0.00189795f, 0.0016809f, 0.00183643f, 0.00158609f, 0.00174218f, 0.00170553f, 0.00287078f, 0.00152648f, 0.0014661f, 0.00128799f, 0.00199724f, 0.00184848f, 0.00271808f, 0.00165446f, 0.00141829f, 0.00129219f, 0.00133743f, 0.00177108f, 0.00172683f, 0.00150023f, 0.00184971f, 0.00138217f, 0.0015186f, 0.00151364f, 0.00172762f, 0.0029413f, 0.00134892f, 0.00154404f, 0.00130533f, 0.0018969f, 0.00159902f, 0.00180297f, 0.00196027f, 0.00154216f, 0.00147955f, 0.00178308f, 0.00207986f, 0.00145115f, 0.00130809f, 0.00110672f, 0.00140693f, 0.00162868f, 0.00182186f, 0.0018983f, 0.00197005f, 0.00206921f, 0.00115371f, 0.00165325f, 0.00165137f, 0.00174213f, 0.00168953f, 0.00234461f, 0.00119761f, 0.00149895f, 0.00193184f, 0.00150134f, 0.00170226f, 0.0012355f, 0.00144229f, 0.00137336f, 0.00159042f, 0.00136868f, 0.00170236f, 0.00228978f, 0.00159994f, 0.00157131f, 0.00205226f, 0.00194788f, 0.00140139f, 0.00155937f, 0.00124301f, 0.00139586f, 0.00160005f, 0.00183512f, 0.00187546f, 0.00139566f, 0.00150412f, 0.00169087f, 0.00177094f, 0.00168349f, 0.00227863f, 0.00130353f, 0.00145135f, 0.00150712f, 0.0015968f, 0.00229091f, 0.00178822f, 0.00162855f, 0.0012658f, 0.00168044f, 0.00198372f, 0.00186808f, 0.00160439f, 0.00217638f, 0.00151591f, 0.0017146f, 0.00186747f, 0.00151312f, 0.00153666f, 0.00171069f, 0.00124567f, 0.00138666f, 0.00167004f, 0.00190661f, 0.00131978f, 0.00136609f, 0.00175333f, 0.0017746f, 0.00176425f, 0.00155069f, 0.00134813f, 0.00180182f, 0.00155169f, 0.00154347f, 0.0017813f, 0.00156906f, 0.00157523f, 0.00199244f, 0.00275772f, 0.00150695f, 0.00182354f, 0.00142026f, 0.00132315f, 0.0016013f, 0.00153943f, 0.00143777f, 0.00181293f, 0.00139612f, 0.00171382f, 0.00172668f, 0.00161028f, 0.0013695f, 0.00150444f, 0.00173979f, 0.00127465f, 0.00251279f, 0.00156139f, 0.00165149f, 0.00182128f, 0.00162227f, 0.00159282f, 0.00160742f, 0.00158946f, 0.00151602f, 0.00163658f, 0.00180808f, 0.00148842f, 0.001917f, 0.00113019f, 0.00186158f, 0.00162961f, 0.00164151f, 0.00191482f, 0.00406093f, 0.00176871f, 0.0018757f, 0.00151028f, 0.00185886f, 0.00159641f, 0.00123776f, 0.00178505f, 0.00200218f, 0.00160262f, 0.00125228f, 0.00182164f, 0.00147219f, 0.00143647f, 0.00158537f, 0.00186856f, 0.00189285f, 0.00167285f, 0.00289996f, 0.00157637f, 0.00149909f, 0.00175609f, 0.00126376f, 0.00166182f, 0.00156506f, 0.00156959f, 0.00160857f, 0.0019515f, 0.00161259f, 0.00137456f, 0.00258527f, 0.00139134f, 0.00139312f, 0.00162196f, 0.00172034f, 0.00172501f, 0.00148803f, 0.0020337f, 0.00170046f, 0.00168984f, 0.00145004f, 0.00135022f, 0.00189423f, 0.00144515f, 0.00207778f, 0.00148925f, 0.00145201f, 0.00428291f, 0.00145302f, 0.00131828f, 0.00128601f, 0.00122937f, 0.00165204f, 0.00187256f, 0.00156925f, 0.00167836f, 0.00136549f, 0.0021763f, 0.00156383f, 0.00164075f, 0.00140713f, 0.00140319f, 0.00181817f, 0.00149685f, 0.00184395f, 0.00152249f, 0.00128308f, 0.00260089f, 0.00154433f, 0.00261606f, 0.00125764f, 0.00125381f, 0.00121391f, 0.00167365f, 0.00144395f, 0.00155724f, 0.00162749f, 0.00218832f, 0.00150471f, 0.00169429f, 0.00152761f, 0.00346609f, 0.00134804f, 0.00234538f, 0.00144637f, 0.00129224f, 0.00146133f, 0.00131918f, 0.0012521f, 0.0029564f, 0.00147416f, 0.00164818f, 0.00138518f, 0.0014315f, 0.00161032f, 0.00149085f, 0.00153809f, 0.00154775f, 0.00216695f, 0.00176255f, 0.00158526f, 0.00143017f, 0.00147789f, 0.00175585f, 0.00178935f, 0.0015437f, 0.0019111f, 0.00140613f, 0.00160474f, 0.00178484f, 0.0013659f, 0.00147903f, 0.00139035f, 0.00275777f, 0.00188283f, 0.00124534f, 0.0015204f, 0.0017499f, 0.00164512f, 0.00145893f, 0.00151446f, 0.00153182f, 0.00162145f, 0.00164346f, 0.00175771f, 0.00151474f, 0.0017938f, 0.00126253f, 0.00147465f, 0.00175754f, 0.0019722f, 0.00114949f, 0.00252836f, 0.00254837f, 0.00166094f, 0.00158285f, 0.00187643f, 0.00133496f, 0.00193438f, 0.00171797f, 0.00147614f, 0.00117562f, 0.00175879f, 0.00161828f, 0.00248663f, 0.00170439f, 0.00182316f, 0.00200272f, 0.00132716f, 0.00252645f, 0.00121637f, 0.00142232f, 0.0014928f, 0.00165277f, 0.00203239f, 0.0017965f, 0.00143746f, 0.00177049f, 0.00129938f, 0.00112321f, 0.00147137f, 0.00160441f, 0.00146948f, 0.00169901f, 0.00158558f, 0.00117643f, 0.0019035f, 0.00149845f, 0.00135954f, 0.00166321f, 0.00171501f, 0.00142111f, 0.00184395f, 0.00153143f, 0.00165385f, 0.00171065f, 0.00197481f, 0.00155757f, 0.00151297f, 0.00223389f, 0.00168687f, 0.00161661f, 0.00218488f, 0.00170127f, 0.00196703f, 0.00150655f, 0.00171882f, 0.00147247f, 0.00176161f, 0.00169923f, 0.00146175f, 0.0019012f, 0.00192953f, 0.00153898f, 0.00150465f, 0.00132568f, 0.00169868f, 0.00159064f, 0.00166972f, 0.00318791f, 0.00184325f, 0.0013609f, 0.00136979f, 0.00152742f, 0.00142197f, 0.00153142f, 0.00138785f, 0.00201155f, 0.00156035f, 0.0025792f, 0.00170959f, 0.00128602f, 0.00157994f, 0.00344937f, 0.00118167f, 0.00172581f, 0.00141766f, 0.00142072f, 0.00159818f, 0.00108403f, 0.00184667f, 0.00228691f, 0.00156235f, 0.00150866f, 0.00133792f, 0.00292799f, 0.00140669f, 0.00180649f, 0.00126091f, 0.00136941f, 0.00136446f, 0.00166842f, 0.00157995f, 0.00153225f, 0.00166831f, 0.00137559f, 0.00153793f, 0.0015446f, 0.00161305f, 0.00154291f, 0.00153288f, 0.00159567f, 0.00196628f, 0.00129801f, 0.00200746f, 0.00165087f, 0.00200801f, 0.00162639f, 0.00161191f, 0.00156693f, 0.00144059f, 0.00167163f, 0.00134306f, 0.00212336f, 0.00209865f, 0.00195733f, 0.00149584f, 0.00130131f, 0.00163688f, 0.00163368f, 0.0017203f, 0.00156967f, 0.00112326f, 0.00168354f, 0.00131546f, 0.00224318f, 0.00175467f, 0.00168495f, 0.00224427f, 0.00158092f, 0.00170411f, 0.00160852f, 0.00145545f, 0.0015039f, 0.00158588f, 0.00131769f, 0.00171347f, 0.00155492f, 0.00131995f, 0.00121947f, 0.00165874f, 0.0018575f, 0.00194701f, 0.00130204f, 0.00159934f, 0.00169834f, 0.00177714f, 0.00166698f, 0.0015412f, 0.00123828f, 0.00168958f], rhs_zero_points=[128, 157, 119, 134, 105, 107, 115, 123, 100, 149, 116, 147, 137, 119, 90, 127, 114, 144, 107, 121, 123, 145, 124, 140, 124, 137, 132, 99, 132, 131, 127, 134, 130, 84, 117, 113, 139, 120, 135, 141, 95, 140, 90, 133, 133, 136, 140, 93, 127, 127, 101, 107, 144, 155, 132, 151, 126, 134, 123, 148, 144, 128, 128, 115, 115, 126, 129, 144, 109, 130, 119, 123, 112, 111, 61, 110, 126, 141, 143, 100, 160, 118, 112, 143, 129, 114, 139, 116, 133, 107, 111, 134, 133, 68, 118, 148, 126, 112, 127, 92, 141, 148, 145, 99, 96, 109, 148, 135, 158, 135, 109, 110, 129, 142, 119, 128, 96, 120, 145, 143, 143, 126, 113, 135, 116, 128, 130, 147, 125, 97, 127, 93, 135, 122, 142, 97, 126, 131, 119, 122, 121, 97, 124, 113, 105, 130, 111, 133, 107, 127, 119, 120, 139, 109, 115, 126, 111, 114, 121, 111, 80, 143, 128, 141, 116, 154, 124, 125, 147, 124, 130, 155, 122, 118, 94, 131, 124, 128, 121, 146, 131, 139, 119, 122, 112, 113, 172, 107, 100, 118, 122, 118, 123, 128, 119, 95, 123, 125, 151, 115, 134, 91, 116, 77, 129, 126, 101, 119, 138, 127, 146, 110, 116, 112, 148, 115, 148, 115, 137, 126, 109, 132, 98, 153, 130, 100, 130, 129, 94, 91, 113, 140, 140, 116, 124, 123, 122, 134, 119, 139, 140, 120, 129, 130, 103, 123, 137, 160, 124, 135, 107, 127, 126, 145, 113, 111, 91, 104, 98, 86, 129, 118, 129, 112, 107, 107, 109, 123, 202, 143, 103, 136, 131, 96, 103, 104, 110, 124, 113, 138, 139, 135, 129, 97, 112, 113, 131, 82, 143, 133, 77, 145, 147, 134, 114, 117, 129, 110, 97, 125, 139, 112, 135, 120, 76, 105, 136, 124, 141, 124, 135, 130, 144, 101, 115, 136, 131, 107, 112, 135, 141, 114, 120, 129, 122, 95, 130, 141, 135, 131, 108, 135, 104, 128, 150, 142, 117, 122, 112, 121, 123, 106, 143, 156, 137, 116, 132, 116, 126, 141, 142, 120, 140, 125, 135, 141, 125, 123, 119, 80, 132, 116, 145, 124, 126, 89, 112, 130, 86, 126, 122, 130, 130, 130, 124, 135, 141, 136, 125, 142, 131, 136, 118, 132, 96, 102, 134, 73, 114, 104, 107, 107, 124, 125, 141, 140, 117, 156, 120, 100, 87, 112, 146, 132, 114, 118, 133, 108, 123, 130, 120, 130, 147, 131, 121, 116, 123, 124, 130, 111, 160, 135, 123, 125, 111, 109, 120, 114, 138, 138, 100, 118, 118, 135, 133, 122, 121, 111, 107, 112, 137, 119, 114, 113, 134, 125, 121, 121, 115, 123, 112, 145, 109, 154, 124, 107, 117, 108, 128, 119, 120, 130, 125, 126, 134, 123, 127, 99, 117, 133, 117, 119, 108, 112, 133, 104, 138, 150, 141, 119, 137, 115, 134, 134, 135, 140, 131, 127, 141, 109, 116, 116, 146, 145, 132, 150, 120, 128, 125, 121, 134, 112, 135, 152, 125, 135, 105, 129, 123, 147, 136, 121], scales=[0.049889f], zero_points=[161]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %358 = %357(%356, meta[relay.Constant][310] /* ty=Tensor[(512, 256, 1, 1), uint8] */, meta[relay.Constant][311] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0350616f], lhs_zero_points=[78], rhs_scales=[0.00137533f, 0.00285882f, 0.00218705f, 0.00107148f, 0.00144451f, 0.00152936f, 0.00173837f, 0.0014249f, 0.00156842f, 0.00210585f, 0.00161997f, 0.00127582f, 0.00186694f, 0.00173501f, 0.00172105f, 0.00165445f, 0.00136328f, 0.00118453f, 0.00134716f, 0.00158228f, 0.00142117f, 0.00106879f, 0.00110032f, 0.00138511f, 0.0014977f, 0.00140658f, 0.00151237f, 0.00158237f, 0.00197825f, 0.00122096f, 0.00169083f, 0.00158344f, 0.00183273f, 0.00177519f, 0.00206047f, 0.00173086f, 0.00100084f, 0.00154805f, 0.00179896f, 0.00220637f, 0.00145209f, 0.00162091f, 0.00181337f, 0.00163044f, 0.00188417f, 0.00171955f, 0.00142411f, 0.0018662f, 0.00136942f, 0.00142116f, 0.00206693f, 0.0018479f, 0.00153823f, 0.0013984f, 0.00192824f, 0.00124934f, 0.00168462f, 0.00156681f, 0.00190899f, 0.00176226f, 0.00155171f, 0.00180684f, 0.00147204f, 0.00151282f, 0.00148442f, 0.00185691f, 0.00175451f, 0.00116953f, 0.00189795f, 0.0016809f, 0.00183643f, 0.00158609f, 0.00174218f, 0.00170553f, 0.00287078f, 0.00152648f, 0.0014661f, 0.00128799f, 0.00199724f, 0.00184848f, 0.00271808f, 0.00165446f, 0.00141829f, 0.00129219f, 0.00133743f, 0.00177108f, 0.00172683f, 0.00150023f, 0.00184971f, 0.00138217f, 0.0015186f, 0.00151364f, 0.00172762f, 0.0029413f, 0.00134892f, 0.00154404f, 0.00130533f, 0.0018969f, 0.00159902f, 0.00180297f, 0.00196027f, 0.00154216f, 0.00147955f, 0.00178308f, 0.00207986f, 0.00145115f, 0.00130809f, 0.00110672f, 0.00140693f, 0.00162868f, 0.00182186f, 0.0018983f, 0.00197005f, 0.00206921f, 0.00115371f, 0.00165325f, 0.00165137f, 0.00174213f, 0.00168953f, 0.00234461f, 0.00119761f, 0.00149895f, 0.00193184f, 0.00150134f, 0.00170226f, 0.0012355f, 0.00144229f, 0.00137336f, 0.00159042f, 0.00136868f, 0.00170236f, 0.00228978f, 0.00159994f, 0.00157131f, 0.00205226f, 0.00194788f, 0.00140139f, 0.00155937f, 0.00124301f, 0.00139586f, 0.00160005f, 0.00183512f, 0.00187546f, 0.00139566f, 0.00150412f, 0.00169087f, 0.00177094f, 0.00168349f, 0.00227863f, 0.00130353f, 0.00145135f, 0.00150712f, 0.0015968f, 0.00229091f, 0.00178822f, 0.00162855f, 0.0012658f, 0.00168044f, 0.00198372f, 0.00186808f, 0.00160439f, 0.00217638f, 0.00151591f, 0.0017146f, 0.00186747f, 0.00151312f, 0.00153666f, 0.00171069f, 0.00124567f, 0.00138666f, 0.00167004f, 0.00190661f, 0.00131978f, 0.00136609f, 0.00175333f, 0.0017746f, 0.00176425f, 0.00155069f, 0.00134813f, 0.00180182f, 0.00155169f, 0.00154347f, 0.0017813f, 0.00156906f, 0.00157523f, 0.00199244f, 0.00275772f, 0.00150695f, 0.00182354f, 0.00142026f, 0.00132315f, 0.0016013f, 0.00153943f, 0.00143777f, 0.00181293f, 0.00139612f, 0.00171382f, 0.00172668f, 0.00161028f, 0.0013695f, 0.00150444f, 0.00173979f, 0.00127465f, 0.00251279f, 0.00156139f, 0.00165149f, 0.00182128f, 0.00162227f, 0.00159282f, 0.00160742f, 0.00158946f, 0.00151602f, 0.00163658f, 0.00180808f, 0.00148842f, 0.001917f, 0.00113019f, 0.00186158f, 0.00162961f, 0.00164151f, 0.00191482f, 0.00406093f, 0.00176871f, 0.0018757f, 0.00151028f, 0.00185886f, 0.00159641f, 0.00123776f, 0.00178505f, 0.00200218f, 0.00160262f, 0.00125228f, 0.00182164f, 0.00147219f, 0.00143647f, 0.00158537f, 0.00186856f, 0.00189285f, 0.00167285f, 0.00289996f, 0.00157637f, 0.00149909f, 0.00175609f, 0.00126376f, 0.00166182f, 0.00156506f, 0.00156959f, 0.00160857f, 0.0019515f, 0.00161259f, 0.00137456f, 0.00258527f, 0.00139134f, 0.00139312f, 0.00162196f, 0.00172034f, 0.00172501f, 0.00148803f, 0.0020337f, 0.00170046f, 0.00168984f, 0.00145004f, 0.00135022f, 0.00189423f, 0.00144515f, 0.00207778f, 0.00148925f, 0.00145201f, 0.00428291f, 0.00145302f, 0.00131828f, 0.00128601f, 0.00122937f, 0.00165204f, 0.00187256f, 0.00156925f, 0.00167836f, 0.00136549f, 0.0021763f, 0.00156383f, 0.00164075f, 0.00140713f, 0.00140319f, 0.00181817f, 0.00149685f, 0.00184395f, 0.00152249f, 0.00128308f, 0.00260089f, 0.00154433f, 0.00261606f, 0.00125764f, 0.00125381f, 0.00121391f, 0.00167365f, 0.00144395f, 0.00155724f, 0.00162749f, 0.00218832f, 0.00150471f, 0.00169429f, 0.00152761f, 0.00346609f, 0.00134804f, 0.00234538f, 0.00144637f, 0.00129224f, 0.00146133f, 0.00131918f, 0.0012521f, 0.0029564f, 0.00147416f, 0.00164818f, 0.00138518f, 0.0014315f, 0.00161032f, 0.00149085f, 0.00153809f, 0.00154775f, 0.00216695f, 0.00176255f, 0.00158526f, 0.00143017f, 0.00147789f, 0.00175585f, 0.00178935f, 0.0015437f, 0.0019111f, 0.00140613f, 0.00160474f, 0.00178484f, 0.0013659f, 0.00147903f, 0.00139035f, 0.00275777f, 0.00188283f, 0.00124534f, 0.0015204f, 0.0017499f, 0.00164512f, 0.00145893f, 0.00151446f, 0.00153182f, 0.00162145f, 0.00164346f, 0.00175771f, 0.00151474f, 0.0017938f, 0.00126253f, 0.00147465f, 0.00175754f, 0.0019722f, 0.00114949f, 0.00252836f, 0.00254837f, 0.00166094f, 0.00158285f, 0.00187643f, 0.00133496f, 0.00193438f, 0.00171797f, 0.00147614f, 0.00117562f, 0.00175879f, 0.00161828f, 0.00248663f, 0.00170439f, 0.00182316f, 0.00200272f, 0.00132716f, 0.00252645f, 0.00121637f, 0.00142232f, 0.0014928f, 0.00165277f, 0.00203239f, 0.0017965f, 0.00143746f, 0.00177049f, 0.00129938f, 0.00112321f, 0.00147137f, 0.00160441f, 0.00146948f, 0.00169901f, 0.00158558f, 0.00117643f, 0.0019035f, 0.00149845f, 0.00135954f, 0.00166321f, 0.00171501f, 0.00142111f, 0.00184395f, 0.00153143f, 0.00165385f, 0.00171065f, 0.00197481f, 0.00155757f, 0.00151297f, 0.00223389f, 0.00168687f, 0.00161661f, 0.00218488f, 0.00170127f, 0.00196703f, 0.00150655f, 0.00171882f, 0.00147247f, 0.00176161f, 0.00169923f, 0.00146175f, 0.0019012f, 0.00192953f, 0.00153898f, 0.00150465f, 0.00132568f, 0.00169868f, 0.00159064f, 0.00166972f, 0.00318791f, 0.00184325f, 0.0013609f, 0.00136979f, 0.00152742f, 0.00142197f, 0.00153142f, 0.00138785f, 0.00201155f, 0.00156035f, 0.0025792f, 0.00170959f, 0.00128602f, 0.00157994f, 0.00344937f, 0.00118167f, 0.00172581f, 0.00141766f, 0.00142072f, 0.00159818f, 0.00108403f, 0.00184667f, 0.00228691f, 0.00156235f, 0.00150866f, 0.00133792f, 0.00292799f, 0.00140669f, 0.00180649f, 0.00126091f, 0.00136941f, 0.00136446f, 0.00166842f, 0.00157995f, 0.00153225f, 0.00166831f, 0.00137559f, 0.00153793f, 0.0015446f, 0.00161305f, 0.00154291f, 0.00153288f, 0.00159567f, 0.00196628f, 0.00129801f, 0.00200746f, 0.00165087f, 0.00200801f, 0.00162639f, 0.00161191f, 0.00156693f, 0.00144059f, 0.00167163f, 0.00134306f, 0.00212336f, 0.00209865f, 0.00195733f, 0.00149584f, 0.00130131f, 0.00163688f, 0.00163368f, 0.0017203f, 0.00156967f, 0.00112326f, 0.00168354f, 0.00131546f, 0.00224318f, 0.00175467f, 0.00168495f, 0.00224427f, 0.00158092f, 0.00170411f, 0.00160852f, 0.00145545f, 0.0015039f, 0.00158588f, 0.00131769f, 0.00171347f, 0.00155492f, 0.00131995f, 0.00121947f, 0.00165874f, 0.0018575f, 0.00194701f, 0.00130204f, 0.00159934f, 0.00169834f, 0.00177714f, 0.00166698f, 0.0015412f, 0.00123828f, 0.00168958f], rhs_zero_points=[128, 157, 119, 134, 105, 107, 115, 123, 100, 149, 116, 147, 137, 119, 90, 127, 114, 144, 107, 121, 123, 145, 124, 140, 124, 137, 132, 99, 132, 131, 127, 134, 130, 84, 117, 113, 139, 120, 135, 141, 95, 140, 90, 133, 133, 136, 140, 93, 127, 127, 101, 107, 144, 155, 132, 151, 126, 134, 123, 148, 144, 128, 128, 115, 115, 126, 129, 144, 109, 130, 119, 123, 112, 111, 61, 110, 126, 141, 143, 100, 160, 118, 112, 143, 129, 114, 139, 116, 133, 107, 111, 134, 133, 68, 118, 148, 126, 112, 127, 92, 141, 148, 145, 99, 96, 109, 148, 135, 158, 135, 109, 110, 129, 142, 119, 128, 96, 120, 145, 143, 143, 126, 113, 135, 116, 128, 130, 147, 125, 97, 127, 93, 135, 122, 142, 97, 126, 131, 119, 122, 121, 97, 124, 113, 105, 130, 111, 133, 107, 127, 119, 120, 139, 109, 115, 126, 111, 114, 121, 111, 80, 143, 128, 141, 116, 154, 124, 125, 147, 124, 130, 155, 122, 118, 94, 131, 124, 128, 121, 146, 131, 139, 119, 122, 112, 113, 172, 107, 100, 118, 122, 118, 123, 128, 119, 95, 123, 125, 151, 115, 134, 91, 116, 77, 129, 126, 101, 119, 138, 127, 146, 110, 116, 112, 148, 115, 148, 115, 137, 126, 109, 132, 98, 153, 130, 100, 130, 129, 94, 91, 113, 140, 140, 116, 124, 123, 122, 134, 119, 139, 140, 120, 129, 130, 103, 123, 137, 160, 124, 135, 107, 127, 126, 145, 113, 111, 91, 104, 98, 86, 129, 118, 129, 112, 107, 107, 109, 123, 202, 143, 103, 136, 131, 96, 103, 104, 110, 124, 113, 138, 139, 135, 129, 97, 112, 113, 131, 82, 143, 133, 77, 145, 147, 134, 114, 117, 129, 110, 97, 125, 139, 112, 135, 120, 76, 105, 136, 124, 141, 124, 135, 130, 144, 101, 115, 136, 131, 107, 112, 135, 141, 114, 120, 129, 122, 95, 130, 141, 135, 131, 108, 135, 104, 128, 150, 142, 117, 122, 112, 121, 123, 106, 143, 156, 137, 116, 132, 116, 126, 141, 142, 120, 140, 125, 135, 141, 125, 123, 119, 80, 132, 116, 145, 124, 126, 89, 112, 130, 86, 126, 122, 130, 130, 130, 124, 135, 141, 136, 125, 142, 131, 136, 118, 132, 96, 102, 134, 73, 114, 104, 107, 107, 124, 125, 141, 140, 117, 156, 120, 100, 87, 112, 146, 132, 114, 118, 133, 108, 123, 130, 120, 130, 147, 131, 121, 116, 123, 124, 130, 111, 160, 135, 123, 125, 111, 109, 120, 114, 138, 138, 100, 118, 118, 135, 133, 122, 121, 111, 107, 112, 137, 119, 114, 113, 134, 125, 121, 121, 115, 123, 112, 145, 109, 154, 124, 107, 117, 108, 128, 119, 120, 130, 125, 126, 134, 123, 127, 99, 117, 133, 117, 119, 108, 112, 133, 104, 138, 150, 141, 119, 137, 115, 134, 134, 135, 140, 131, 127, 141, 109, 116, 116, 146, 145, 132, 150, 120, 128, 125, 121, 134, 112, 135, 152, 125, 135, 105, 129, 123, 147, 136, 121], scales=[0.049889f], zero_points=[161], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %359 = dl.dequantize(%358, input_scales=[0.049889f], input_zero_points=[161]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %360 = sigmoid(%359) /* /model.10/m/m.0/ffn/ffn.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %361 = multiply(%359, %360) /* /model.10/m/m.0/ffn/ffn.0/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %362 = dl.quantize(%361, output_scales=[0.0192445f], output_zero_points=[14]) /* fake_quant_125 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %363 = fn (%FunctionVar_49_0: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_49_1: Tensor[(256, 512, 1, 1), uint8], %FunctionVar_49_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aafb0558)) -> Tensor[(1, 256, 20, 20), uint8] {
    %353 = (%FunctionVar_49_0, %FunctionVar_49_1, %FunctionVar_49_2, meta[relay.Constant][300] /* ty=Tensor[(256), float32] */, meta[relay.Constant][301] /* ty=Tensor[(256), int32] */, meta[relay.Constant][302] /* ty=Tensor[(256), int32] */, meta[relay.Constant][303] /* ty=Tensor[(256), int32] */, meta[relay.Constant][304] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%353, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0192445f], lhs_zero_points=[14], rhs_scales=[0.00136914f, 0.00155682f, 0.00186533f, 0.0015122f, 0.00172422f, 0.00146386f, 0.00155628f, 0.00112411f, 0.00117238f, 0.00116751f, 0.00151303f, 0.00109188f, 0.00100699f, 0.00166091f, 0.00121711f, 0.00146648f, 0.00149415f, 0.00165421f, 0.00150032f, 0.00118833f, 0.00139792f, 0.00165206f, 0.000644336f, 0.0019351f, 0.0016674f, 0.00149796f, 0.00101748f, 0.00216835f, 0.00166845f, 0.000978884f, 0.00189062f, 0.00210993f, 0.000888612f, 0.00140971f, 0.000904715f, 0.00116987f, 0.00122881f, 0.00189305f, 0.00289115f, 0.00131714f, 0.00225984f, 0.00179176f, 0.00145749f, 0.00190053f, 0.00033807f, 0.00139315f, 0.00231296f, 0.00132945f, 0.0016578f, 0.00120185f, 0.00103415f, 0.001361f, 0.00126597f, 0.00135002f, 0.00138723f, 0.00113674f, 0.0011714f, 0.00149081f, 0.00164367f, 0.00193517f, 0.00118052f, 0.00140652f, 0.0018196f, 0.00139152f, 0.00159616f, 0.00136992f, 0.00082934f, 0.00230157f, 0.00063622f, 0.00146612f, 0.00151388f, 0.00165093f, 0.00192277f, 0.00135774f, 0.00136146f, 0.00433695f, 0.00108468f, 0.001016f, 0.00154865f, 0.00174245f, 0.0011535f, 0.00172576f, 0.00148171f, 0.0013282f, 0.00154764f, 0.00111353f, 0.00122988f, 0.00168673f, 0.00209965f, 0.00131465f, 0.00121834f, 0.00063959f, 0.0010251f, 0.00171047f, 0.00152113f, 0.00119708f, 0.00109652f, 0.000859244f, 0.00170029f, 0.00121419f, 0.001097f, 0.00131614f, 0.00319603f, 0.00186176f, 0.00117917f, 0.00109671f, 0.00136309f, 0.00198126f, 0.00197101f, 0.00117464f, 0.00134456f, 0.000907308f, 0.0017102f, 0.001336f, 0.001116f, 0.000987926f, 0.00167279f, 0.00155987f, 0.000450394f, 0.000998095f, 0.0021621f, 0.00175974f, 0.00140628f, 0.00100485f, 0.00115471f, 0.00109961f, 0.00109492f, 0.00236306f, 0.0014657f, 0.0015003f, 0.00256441f, 0.0012347f, 0.00113229f, 0.00156401f, 0.00154009f, 0.00425866f, 0.000905893f, 0.0013307f, 0.00136545f, 0.00191826f, 0.00153145f, 0.00151377f, 0.00110977f, 0.00127702f, 0.00167264f, 0.00136989f, 0.00134679f, 0.00156962f, 0.00206929f, 0.00136169f, 0.00154461f, 0.00178738f, 0.00236802f, 0.00142728f, 0.00165152f, 0.00101812f, 0.000443772f, 0.00210605f, 0.00119204f, 0.00166167f, 0.00137006f, 0.00188472f, 0.00144276f, 0.00107686f, 0.00116232f, 0.00332446f, 0.000853429f, 0.00113424f, 0.00166949f, 0.00119424f, 0.0014712f, 0.00128693f, 0.00183634f, 0.00154257f, 0.00122895f, 0.00170801f, 0.00119687f, 0.00198407f, 0.00241296f, 0.00137463f, 0.000903261f, 0.00123433f, 0.00123199f, 0.00101412f, 0.00146045f, 0.00129802f, 0.00226817f, 0.00106039f, 0.00130783f, 0.00163659f, 0.00115557f, 0.00115705f, 0.00097932f, 0.00165385f, 0.00713494f, 0.00162703f, 0.00137829f, 0.000919551f, 0.00131273f, 0.00229331f, 0.0017661f, 0.00116307f, 0.00129892f, 0.00179185f, 0.00108131f, 0.00208467f, 0.00101244f, 0.001182f, 0.00135269f, 0.00144403f, 0.00142709f, 0.000776394f, 0.00119842f, 0.00100376f, 0.000110038f, 0.00124904f, 0.00175485f, 0.00128841f, 0.00147501f, 0.00110864f, 0.00114807f, 0.00148726f, 0.00141139f, 0.00181406f, 0.00163123f, 0.00153281f, 0.00100296f, 0.00205978f, 0.00122472f, 0.00208565f, 0.0016514f, 0.00134651f, 0.00101007f, 0.00141535f, 0.00153646f, 0.00149508f, 0.000739752f, 0.00128921f, 0.00126241f, 0.00129492f, 0.00144693f, 0.00150632f, 0.00189257f, 0.00104584f, 0.00158986f, 0.00221306f, 0.00195753f, 0.00173028f, 0.00109695f, 0.00148319f, 0.0010729f, 0.00140209f, 0.00135398f, 0.00121277f, 0.001648f, 0.00137777f], rhs_zero_points=[121, 119, 127, 107, 113, 126, 116, 124, 137, 128, 132, 125, 112, 103, 147, 123, 122, 113, 104, 138, 130, 110, 137, 138, 142, 126, 115, 157, 114, 136, 122, 105, 121, 150, 112, 123, 121, 117, 172, 112, 126, 133, 113, 128, 142, 121, 132, 142, 131, 118, 123, 130, 135, 107, 136, 108, 138, 126, 109, 133, 127, 134, 137, 131, 125, 135, 151, 131, 119, 167, 124, 127, 118, 117, 117, 163, 127, 135, 131, 114, 119, 130, 128, 122, 125, 129, 137, 109, 147, 118, 132, 126, 132, 145, 140, 99, 129, 109, 100, 121, 109, 120, 109, 145, 151, 116, 121, 127, 131, 132, 134, 116, 128, 159, 137, 139, 151, 131, 134, 130, 142, 108, 116, 130, 132, 132, 118, 107, 126, 125, 78, 128, 127, 123, 139, 176, 120, 107, 120, 96, 122, 147, 121, 126, 158, 110, 125, 124, 99, 121, 141, 106, 176, 118, 115, 116, 123, 142, 129, 155, 120, 141, 110, 115, 121, 95, 129, 123, 130, 104, 141, 122, 132, 117, 130, 145, 134, 113, 135, 107, 140, 163, 143, 118, 135, 111, 171, 129, 140, 123, 119, 111, 134, 128, 168, 118, 131, 134, 132, 122, 150, 140, 128, 112, 116, 130, 125, 123, 156, 133, 130, 129, 110, 134, 116, 134, 148, 106, 144, 126, 117, 115, 122, 144, 114, 153, 128, 145, 114, 135, 115, 167, 111, 132, 117, 141, 106, 157, 127, 159, 139, 125, 128, 110, 129, 104, 138, 163, 110, 141, 134, 116, 112, 140, 134, 131], scales=[0.0276784f], zero_points=[136]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %364 = %363(%362, meta[relay.Constant][312] /* ty=Tensor[(256, 512, 1, 1), uint8] */, meta[relay.Constant][313] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0192445f], lhs_zero_points=[14], rhs_scales=[0.00136914f, 0.00155682f, 0.00186533f, 0.0015122f, 0.00172422f, 0.00146386f, 0.00155628f, 0.00112411f, 0.00117238f, 0.00116751f, 0.00151303f, 0.00109188f, 0.00100699f, 0.00166091f, 0.00121711f, 0.00146648f, 0.00149415f, 0.00165421f, 0.00150032f, 0.00118833f, 0.00139792f, 0.00165206f, 0.000644336f, 0.0019351f, 0.0016674f, 0.00149796f, 0.00101748f, 0.00216835f, 0.00166845f, 0.000978884f, 0.00189062f, 0.00210993f, 0.000888612f, 0.00140971f, 0.000904715f, 0.00116987f, 0.00122881f, 0.00189305f, 0.00289115f, 0.00131714f, 0.00225984f, 0.00179176f, 0.00145749f, 0.00190053f, 0.00033807f, 0.00139315f, 0.00231296f, 0.00132945f, 0.0016578f, 0.00120185f, 0.00103415f, 0.001361f, 0.00126597f, 0.00135002f, 0.00138723f, 0.00113674f, 0.0011714f, 0.00149081f, 0.00164367f, 0.00193517f, 0.00118052f, 0.00140652f, 0.0018196f, 0.00139152f, 0.00159616f, 0.00136992f, 0.00082934f, 0.00230157f, 0.00063622f, 0.00146612f, 0.00151388f, 0.00165093f, 0.00192277f, 0.00135774f, 0.00136146f, 0.00433695f, 0.00108468f, 0.001016f, 0.00154865f, 0.00174245f, 0.0011535f, 0.00172576f, 0.00148171f, 0.0013282f, 0.00154764f, 0.00111353f, 0.00122988f, 0.00168673f, 0.00209965f, 0.00131465f, 0.00121834f, 0.00063959f, 0.0010251f, 0.00171047f, 0.00152113f, 0.00119708f, 0.00109652f, 0.000859244f, 0.00170029f, 0.00121419f, 0.001097f, 0.00131614f, 0.00319603f, 0.00186176f, 0.00117917f, 0.00109671f, 0.00136309f, 0.00198126f, 0.00197101f, 0.00117464f, 0.00134456f, 0.000907308f, 0.0017102f, 0.001336f, 0.001116f, 0.000987926f, 0.00167279f, 0.00155987f, 0.000450394f, 0.000998095f, 0.0021621f, 0.00175974f, 0.00140628f, 0.00100485f, 0.00115471f, 0.00109961f, 0.00109492f, 0.00236306f, 0.0014657f, 0.0015003f, 0.00256441f, 0.0012347f, 0.00113229f, 0.00156401f, 0.00154009f, 0.00425866f, 0.000905893f, 0.0013307f, 0.00136545f, 0.00191826f, 0.00153145f, 0.00151377f, 0.00110977f, 0.00127702f, 0.00167264f, 0.00136989f, 0.00134679f, 0.00156962f, 0.00206929f, 0.00136169f, 0.00154461f, 0.00178738f, 0.00236802f, 0.00142728f, 0.00165152f, 0.00101812f, 0.000443772f, 0.00210605f, 0.00119204f, 0.00166167f, 0.00137006f, 0.00188472f, 0.00144276f, 0.00107686f, 0.00116232f, 0.00332446f, 0.000853429f, 0.00113424f, 0.00166949f, 0.00119424f, 0.0014712f, 0.00128693f, 0.00183634f, 0.00154257f, 0.00122895f, 0.00170801f, 0.00119687f, 0.00198407f, 0.00241296f, 0.00137463f, 0.000903261f, 0.00123433f, 0.00123199f, 0.00101412f, 0.00146045f, 0.00129802f, 0.00226817f, 0.00106039f, 0.00130783f, 0.00163659f, 0.00115557f, 0.00115705f, 0.00097932f, 0.00165385f, 0.00713494f, 0.00162703f, 0.00137829f, 0.000919551f, 0.00131273f, 0.00229331f, 0.0017661f, 0.00116307f, 0.00129892f, 0.00179185f, 0.00108131f, 0.00208467f, 0.00101244f, 0.001182f, 0.00135269f, 0.00144403f, 0.00142709f, 0.000776394f, 0.00119842f, 0.00100376f, 0.000110038f, 0.00124904f, 0.00175485f, 0.00128841f, 0.00147501f, 0.00110864f, 0.00114807f, 0.00148726f, 0.00141139f, 0.00181406f, 0.00163123f, 0.00153281f, 0.00100296f, 0.00205978f, 0.00122472f, 0.00208565f, 0.0016514f, 0.00134651f, 0.00101007f, 0.00141535f, 0.00153646f, 0.00149508f, 0.000739752f, 0.00128921f, 0.00126241f, 0.00129492f, 0.00144693f, 0.00150632f, 0.00189257f, 0.00104584f, 0.00158986f, 0.00221306f, 0.00195753f, 0.00173028f, 0.00109695f, 0.00148319f, 0.0010729f, 0.00140209f, 0.00135398f, 0.00121277f, 0.001648f, 0.00137777f], rhs_zero_points=[121, 119, 127, 107, 113, 126, 116, 124, 137, 128, 132, 125, 112, 103, 147, 123, 122, 113, 104, 138, 130, 110, 137, 138, 142, 126, 115, 157, 114, 136, 122, 105, 121, 150, 112, 123, 121, 117, 172, 112, 126, 133, 113, 128, 142, 121, 132, 142, 131, 118, 123, 130, 135, 107, 136, 108, 138, 126, 109, 133, 127, 134, 137, 131, 125, 135, 151, 131, 119, 167, 124, 127, 118, 117, 117, 163, 127, 135, 131, 114, 119, 130, 128, 122, 125, 129, 137, 109, 147, 118, 132, 126, 132, 145, 140, 99, 129, 109, 100, 121, 109, 120, 109, 145, 151, 116, 121, 127, 131, 132, 134, 116, 128, 159, 137, 139, 151, 131, 134, 130, 142, 108, 116, 130, 132, 132, 118, 107, 126, 125, 78, 128, 127, 123, 139, 176, 120, 107, 120, 96, 122, 147, 121, 126, 158, 110, 125, 124, 99, 121, 141, 106, 176, 118, 115, 116, 123, 142, 129, 155, 120, 141, 110, 115, 121, 95, 129, 123, 130, 104, 141, 122, 132, 117, 130, 145, 134, 113, 135, 107, 140, 163, 143, 118, 135, 111, 171, 129, 140, 123, 119, 111, 134, 128, 168, 118, 131, 134, 132, 122, 150, 140, 128, 112, 116, 130, 125, 123, 156, 133, 130, 129, 110, 134, 116, 134, 148, 106, 144, 126, 117, 115, 122, 144, 114, 153, 128, 145, 114, 135, 115, 167, 111, 132, 117, 141, 106, 157, 127, 159, 139, 125, 128, 110, 129, 104, 138, 163, 110, 141, 134, 116, 112, 140, 134, 131], scales=[0.0276784f], zero_points=[136], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %365 = dl.dequantize(%364, input_scales=[0.0276784f], input_zero_points=[136]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %366 = %298.0;
  %367 = add(%355, %365) /* /model.10/m/m.0/Add_1_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %368 = (%366, %367);
  %369 = concatenate(%368, axis=1) /* /model.10/Concat_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %370 = dl.quantize(%369, output_scales=[0.0451639f], output_zero_points=[82]) /* fake_quant_128 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %371 = fn (%FunctionVar_48_0: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_48_1: Tensor[(512, 512, 1, 1), uint8], %FunctionVar_48_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae47bb8)) -> Tensor[(1, 512, 20, 20), uint8] {
    %8 = (%FunctionVar_48_0, %FunctionVar_48_1, %FunctionVar_48_2, meta[relay.Constant][36] /* ty=Tensor[(512), float32] */, meta[relay.Constant][37] /* ty=Tensor[(512), int32] */, meta[relay.Constant][38] /* ty=Tensor[(512), int32] */, meta[relay.Constant][39] /* ty=Tensor[(512), int32] */, meta[relay.Constant][40] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%8, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0451639f], lhs_zero_points=[82], rhs_scales=[0.00146458f, 0.00160868f, 0.000646889f, 0.00107858f, 0.000972826f, 0.00112648f, 0.00105007f, 0.00172399f, 0.000960889f, 0.00119444f, 0.00103687f, 0.00101123f, 0.000820609f, 0.00114647f, 0.000878667f, 0.000842826f, 0.0012211f, 0.000957452f, 0.00176985f, 0.00121206f, 0.00114566f, 0.00114794f, 0.00109086f, 0.00102286f, 0.00192412f, 0.00107011f, 0.00138472f, 0.00186591f, 0.00122414f, 0.00128546f, 0.00153556f, 0.00159124f, 0.00123725f, 0.00192197f, 0.00116614f, 0.0011786f, 0.00114035f, 0.00112654f, 0.00172269f, 0.0023084f, 0.00098752f, 0.00131301f, 0.00149084f, 0.00166713f, 0.00152619f, 0.00197946f, 0.00119027f, 0.00116655f, 0.00104648f, 0.000697563f, 0.00129806f, 0.00101212f, 0.00134574f, 0.00133737f, 0.000944221f, 0.00114959f, 0.00147653f, 0.00191639f, 0.000913165f, 0.00102862f, 0.00114882f, 0.00103278f, 0.000936096f, 0.000785022f, 0.00135162f, 0.00140822f, 0.000766767f, 0.000810574f, 0.00121286f, 0.00122456f, 0.000870417f, 0.000994836f, 0.000815384f, 0.000947016f, 0.000695572f, 0.000888093f, 0.00099898f, 0.000924878f, 0.000920683f, 0.00098138f, 0.00100226f, 0.00131696f, 0.00121454f, 0.00134564f, 0.00100579f, 0.00156703f, 0.00153359f, 0.00144619f, 0.00110407f, 0.00128235f, 0.00119264f, 0.00132908f, 0.00111408f, 0.000938253f, 0.00197222f, 0.00107006f, 0.00106916f, 0.0012027f, 0.000960669f, 0.0010594f, 0.00205733f, 0.00105804f, 0.00217341f, 0.00122451f, 0.00107213f, 0.00134063f, 0.00117809f, 0.00120724f, 0.00150516f, 0.00136448f, 0.00277387f, 0.00117141f, 0.00137195f, 0.000933573f, 0.00258865f, 0.00105204f, 0.00123233f, 0.00102065f, 0.00138753f, 0.00113705f, 0.000993701f, 0.00110914f, 0.00113172f, 0.00118585f, 0.000954121f, 0.00153008f, 0.0014714f, 0.0011576f, 0.00111332f, 0.00260811f, 0.00121401f, 0.00141506f, 0.00113013f, 0.00154144f, 0.00174431f, 0.000852776f, 0.00111959f, 0.00107098f, 0.00131066f, 0.00109968f, 0.00185984f, 0.00106324f, 0.00172907f, 0.00107657f, 0.000848796f, 0.00106947f, 0.00117696f, 0.00144954f, 0.0015927f, 0.00170757f, 0.00182519f, 0.00139647f, 0.0012112f, 0.00151798f, 0.00109616f, 0.000768991f, 0.00116673f, 0.000784026f, 0.00109002f, 0.00103351f, 0.000976418f, 0.000738123f, 0.00130973f, 0.00153053f, 0.000798804f, 0.00104345f, 0.00158583f, 0.00199886f, 0.00117934f, 0.000969502f, 0.00116685f, 0.00138715f, 0.00117497f, 0.00165802f, 0.000979826f, 0.000940946f, 0.0012509f, 0.00124729f, 0.00249701f, 0.00115428f, 0.00126067f, 0.00207587f, 0.00264753f, 0.00111016f, 0.00161771f, 0.000878126f, 0.00124324f, 0.00103772f, 0.000921935f, 0.00107506f, 0.00181262f, 0.00132195f, 0.00164607f, 0.00106482f, 0.00130092f, 0.00093012f, 0.000729332f, 0.00215606f, 0.00171913f, 0.000620527f, 0.00145817f, 0.00149754f, 0.000941409f, 0.000762335f, 0.000990764f, 0.000927974f, 0.00114008f, 0.000917054f, 0.00149908f, 0.00130426f, 0.00117318f, 0.00171899f, 0.000914541f, 0.000937889f, 0.00227463f, 0.00115758f, 0.00124928f, 0.00107761f, 0.00111339f, 0.00102619f, 0.000971148f, 0.00139937f, 0.0011731f, 0.000798206f, 0.00216533f, 0.00123236f, 0.00125501f, 0.00128422f, 0.00127733f, 0.00112639f, 0.00132066f, 0.00224845f, 0.00113102f, 0.000906641f, 0.0012622f, 0.00084337f, 0.00113501f, 0.00105497f, 0.00108311f, 0.0012503f, 0.00144088f, 0.00125187f, 0.00102076f, 0.00131167f, 0.00144067f, 0.000991487f, 0.00113862f, 0.000902033f, 0.00145157f, 0.00137639f, 0.00163562f, 0.00128187f, 0.00184329f, 0.00173264f, 0.000981401f, 0.00147616f, 0.00134959f, 0.00113021f, 0.00160328f, 0.00112911f, 0.00086911f, 0.00123165f, 0.00117318f, 0.00146411f, 0.00134455f, 0.00113506f, 0.00106704f, 0.00133698f, 0.000973284f, 0.00166961f, 0.00110416f, 0.00124704f, 0.00158233f, 0.00102268f, 0.000981326f, 0.000839313f, 0.00101674f, 0.00110848f, 0.00147555f, 0.00113187f, 0.00139572f, 0.00181717f, 0.000941181f, 0.00128351f, 0.000538094f, 0.000856771f, 0.00133849f, 0.00134543f, 0.00115385f, 0.00116183f, 0.000949531f, 0.001289f, 0.00157695f, 0.00121604f, 0.000865118f, 0.00120435f, 0.00108013f, 0.00229326f, 0.00116181f, 0.00087809f, 0.00114755f, 0.0011904f, 0.00102331f, 0.00100526f, 0.000802004f, 0.00101259f, 0.001263f, 0.000856905f, 0.00101936f, 0.00150254f, 0.000910925f, 0.00123426f, 0.00173943f, 0.00108928f, 0.00130937f, 0.00118735f, 0.00118587f, 0.00114204f, 0.00149113f, 0.00129353f, 0.00098094f, 0.000944494f, 0.000978836f, 0.0012573f, 0.00144433f, 0.00140005f, 0.00194657f, 0.000894005f, 0.00125833f, 0.00101485f, 0.00115809f, 0.000977679f, 0.000921187f, 0.00110544f, 0.00159461f, 0.00121579f, 0.00109828f, 0.00154965f, 0.00084188f, 0.00155895f, 0.00183013f, 0.001131f, 0.00100019f, 0.00101204f, 0.00128949f, 0.00109147f, 0.000885852f, 0.00097653f, 0.000925025f, 0.00123155f, 0.00186877f, 0.00154458f, 0.00112692f, 0.000737573f, 0.00110674f, 0.00250679f, 0.00107543f, 0.000984236f, 0.00116621f, 0.000854504f, 0.00125511f, 0.00102649f, 0.000784896f, 0.00154283f, 0.000920769f, 0.00212452f, 0.001153f, 0.00113534f, 0.00154539f, 0.00156715f, 0.00108926f, 0.00169363f, 0.00109243f, 0.00131085f, 0.00147357f, 0.00110812f, 0.00117534f, 0.00134921f, 0.00126703f, 0.000947709f, 0.000593709f, 0.00184627f, 0.00153985f, 0.00141385f, 0.00208222f, 0.00118578f, 0.00113733f, 0.000748509f, 0.000893049f, 0.00136142f, 0.00142363f, 0.00108461f, 0.00169428f, 0.00191817f, 0.00122914f, 0.00205415f, 0.00096301f, 0.00116565f, 0.00107865f, 0.00111105f, 0.00128481f, 0.00117213f, 0.00190576f, 0.00137655f, 0.000942026f, 0.000896688f, 0.00129122f, 0.00141398f, 0.000946267f, 0.00144404f, 0.00110589f, 0.00103492f, 0.000822609f, 0.00205756f, 0.00120588f, 0.00105796f, 0.00114113f, 0.00137168f, 0.00108235f, 0.00122824f, 0.00127983f, 0.00120681f, 0.00103433f, 0.000890054f, 0.0010576f, 0.000732534f, 0.00233805f, 0.00109774f, 0.00132521f, 0.00117693f, 0.0012386f, 0.00108359f, 0.00184989f, 0.00167103f, 0.000905437f, 0.00094326f, 0.00136309f, 0.000991381f, 0.00130833f, 0.000964553f, 0.000830245f, 0.00119701f, 0.001429f, 0.00124978f, 0.00130808f, 0.00184514f, 0.000803389f, 0.00112384f, 0.00104808f, 0.0011271f, 0.000934756f, 0.00101329f, 0.00102323f, 0.00107576f, 0.00109388f, 0.00140803f, 0.00150445f, 0.000884722f, 0.00176712f, 0.00125776f, 0.00117963f, 0.00107115f, 0.0010487f, 0.000922222f, 0.000893492f, 0.00167756f, 0.000852965f, 0.00143589f, 0.00139102f, 0.00135643f, 0.000969736f, 0.00106412f, 0.00106903f, 0.00189057f, 0.00102318f, 0.000802996f, 0.000959955f, 0.00095541f, 0.00116308f, 0.00137259f, 0.00116239f, 0.000893314f, 0.00135303f, 0.000796324f, 0.00102292f, 0.00109094f, 0.0014573f, 0.00130097f, 0.000924337f, 0.00234258f, 0.000894629f, 0.00148409f, 0.00120001f, 0.00117506f, 0.00119666f, 0.00128045f, 0.00109636f, 0.00112175f, 0.000861048f, 0.00143095f, 0.00170235f, 0.00131029f, 0.000906129f, 0.00129181f, 0.00124994f, 0.00166216f, 0.00159233f, 0.00064691f, 0.00109657f, 0.00196636f, 0.00140997f, 0.00143271f], rhs_zero_points=[95, 117, 121, 125, 121, 108, 125, 82, 104, 127, 108, 130, 124, 130, 137, 127, 145, 118, 105, 107, 132, 121, 123, 137, 85, 106, 112, 91, 123, 165, 128, 95, 112, 90, 113, 119, 104, 110, 135, 62, 125, 121, 114, 83, 123, 159, 97, 113, 122, 120, 108, 125, 82, 134, 138, 142, 112, 78, 107, 118, 131, 116, 117, 136, 129, 102, 118, 124, 127, 115, 133, 107, 101, 118, 121, 158, 130, 134, 124, 106, 141, 106, 117, 113, 140, 94, 97, 114, 118, 148, 119, 120, 115, 133, 94, 148, 118, 98, 135, 111, 97, 113, 102, 105, 125, 110, 110, 125, 99, 109, 79, 146, 123, 118, 78, 113, 166, 137, 115, 116, 120, 131, 122, 116, 135, 116, 104, 109, 130, 134, 113, 102, 118, 155, 85, 138, 138, 123, 113, 142, 92, 119, 111, 122, 127, 114, 98, 110, 88, 94, 119, 110, 120, 87, 124, 142, 138, 116, 116, 116, 154, 147, 136, 188, 130, 138, 128, 96, 101, 132, 132, 129, 118, 95, 132, 112, 121, 117, 95, 134, 128, 151, 175, 119, 107, 131, 144, 120, 120, 108, 97, 120, 121, 121, 127, 144, 126, 88, 85, 109, 117, 93, 119, 121, 116, 134, 111, 116, 114, 107, 106, 117, 126, 128, 77, 120, 146, 135, 113, 114, 134, 111, 113, 107, 97, 115, 105, 111, 126, 127, 141, 107, 139, 129, 132, 123, 132, 144, 107, 136, 117, 103, 128, 128, 100, 131, 122, 112, 106, 135, 102, 120, 68, 165, 120, 184, 98, 117, 124, 107, 119, 140, 135, 112, 112, 102, 107, 127, 128, 92, 111, 106, 102, 124, 110, 142, 132, 130, 125, 113, 105, 79, 134, 135, 125, 134, 85, 80, 111, 128, 126, 95, 130, 145, 114, 108, 120, 122, 143, 135, 122, 130, 125, 137, 151, 126, 106, 129, 131, 144, 118, 124, 84, 119, 123, 168, 120, 124, 105, 107, 132, 133, 126, 113, 95, 140, 95, 135, 121, 120, 128, 121, 125, 128, 101, 111, 124, 99, 122, 104, 153, 127, 119, 135, 114, 139, 146, 122, 119, 119, 87, 109, 107, 136, 130, 188, 113, 128, 138, 107, 129, 129, 138, 129, 127, 75, 159, 117, 106, 120, 131, 145, 111, 130, 107, 125, 126, 140, 126, 107, 129, 90, 99, 144, 75, 128, 154, 121, 131, 112, 117, 146, 162, 84, 109, 87, 129, 90, 133, 113, 110, 94, 80, 100, 131, 123, 118, 99, 142, 117, 112, 127, 123, 83, 116, 136, 103, 94, 136, 94, 93, 104, 97, 120, 105, 117, 93, 124, 158, 111, 112, 117, 76, 115, 140, 133, 114, 116, 136, 107, 128, 121, 129, 115, 106, 106, 129, 134, 141, 136, 124, 115, 102, 133, 119, 107, 79, 131, 94, 115, 111, 124, 133, 138, 124, 107, 123, 119, 113, 114, 127, 120, 117, 100, 151, 138, 136, 124, 124, 107, 105, 136, 114, 136, 144, 138, 121, 121, 113, 134, 138, 99, 133, 114, 87, 147, 121, 105, 117, 93, 105, 125, 149, 111, 124, 102, 123, 123, 105, 97, 110, 128], scales=[0.0433772f], zero_points=[160]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %372 = %371(%370, meta[relay.Constant][314] /* ty=Tensor[(512, 512, 1, 1), uint8] */, meta[relay.Constant][315] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0451639f], lhs_zero_points=[82], rhs_scales=[0.00146458f, 0.00160868f, 0.000646889f, 0.00107858f, 0.000972826f, 0.00112648f, 0.00105007f, 0.00172399f, 0.000960889f, 0.00119444f, 0.00103687f, 0.00101123f, 0.000820609f, 0.00114647f, 0.000878667f, 0.000842826f, 0.0012211f, 0.000957452f, 0.00176985f, 0.00121206f, 0.00114566f, 0.00114794f, 0.00109086f, 0.00102286f, 0.00192412f, 0.00107011f, 0.00138472f, 0.00186591f, 0.00122414f, 0.00128546f, 0.00153556f, 0.00159124f, 0.00123725f, 0.00192197f, 0.00116614f, 0.0011786f, 0.00114035f, 0.00112654f, 0.00172269f, 0.0023084f, 0.00098752f, 0.00131301f, 0.00149084f, 0.00166713f, 0.00152619f, 0.00197946f, 0.00119027f, 0.00116655f, 0.00104648f, 0.000697563f, 0.00129806f, 0.00101212f, 0.00134574f, 0.00133737f, 0.000944221f, 0.00114959f, 0.00147653f, 0.00191639f, 0.000913165f, 0.00102862f, 0.00114882f, 0.00103278f, 0.000936096f, 0.000785022f, 0.00135162f, 0.00140822f, 0.000766767f, 0.000810574f, 0.00121286f, 0.00122456f, 0.000870417f, 0.000994836f, 0.000815384f, 0.000947016f, 0.000695572f, 0.000888093f, 0.00099898f, 0.000924878f, 0.000920683f, 0.00098138f, 0.00100226f, 0.00131696f, 0.00121454f, 0.00134564f, 0.00100579f, 0.00156703f, 0.00153359f, 0.00144619f, 0.00110407f, 0.00128235f, 0.00119264f, 0.00132908f, 0.00111408f, 0.000938253f, 0.00197222f, 0.00107006f, 0.00106916f, 0.0012027f, 0.000960669f, 0.0010594f, 0.00205733f, 0.00105804f, 0.00217341f, 0.00122451f, 0.00107213f, 0.00134063f, 0.00117809f, 0.00120724f, 0.00150516f, 0.00136448f, 0.00277387f, 0.00117141f, 0.00137195f, 0.000933573f, 0.00258865f, 0.00105204f, 0.00123233f, 0.00102065f, 0.00138753f, 0.00113705f, 0.000993701f, 0.00110914f, 0.00113172f, 0.00118585f, 0.000954121f, 0.00153008f, 0.0014714f, 0.0011576f, 0.00111332f, 0.00260811f, 0.00121401f, 0.00141506f, 0.00113013f, 0.00154144f, 0.00174431f, 0.000852776f, 0.00111959f, 0.00107098f, 0.00131066f, 0.00109968f, 0.00185984f, 0.00106324f, 0.00172907f, 0.00107657f, 0.000848796f, 0.00106947f, 0.00117696f, 0.00144954f, 0.0015927f, 0.00170757f, 0.00182519f, 0.00139647f, 0.0012112f, 0.00151798f, 0.00109616f, 0.000768991f, 0.00116673f, 0.000784026f, 0.00109002f, 0.00103351f, 0.000976418f, 0.000738123f, 0.00130973f, 0.00153053f, 0.000798804f, 0.00104345f, 0.00158583f, 0.00199886f, 0.00117934f, 0.000969502f, 0.00116685f, 0.00138715f, 0.00117497f, 0.00165802f, 0.000979826f, 0.000940946f, 0.0012509f, 0.00124729f, 0.00249701f, 0.00115428f, 0.00126067f, 0.00207587f, 0.00264753f, 0.00111016f, 0.00161771f, 0.000878126f, 0.00124324f, 0.00103772f, 0.000921935f, 0.00107506f, 0.00181262f, 0.00132195f, 0.00164607f, 0.00106482f, 0.00130092f, 0.00093012f, 0.000729332f, 0.00215606f, 0.00171913f, 0.000620527f, 0.00145817f, 0.00149754f, 0.000941409f, 0.000762335f, 0.000990764f, 0.000927974f, 0.00114008f, 0.000917054f, 0.00149908f, 0.00130426f, 0.00117318f, 0.00171899f, 0.000914541f, 0.000937889f, 0.00227463f, 0.00115758f, 0.00124928f, 0.00107761f, 0.00111339f, 0.00102619f, 0.000971148f, 0.00139937f, 0.0011731f, 0.000798206f, 0.00216533f, 0.00123236f, 0.00125501f, 0.00128422f, 0.00127733f, 0.00112639f, 0.00132066f, 0.00224845f, 0.00113102f, 0.000906641f, 0.0012622f, 0.00084337f, 0.00113501f, 0.00105497f, 0.00108311f, 0.0012503f, 0.00144088f, 0.00125187f, 0.00102076f, 0.00131167f, 0.00144067f, 0.000991487f, 0.00113862f, 0.000902033f, 0.00145157f, 0.00137639f, 0.00163562f, 0.00128187f, 0.00184329f, 0.00173264f, 0.000981401f, 0.00147616f, 0.00134959f, 0.00113021f, 0.00160328f, 0.00112911f, 0.00086911f, 0.00123165f, 0.00117318f, 0.00146411f, 0.00134455f, 0.00113506f, 0.00106704f, 0.00133698f, 0.000973284f, 0.00166961f, 0.00110416f, 0.00124704f, 0.00158233f, 0.00102268f, 0.000981326f, 0.000839313f, 0.00101674f, 0.00110848f, 0.00147555f, 0.00113187f, 0.00139572f, 0.00181717f, 0.000941181f, 0.00128351f, 0.000538094f, 0.000856771f, 0.00133849f, 0.00134543f, 0.00115385f, 0.00116183f, 0.000949531f, 0.001289f, 0.00157695f, 0.00121604f, 0.000865118f, 0.00120435f, 0.00108013f, 0.00229326f, 0.00116181f, 0.00087809f, 0.00114755f, 0.0011904f, 0.00102331f, 0.00100526f, 0.000802004f, 0.00101259f, 0.001263f, 0.000856905f, 0.00101936f, 0.00150254f, 0.000910925f, 0.00123426f, 0.00173943f, 0.00108928f, 0.00130937f, 0.00118735f, 0.00118587f, 0.00114204f, 0.00149113f, 0.00129353f, 0.00098094f, 0.000944494f, 0.000978836f, 0.0012573f, 0.00144433f, 0.00140005f, 0.00194657f, 0.000894005f, 0.00125833f, 0.00101485f, 0.00115809f, 0.000977679f, 0.000921187f, 0.00110544f, 0.00159461f, 0.00121579f, 0.00109828f, 0.00154965f, 0.00084188f, 0.00155895f, 0.00183013f, 0.001131f, 0.00100019f, 0.00101204f, 0.00128949f, 0.00109147f, 0.000885852f, 0.00097653f, 0.000925025f, 0.00123155f, 0.00186877f, 0.00154458f, 0.00112692f, 0.000737573f, 0.00110674f, 0.00250679f, 0.00107543f, 0.000984236f, 0.00116621f, 0.000854504f, 0.00125511f, 0.00102649f, 0.000784896f, 0.00154283f, 0.000920769f, 0.00212452f, 0.001153f, 0.00113534f, 0.00154539f, 0.00156715f, 0.00108926f, 0.00169363f, 0.00109243f, 0.00131085f, 0.00147357f, 0.00110812f, 0.00117534f, 0.00134921f, 0.00126703f, 0.000947709f, 0.000593709f, 0.00184627f, 0.00153985f, 0.00141385f, 0.00208222f, 0.00118578f, 0.00113733f, 0.000748509f, 0.000893049f, 0.00136142f, 0.00142363f, 0.00108461f, 0.00169428f, 0.00191817f, 0.00122914f, 0.00205415f, 0.00096301f, 0.00116565f, 0.00107865f, 0.00111105f, 0.00128481f, 0.00117213f, 0.00190576f, 0.00137655f, 0.000942026f, 0.000896688f, 0.00129122f, 0.00141398f, 0.000946267f, 0.00144404f, 0.00110589f, 0.00103492f, 0.000822609f, 0.00205756f, 0.00120588f, 0.00105796f, 0.00114113f, 0.00137168f, 0.00108235f, 0.00122824f, 0.00127983f, 0.00120681f, 0.00103433f, 0.000890054f, 0.0010576f, 0.000732534f, 0.00233805f, 0.00109774f, 0.00132521f, 0.00117693f, 0.0012386f, 0.00108359f, 0.00184989f, 0.00167103f, 0.000905437f, 0.00094326f, 0.00136309f, 0.000991381f, 0.00130833f, 0.000964553f, 0.000830245f, 0.00119701f, 0.001429f, 0.00124978f, 0.00130808f, 0.00184514f, 0.000803389f, 0.00112384f, 0.00104808f, 0.0011271f, 0.000934756f, 0.00101329f, 0.00102323f, 0.00107576f, 0.00109388f, 0.00140803f, 0.00150445f, 0.000884722f, 0.00176712f, 0.00125776f, 0.00117963f, 0.00107115f, 0.0010487f, 0.000922222f, 0.000893492f, 0.00167756f, 0.000852965f, 0.00143589f, 0.00139102f, 0.00135643f, 0.000969736f, 0.00106412f, 0.00106903f, 0.00189057f, 0.00102318f, 0.000802996f, 0.000959955f, 0.00095541f, 0.00116308f, 0.00137259f, 0.00116239f, 0.000893314f, 0.00135303f, 0.000796324f, 0.00102292f, 0.00109094f, 0.0014573f, 0.00130097f, 0.000924337f, 0.00234258f, 0.000894629f, 0.00148409f, 0.00120001f, 0.00117506f, 0.00119666f, 0.00128045f, 0.00109636f, 0.00112175f, 0.000861048f, 0.00143095f, 0.00170235f, 0.00131029f, 0.000906129f, 0.00129181f, 0.00124994f, 0.00166216f, 0.00159233f, 0.00064691f, 0.00109657f, 0.00196636f, 0.00140997f, 0.00143271f], rhs_zero_points=[95, 117, 121, 125, 121, 108, 125, 82, 104, 127, 108, 130, 124, 130, 137, 127, 145, 118, 105, 107, 132, 121, 123, 137, 85, 106, 112, 91, 123, 165, 128, 95, 112, 90, 113, 119, 104, 110, 135, 62, 125, 121, 114, 83, 123, 159, 97, 113, 122, 120, 108, 125, 82, 134, 138, 142, 112, 78, 107, 118, 131, 116, 117, 136, 129, 102, 118, 124, 127, 115, 133, 107, 101, 118, 121, 158, 130, 134, 124, 106, 141, 106, 117, 113, 140, 94, 97, 114, 118, 148, 119, 120, 115, 133, 94, 148, 118, 98, 135, 111, 97, 113, 102, 105, 125, 110, 110, 125, 99, 109, 79, 146, 123, 118, 78, 113, 166, 137, 115, 116, 120, 131, 122, 116, 135, 116, 104, 109, 130, 134, 113, 102, 118, 155, 85, 138, 138, 123, 113, 142, 92, 119, 111, 122, 127, 114, 98, 110, 88, 94, 119, 110, 120, 87, 124, 142, 138, 116, 116, 116, 154, 147, 136, 188, 130, 138, 128, 96, 101, 132, 132, 129, 118, 95, 132, 112, 121, 117, 95, 134, 128, 151, 175, 119, 107, 131, 144, 120, 120, 108, 97, 120, 121, 121, 127, 144, 126, 88, 85, 109, 117, 93, 119, 121, 116, 134, 111, 116, 114, 107, 106, 117, 126, 128, 77, 120, 146, 135, 113, 114, 134, 111, 113, 107, 97, 115, 105, 111, 126, 127, 141, 107, 139, 129, 132, 123, 132, 144, 107, 136, 117, 103, 128, 128, 100, 131, 122, 112, 106, 135, 102, 120, 68, 165, 120, 184, 98, 117, 124, 107, 119, 140, 135, 112, 112, 102, 107, 127, 128, 92, 111, 106, 102, 124, 110, 142, 132, 130, 125, 113, 105, 79, 134, 135, 125, 134, 85, 80, 111, 128, 126, 95, 130, 145, 114, 108, 120, 122, 143, 135, 122, 130, 125, 137, 151, 126, 106, 129, 131, 144, 118, 124, 84, 119, 123, 168, 120, 124, 105, 107, 132, 133, 126, 113, 95, 140, 95, 135, 121, 120, 128, 121, 125, 128, 101, 111, 124, 99, 122, 104, 153, 127, 119, 135, 114, 139, 146, 122, 119, 119, 87, 109, 107, 136, 130, 188, 113, 128, 138, 107, 129, 129, 138, 129, 127, 75, 159, 117, 106, 120, 131, 145, 111, 130, 107, 125, 126, 140, 126, 107, 129, 90, 99, 144, 75, 128, 154, 121, 131, 112, 117, 146, 162, 84, 109, 87, 129, 90, 133, 113, 110, 94, 80, 100, 131, 123, 118, 99, 142, 117, 112, 127, 123, 83, 116, 136, 103, 94, 136, 94, 93, 104, 97, 120, 105, 117, 93, 124, 158, 111, 112, 117, 76, 115, 140, 133, 114, 116, 136, 107, 128, 121, 129, 115, 106, 106, 129, 134, 141, 136, 124, 115, 102, 133, 119, 107, 79, 131, 94, 115, 111, 124, 133, 138, 124, 107, 123, 119, 113, 114, 127, 120, 117, 100, 151, 138, 136, 124, 124, 107, 105, 136, 114, 136, 144, 138, 121, 121, 113, 134, 138, 99, 133, 114, 87, 147, 121, 105, 117, 93, 105, 125, 149, 111, 124, 102, 123, 123, 105, 97, 110, 128], scales=[0.0433772f], zero_points=[160], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %373 = dl.dequantize(%372, input_scales=[0.0433772f], input_zero_points=[160]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %374 = sigmoid(%373) /* /model.10/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %375 = multiply(%373, %374) /* /model.10/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %376 = fn (%FunctionVar_1_01: Tensor[(1, 512, 20, 20), float32], PartitionedFromPattern="image.resize2d_", Composite="ds1:1|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae7c638)) -> Tensor[(1, 512, 40, 40), float32] {
    image.resize2d(%FunctionVar_1_01, size=[40, 40], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* /model.11/Resize_output_0 */ /* ty=Tensor[(1, 512, 40, 40), float32] */
  };
  %377 = %376(%375, stage7=0, resize_size=[40, 40], attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 40, 40), float32] */;
  %378 = (%377, %184);
  %379 = concatenate(%378, axis=1) /* /model.12/Concat_output_0 */ /* ty=Tensor[(1, 768, 40, 40), float32] */;
  %380 = dl.quantize(%379, output_scales=[0.0169053f], output_zero_points=[16]) /* fake_quant_131 */ /* ty=Tensor[(1, 768, 40, 40), uint8] */;
  %381 = fn (%FunctionVar_47_0: Tensor[(1, 768, 40, 40), uint8], %FunctionVar_47_1: Tensor[(256, 768, 1, 1), uint8], %FunctionVar_47_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a951b8b8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %7 = (%FunctionVar_47_0, %FunctionVar_47_1, %FunctionVar_47_2, meta[relay.Constant][31] /* ty=Tensor[(256), float32] */, meta[relay.Constant][32] /* ty=Tensor[(256), int32] */, meta[relay.Constant][33] /* ty=Tensor[(256), int32] */, meta[relay.Constant][34] /* ty=Tensor[(256), int32] */, meta[relay.Constant][35] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%7, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0169053f], lhs_zero_points=[16], rhs_scales=[0.00166201f, 0.00216142f, 0.00279205f, 0.00214524f, 0.00174893f, 0.0019692f, 0.00298248f, 0.00247712f, 0.00346882f, 0.0018563f, 0.00307402f, 0.00537963f, 0.00210484f, 0.00285593f, 0.00217557f, 0.00224895f, 0.00205782f, 0.00296266f, 0.00212027f, 0.00432142f, 0.00245359f, 0.00247693f, 0.00292381f, 0.00204113f, 0.00324201f, 0.00192561f, 0.00418832f, 0.00414666f, 0.00263697f, 0.00236799f, 0.00326135f, 0.00396342f, 0.00235388f, 0.0015863f, 0.00529778f, 0.00271604f, 0.00372332f, 0.0019705f, 0.00171094f, 0.00498182f, 0.0024461f, 0.00246249f, 0.00362516f, 0.00263838f, 0.00177126f, 0.00265575f, 0.0023073f, 0.00299508f, 0.00292432f, 0.00265141f, 0.00309489f, 0.00251847f, 0.00286728f, 0.0018611f, 0.00280726f, 0.00258645f, 0.00246731f, 0.00186811f, 0.0019853f, 0.00325114f, 0.00213014f, 0.00396642f, 0.00223896f, 0.00214386f, 0.00287483f, 0.00207109f, 0.00230624f, 0.00243382f, 0.00181169f, 0.00180121f, 0.00194787f, 0.00263285f, 0.0036922f, 0.00203583f, 0.00226849f, 0.005421f, 0.00257506f, 0.00267516f, 0.00283905f, 0.00198237f, 0.00273564f, 0.00178842f, 0.00230845f, 0.00236222f, 0.00175689f, 0.00171163f, 0.00250773f, 0.00198273f, 0.00239324f, 0.00225592f, 0.00234296f, 0.00212266f, 0.0022616f, 0.0021227f, 0.00232847f, 0.00316714f, 0.00285676f, 0.00351583f, 0.00198606f, 0.00205213f, 0.00209262f, 0.00200088f, 0.00203377f, 0.00273262f, 0.00183232f, 0.00172725f, 0.00284255f, 0.00294237f, 0.00262735f, 0.00220688f, 0.00273018f, 0.00177467f, 0.00334649f, 0.00197355f, 0.00209995f, 0.0020428f, 0.00474446f, 0.00372664f, 0.00236819f, 0.00260069f, 0.00260302f, 0.00167021f, 0.00228288f, 0.00235375f, 0.00236949f, 0.00390314f, 0.00194398f, 0.00387307f, 0.00144258f, 0.00169241f, 0.00163046f, 0.00167957f, 0.00178619f, 0.00256936f, 0.00428769f, 0.00191167f, 0.00129286f, 0.00204053f, 0.00327009f, 0.00201399f, 0.00204154f, 0.00231628f, 0.00394623f, 0.00191727f, 0.00156766f, 0.0020363f, 0.00343984f, 0.00224488f, 0.00296838f, 0.00156608f, 0.0023766f, 0.00184913f, 0.00169908f, 0.00143507f, 0.00189799f, 0.00335112f, 0.00221411f, 0.00231729f, 0.00229914f, 0.00260812f, 0.000898921f, 0.00222011f, 0.0044127f, 0.00327586f, 0.00211024f, 0.00194422f, 0.00181355f, 0.00413301f, 0.00567688f, 0.000792003f, 0.00169017f, 0.0021313f, 0.00260397f, 0.00177693f, 0.00201216f, 0.00165702f, 0.00246793f, 0.00179765f, 0.00217088f, 0.00215093f, 0.0016871f, 0.00222162f, 0.00215417f, 0.0018866f, 0.00315178f, 0.00226354f, 0.00455297f, 0.00279561f, 0.00416689f, 0.00160708f, 0.00214218f, 0.00311425f, 0.00187212f, 0.00341458f, 0.00264909f, 0.00306993f, 0.00186199f, 0.00224131f, 0.00280304f, 0.00194319f, 0.00239337f, 0.0014652f, 0.00194061f, 0.00265439f, 0.00120075f, 0.00150347f, 0.00174836f, 0.00201877f, 0.00145603f, 0.00485382f, 0.00182002f, 0.00290968f, 0.00110052f, 0.000891781f, 0.00169779f, 0.00173366f, 0.00464612f, 0.000947391f, 0.00237104f, 0.00216115f, 0.0020172f, 0.00259362f, 0.00499861f, 0.001782f, 0.00249894f, 0.00308634f, 0.00174456f, 0.00340115f, 0.00518095f, 0.00338449f, 0.00144168f, 0.00265534f, 0.00130528f, 0.00092285f, 0.00210096f, 0.00122717f, 0.00144734f, 0.00279277f, 0.00117525f, 0.00244473f, 0.00271723f, 0.00075517f, 0.00228598f, 0.00172904f, 0.00212396f, 0.0010885f, 0.00172037f, 0.00165385f, 0.00144049f, 0.00217871f, 0.0019918f, 0.00237409f, 0.00246718f, 0.00149039f, 0.0031242f, 0.00209715f], rhs_zero_points=[126, 99, 111, 80, 127, 116, 117, 106, 120, 113, 131, 153, 137, 113, 115, 121, 125, 105, 137, 76, 122, 104, 122, 104, 131, 138, 105, 129, 127, 137, 117, 117, 110, 147, 166, 137, 121, 97, 151, 104, 132, 106, 131, 131, 139, 105, 126, 126, 110, 111, 125, 116, 98, 118, 107, 127, 128, 134, 136, 128, 155, 128, 111, 144, 109, 158, 146, 144, 138, 108, 150, 120, 114, 136, 126, 137, 134, 126, 108, 108, 102, 160, 134, 124, 131, 123, 125, 112, 139, 108, 137, 131, 141, 124, 144, 103, 105, 121, 118, 158, 137, 132, 133, 115, 129, 129, 121, 113, 122, 112, 135, 87, 90, 117, 137, 135, 112, 131, 127, 113, 109, 111, 119, 139, 124, 121, 134, 135, 139, 140, 101, 98, 121, 112, 156, 108, 133, 133, 166, 111, 125, 184, 79, 149, 158, 87, 130, 128, 142, 171, 150, 115, 113, 97, 153, 151, 101, 123, 135, 142, 111, 130, 128, 151, 135, 147, 130, 142, 181, 136, 130, 127, 103, 162, 139, 87, 110, 115, 121, 129, 168, 116, 158, 143, 141, 126, 101, 97, 153, 147, 113, 142, 140, 104, 94, 107, 115, 122, 174, 121, 86, 160, 137, 144, 119, 95, 110, 129, 91, 148, 146, 148, 120, 113, 126, 114, 106, 106, 123, 109, 115, 129, 152, 110, 138, 123, 115, 135, 152, 120, 95, 137, 153, 142, 124, 99, 142, 139, 171, 106, 107, 108, 141, 154, 126, 136, 124, 126, 141, 134, 103, 112, 156, 126, 126, 133], scales=[0.0311047f], zero_points=[154]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %382 = %381(%380, meta[relay.Constant][316] /* ty=Tensor[(256, 768, 1, 1), uint8] */, meta[relay.Constant][317] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0169053f], lhs_zero_points=[16], rhs_scales=[0.00166201f, 0.00216142f, 0.00279205f, 0.00214524f, 0.00174893f, 0.0019692f, 0.00298248f, 0.00247712f, 0.00346882f, 0.0018563f, 0.00307402f, 0.00537963f, 0.00210484f, 0.00285593f, 0.00217557f, 0.00224895f, 0.00205782f, 0.00296266f, 0.00212027f, 0.00432142f, 0.00245359f, 0.00247693f, 0.00292381f, 0.00204113f, 0.00324201f, 0.00192561f, 0.00418832f, 0.00414666f, 0.00263697f, 0.00236799f, 0.00326135f, 0.00396342f, 0.00235388f, 0.0015863f, 0.00529778f, 0.00271604f, 0.00372332f, 0.0019705f, 0.00171094f, 0.00498182f, 0.0024461f, 0.00246249f, 0.00362516f, 0.00263838f, 0.00177126f, 0.00265575f, 0.0023073f, 0.00299508f, 0.00292432f, 0.00265141f, 0.00309489f, 0.00251847f, 0.00286728f, 0.0018611f, 0.00280726f, 0.00258645f, 0.00246731f, 0.00186811f, 0.0019853f, 0.00325114f, 0.00213014f, 0.00396642f, 0.00223896f, 0.00214386f, 0.00287483f, 0.00207109f, 0.00230624f, 0.00243382f, 0.00181169f, 0.00180121f, 0.00194787f, 0.00263285f, 0.0036922f, 0.00203583f, 0.00226849f, 0.005421f, 0.00257506f, 0.00267516f, 0.00283905f, 0.00198237f, 0.00273564f, 0.00178842f, 0.00230845f, 0.00236222f, 0.00175689f, 0.00171163f, 0.00250773f, 0.00198273f, 0.00239324f, 0.00225592f, 0.00234296f, 0.00212266f, 0.0022616f, 0.0021227f, 0.00232847f, 0.00316714f, 0.00285676f, 0.00351583f, 0.00198606f, 0.00205213f, 0.00209262f, 0.00200088f, 0.00203377f, 0.00273262f, 0.00183232f, 0.00172725f, 0.00284255f, 0.00294237f, 0.00262735f, 0.00220688f, 0.00273018f, 0.00177467f, 0.00334649f, 0.00197355f, 0.00209995f, 0.0020428f, 0.00474446f, 0.00372664f, 0.00236819f, 0.00260069f, 0.00260302f, 0.00167021f, 0.00228288f, 0.00235375f, 0.00236949f, 0.00390314f, 0.00194398f, 0.00387307f, 0.00144258f, 0.00169241f, 0.00163046f, 0.00167957f, 0.00178619f, 0.00256936f, 0.00428769f, 0.00191167f, 0.00129286f, 0.00204053f, 0.00327009f, 0.00201399f, 0.00204154f, 0.00231628f, 0.00394623f, 0.00191727f, 0.00156766f, 0.0020363f, 0.00343984f, 0.00224488f, 0.00296838f, 0.00156608f, 0.0023766f, 0.00184913f, 0.00169908f, 0.00143507f, 0.00189799f, 0.00335112f, 0.00221411f, 0.00231729f, 0.00229914f, 0.00260812f, 0.000898921f, 0.00222011f, 0.0044127f, 0.00327586f, 0.00211024f, 0.00194422f, 0.00181355f, 0.00413301f, 0.00567688f, 0.000792003f, 0.00169017f, 0.0021313f, 0.00260397f, 0.00177693f, 0.00201216f, 0.00165702f, 0.00246793f, 0.00179765f, 0.00217088f, 0.00215093f, 0.0016871f, 0.00222162f, 0.00215417f, 0.0018866f, 0.00315178f, 0.00226354f, 0.00455297f, 0.00279561f, 0.00416689f, 0.00160708f, 0.00214218f, 0.00311425f, 0.00187212f, 0.00341458f, 0.00264909f, 0.00306993f, 0.00186199f, 0.00224131f, 0.00280304f, 0.00194319f, 0.00239337f, 0.0014652f, 0.00194061f, 0.00265439f, 0.00120075f, 0.00150347f, 0.00174836f, 0.00201877f, 0.00145603f, 0.00485382f, 0.00182002f, 0.00290968f, 0.00110052f, 0.000891781f, 0.00169779f, 0.00173366f, 0.00464612f, 0.000947391f, 0.00237104f, 0.00216115f, 0.0020172f, 0.00259362f, 0.00499861f, 0.001782f, 0.00249894f, 0.00308634f, 0.00174456f, 0.00340115f, 0.00518095f, 0.00338449f, 0.00144168f, 0.00265534f, 0.00130528f, 0.00092285f, 0.00210096f, 0.00122717f, 0.00144734f, 0.00279277f, 0.00117525f, 0.00244473f, 0.00271723f, 0.00075517f, 0.00228598f, 0.00172904f, 0.00212396f, 0.0010885f, 0.00172037f, 0.00165385f, 0.00144049f, 0.00217871f, 0.0019918f, 0.00237409f, 0.00246718f, 0.00149039f, 0.0031242f, 0.00209715f], rhs_zero_points=[126, 99, 111, 80, 127, 116, 117, 106, 120, 113, 131, 153, 137, 113, 115, 121, 125, 105, 137, 76, 122, 104, 122, 104, 131, 138, 105, 129, 127, 137, 117, 117, 110, 147, 166, 137, 121, 97, 151, 104, 132, 106, 131, 131, 139, 105, 126, 126, 110, 111, 125, 116, 98, 118, 107, 127, 128, 134, 136, 128, 155, 128, 111, 144, 109, 158, 146, 144, 138, 108, 150, 120, 114, 136, 126, 137, 134, 126, 108, 108, 102, 160, 134, 124, 131, 123, 125, 112, 139, 108, 137, 131, 141, 124, 144, 103, 105, 121, 118, 158, 137, 132, 133, 115, 129, 129, 121, 113, 122, 112, 135, 87, 90, 117, 137, 135, 112, 131, 127, 113, 109, 111, 119, 139, 124, 121, 134, 135, 139, 140, 101, 98, 121, 112, 156, 108, 133, 133, 166, 111, 125, 184, 79, 149, 158, 87, 130, 128, 142, 171, 150, 115, 113, 97, 153, 151, 101, 123, 135, 142, 111, 130, 128, 151, 135, 147, 130, 142, 181, 136, 130, 127, 103, 162, 139, 87, 110, 115, 121, 129, 168, 116, 158, 143, 141, 126, 101, 97, 153, 147, 113, 142, 140, 104, 94, 107, 115, 122, 174, 121, 86, 160, 137, 144, 119, 95, 110, 129, 91, 148, 146, 148, 120, 113, 126, 114, 106, 106, 123, 109, 115, 129, 152, 110, 138, 123, 115, 135, 152, 120, 95, 137, 153, 142, 124, 99, 142, 139, 171, 106, 107, 108, 141, 154, 126, 136, 124, 126, 141, 134, 103, 112, 156, 126, 126, 133], scales=[0.0311047f], zero_points=[154], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %383 = dl.dequantize(%382, input_scales=[0.0311047f], input_zero_points=[154]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %384 = sigmoid(%383) /* /model.13/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %385 = multiply(%383, %384) /* /model.13/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %386 = fn (%FunctionVar_4_0: Tensor[(1, 256, 40, 40), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9be4f58)) -> (Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) {
    split(%FunctionVar_4_0, indices_or_sections=[128], axis=1) /* /model.13/Split_output_0 */ /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */
  };
  %387 = %386(%385, indices_or_sections=[128], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */;
  %390 = %387.1;
  %391 = dl.quantize(%390, output_scales=[0.00842667f], output_zero_points=[33]) /* fake_quant_134 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %392 = fn (%FunctionVar_46_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_46_1: Tensor[(64, 128, 3, 3), uint8], %FunctionVar_46_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c0fca8)) -> Tensor[(1, 64, 40, 40), uint8] {
    %389 = (%FunctionVar_46_0, %FunctionVar_46_1, %FunctionVar_46_2, meta[relay.Constant][323] /* ty=Tensor[(64), float32] */, meta[relay.Constant][324] /* ty=Tensor[(64), int32] */, meta[relay.Constant][325] /* ty=Tensor[(64), int32] */, meta[relay.Constant][326] /* ty=Tensor[(64), int32] */, meta[relay.Constant][327] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%389, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00842667f], lhs_zero_points=[33], rhs_scales=[0.00505963f, 0.00305155f, 0.00311486f, 0.00360876f, 0.00232961f, 0.00448359f, 0.00373392f, 0.00294033f, 0.00294409f, 0.00309694f, 0.00374293f, 0.00162414f, 0.00505212f, 0.00326086f, 0.00536597f, 0.00276846f, 0.00216957f, 0.00381465f, 0.00174843f, 0.00401125f, 0.00445502f, 0.00448483f, 0.00513527f, 0.00430357f, 0.00619578f, 0.00220762f, 0.00468168f, 0.00454371f, 0.00506154f, 0.00355566f, 0.00358856f, 0.00511611f, 0.0055471f, 0.0027297f, 0.00281124f, 0.00322889f, 0.00443725f, 0.00195363f, 0.00354094f, 0.00123547f, 0.00313531f, 0.00555996f, 0.00293017f, 0.00395142f, 0.00247876f, 0.00210945f, 0.0036558f, 0.00226971f, 0.00459075f, 0.00344577f, 0.00322284f, 0.00224077f, 0.0051108f, 0.00587473f, 0.00372759f, 0.00366023f, 0.00459847f, 0.00201828f, 0.00373865f, 0.00200907f, 0.00245639f, 0.00416741f, 0.00548164f, 0.00253162f], rhs_zero_points=[147, 154, 123, 145, 145, 148, 137, 126, 125, 118, 168, 141, 129, 113, 140, 115, 127, 128, 146, 138, 132, 162, 134, 120, 108, 166, 129, 127, 100, 157, 141, 126, 151, 134, 125, 119, 129, 130, 144, 125, 114, 57, 164, 137, 138, 150, 114, 116, 144, 148, 124, 120, 118, 117, 124, 91, 135, 143, 117, 133, 115, 145, 137, 100], scales=[0.0236592f], zero_points=[165]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %393 = %392(%391, meta[relay.Constant][328] /* ty=Tensor[(64, 128, 3, 3), uint8] */, meta[relay.Constant][329] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=33f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00842667f], lhs_zero_points=[33], rhs_scales=[0.00505963f, 0.00305155f, 0.00311486f, 0.00360876f, 0.00232961f, 0.00448359f, 0.00373392f, 0.00294033f, 0.00294409f, 0.00309694f, 0.00374293f, 0.00162414f, 0.00505212f, 0.00326086f, 0.00536597f, 0.00276846f, 0.00216957f, 0.00381465f, 0.00174843f, 0.00401125f, 0.00445502f, 0.00448483f, 0.00513527f, 0.00430357f, 0.00619578f, 0.00220762f, 0.00468168f, 0.00454371f, 0.00506154f, 0.00355566f, 0.00358856f, 0.00511611f, 0.0055471f, 0.0027297f, 0.00281124f, 0.00322889f, 0.00443725f, 0.00195363f, 0.00354094f, 0.00123547f, 0.00313531f, 0.00555996f, 0.00293017f, 0.00395142f, 0.00247876f, 0.00210945f, 0.0036558f, 0.00226971f, 0.00459075f, 0.00344577f, 0.00322284f, 0.00224077f, 0.0051108f, 0.00587473f, 0.00372759f, 0.00366023f, 0.00459847f, 0.00201828f, 0.00373865f, 0.00200907f, 0.00245639f, 0.00416741f, 0.00548164f, 0.00253162f], rhs_zero_points=[147, 154, 123, 145, 145, 148, 137, 126, 125, 118, 168, 141, 129, 113, 140, 115, 127, 128, 146, 138, 132, 162, 134, 120, 108, 166, 129, 127, 100, 157, 141, 126, 151, 134, 125, 119, 129, 130, 144, 125, 114, 57, 164, 137, 138, 150, 114, 116, 144, 148, 124, 120, 118, 117, 124, 91, 135, 143, 117, 133, 115, 145, 137, 100], scales=[0.0236592f], zero_points=[165], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %394 = dl.dequantize(%393, input_scales=[0.0236592f], input_zero_points=[165]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %395 = sigmoid(%394) /* /model.13/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %396 = multiply(%394, %395) /* /model.13/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %397 = dl.quantize(%396, output_scales=[0.00859338f], output_zero_points=[32]) /* fake_quant_137 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %398 = fn (%FunctionVar_45_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_45_1: Tensor[(128, 64, 3, 3), uint8], %FunctionVar_45_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c53048)) -> Tensor[(1, 128, 40, 40), uint8] {
    %388 = (%FunctionVar_45_0, %FunctionVar_45_1, %FunctionVar_45_2, meta[relay.Constant][318] /* ty=Tensor[(128), float32] */, meta[relay.Constant][319] /* ty=Tensor[(128), int32] */, meta[relay.Constant][320] /* ty=Tensor[(128), int32] */, meta[relay.Constant][321] /* ty=Tensor[(128), int32] */, meta[relay.Constant][322] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%388, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00859338f], lhs_zero_points=[32], rhs_scales=[0.0023377f, 0.00190291f, 0.00251029f, 0.00464679f, 0.00330056f, 0.00318675f, 0.00336754f, 0.00381325f, 0.00423839f, 0.00220134f, 0.00202704f, 0.00290282f, 0.00215169f, 0.00304165f, 0.00493966f, 0.00172283f, 0.00289426f, 0.0023502f, 0.00191123f, 0.00278843f, 0.00166127f, 0.00237923f, 0.00229781f, 0.00223578f, 0.00317068f, 0.00202587f, 0.00401131f, 0.00255437f, 0.00239848f, 0.00278741f, 0.00384827f, 0.00150626f, 0.00291273f, 0.00269792f, 0.00330266f, 0.00241545f, 0.00300541f, 0.00171408f, 0.00368365f, 0.00244431f, 0.00285698f, 0.0019264f, 0.00526845f, 0.00257433f, 0.00256455f, 0.00146665f, 0.00334241f, 0.00258726f, 0.00552631f, 0.00463864f, 0.00324148f, 0.00174598f, 0.00284282f, 0.00308324f, 0.00183291f, 0.00539239f, 0.00147219f, 0.00254032f, 0.00439795f, 0.00251627f, 0.00134992f, 0.00415126f, 0.0029182f, 0.00272748f, 0.00208746f, 0.00295554f, 0.00254045f, 0.00426587f, 0.00281898f, 0.00237191f, 0.00205008f, 0.00207446f, 0.00325531f, 0.001871f, 0.00286729f, 0.00290115f, 0.0026917f, 0.00297597f, 0.00389679f, 0.00143386f, 0.00469926f, 0.00257406f, 0.00310624f, 0.00283017f, 0.00248754f, 0.00153883f, 0.00211816f, 0.00174286f, 0.0030349f, 0.00236746f, 0.00430117f, 0.00298023f, 0.00229026f, 0.00399412f, 0.00273529f, 0.00263519f, 0.00154079f, 0.00198817f, 0.00295498f, 0.00216021f, 0.00329431f, 0.002355f, 0.00299721f, 0.002671f, 0.00227076f, 0.00157261f, 0.00222651f, 0.00234214f, 0.00203596f, 0.00309484f, 0.00286907f, 0.00260282f, 0.00327838f, 0.00284737f, 0.00151543f, 0.00186487f, 0.0026191f, 0.00328762f, 0.00317502f, 0.00200609f, 0.00178011f, 0.00369441f, 0.00280959f, 0.00288075f, 0.00369434f, 0.00413884f, 0.00293632f, 0.00369611f], rhs_zero_points=[137, 112, 133, 156, 115, 120, 156, 140, 95, 111, 139, 109, 111, 202, 133, 148, 101, 91, 149, 146, 119, 103, 116, 153, 116, 113, 116, 141, 120, 130, 104, 118, 144, 117, 143, 123, 137, 143, 165, 128, 137, 163, 157, 150, 138, 135, 134, 114, 70, 113, 143, 128, 117, 172, 161, 107, 119, 111, 176, 121, 104, 139, 154, 125, 138, 131, 124, 158, 126, 146, 99, 116, 128, 143, 125, 149, 111, 102, 131, 113, 209, 109, 132, 112, 148, 131, 142, 147, 128, 130, 57, 131, 127, 156, 147, 107, 155, 122, 144, 125, 115, 144, 148, 127, 100, 122, 135, 110, 108, 101, 105, 127, 107, 114, 175, 139, 119, 131, 116, 132, 158, 97, 104, 103, 107, 181, 139, 154], scales=[0.0306757f], zero_points=[134]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %399 = %398(%397, meta[relay.Constant][330] /* ty=Tensor[(128, 64, 3, 3), uint8] */, meta[relay.Constant][331] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=32f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00859338f], lhs_zero_points=[32], rhs_scales=[0.0023377f, 0.00190291f, 0.00251029f, 0.00464679f, 0.00330056f, 0.00318675f, 0.00336754f, 0.00381325f, 0.00423839f, 0.00220134f, 0.00202704f, 0.00290282f, 0.00215169f, 0.00304165f, 0.00493966f, 0.00172283f, 0.00289426f, 0.0023502f, 0.00191123f, 0.00278843f, 0.00166127f, 0.00237923f, 0.00229781f, 0.00223578f, 0.00317068f, 0.00202587f, 0.00401131f, 0.00255437f, 0.00239848f, 0.00278741f, 0.00384827f, 0.00150626f, 0.00291273f, 0.00269792f, 0.00330266f, 0.00241545f, 0.00300541f, 0.00171408f, 0.00368365f, 0.00244431f, 0.00285698f, 0.0019264f, 0.00526845f, 0.00257433f, 0.00256455f, 0.00146665f, 0.00334241f, 0.00258726f, 0.00552631f, 0.00463864f, 0.00324148f, 0.00174598f, 0.00284282f, 0.00308324f, 0.00183291f, 0.00539239f, 0.00147219f, 0.00254032f, 0.00439795f, 0.00251627f, 0.00134992f, 0.00415126f, 0.0029182f, 0.00272748f, 0.00208746f, 0.00295554f, 0.00254045f, 0.00426587f, 0.00281898f, 0.00237191f, 0.00205008f, 0.00207446f, 0.00325531f, 0.001871f, 0.00286729f, 0.00290115f, 0.0026917f, 0.00297597f, 0.00389679f, 0.00143386f, 0.00469926f, 0.00257406f, 0.00310624f, 0.00283017f, 0.00248754f, 0.00153883f, 0.00211816f, 0.00174286f, 0.0030349f, 0.00236746f, 0.00430117f, 0.00298023f, 0.00229026f, 0.00399412f, 0.00273529f, 0.00263519f, 0.00154079f, 0.00198817f, 0.00295498f, 0.00216021f, 0.00329431f, 0.002355f, 0.00299721f, 0.002671f, 0.00227076f, 0.00157261f, 0.00222651f, 0.00234214f, 0.00203596f, 0.00309484f, 0.00286907f, 0.00260282f, 0.00327838f, 0.00284737f, 0.00151543f, 0.00186487f, 0.0026191f, 0.00328762f, 0.00317502f, 0.00200609f, 0.00178011f, 0.00369441f, 0.00280959f, 0.00288075f, 0.00369434f, 0.00413884f, 0.00293632f, 0.00369611f], rhs_zero_points=[137, 112, 133, 156, 115, 120, 156, 140, 95, 111, 139, 109, 111, 202, 133, 148, 101, 91, 149, 146, 119, 103, 116, 153, 116, 113, 116, 141, 120, 130, 104, 118, 144, 117, 143, 123, 137, 143, 165, 128, 137, 163, 157, 150, 138, 135, 134, 114, 70, 113, 143, 128, 117, 172, 161, 107, 119, 111, 176, 121, 104, 139, 154, 125, 138, 131, 124, 158, 126, 146, 99, 116, 128, 143, 125, 149, 111, 102, 131, 113, 209, 109, 132, 112, 148, 131, 142, 147, 128, 130, 57, 131, 127, 156, 147, 107, 155, 122, 144, 125, 115, 144, 148, 127, 100, 122, 135, 110, 108, 101, 105, 127, 107, 114, 175, 139, 119, 131, 116, 132, 158, 97, 104, 103, 107, 181, 139, 154], scales=[0.0306757f], zero_points=[134], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %400 = dl.dequantize(%399, input_scales=[0.0306757f], input_zero_points=[134]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %401 = sigmoid(%400) /* /model.13/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %402 = multiply(%400, %401) /* /model.13/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %403 = %387.0;
  %404 = add(%390, %402) /* /model.13/m.0/Add_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %405 = (%403, %390, %404);
  %406 = concatenate(%405, axis=1) /* /model.13/Concat_output_0 */ /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %407 = dl.quantize(%406, output_scales=[0.0156927f], output_zero_points=[35]) /* fake_quant_140 */ /* ty=Tensor[(1, 384, 40, 40), uint8] */;
  %408 = fn (%FunctionVar_44_0: Tensor[(1, 384, 40, 40), uint8], %FunctionVar_44_1: Tensor[(256, 384, 1, 1), uint8], %FunctionVar_44_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad97efe8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %6 = (%FunctionVar_44_0, %FunctionVar_44_1, %FunctionVar_44_2, meta[relay.Constant][26] /* ty=Tensor[(256), float32] */, meta[relay.Constant][27] /* ty=Tensor[(256), int32] */, meta[relay.Constant][28] /* ty=Tensor[(256), int32] */, meta[relay.Constant][29] /* ty=Tensor[(256), int32] */, meta[relay.Constant][30] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%6, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0156927f], lhs_zero_points=[35], rhs_scales=[0.00186802f, 0.0025659f, 0.00160742f, 0.00168259f, 0.00154346f, 0.00168079f, 0.00244685f, 0.00292247f, 0.00205891f, 0.00220425f, 0.00408244f, 0.00408449f, 0.00317846f, 0.00118897f, 0.00311147f, 0.00182855f, 0.00212846f, 0.00309047f, 0.00171891f, 0.0024027f, 0.00232839f, 0.00235022f, 0.00268001f, 0.00162023f, 0.0014042f, 0.00132904f, 0.00255974f, 0.00185714f, 0.00190796f, 0.00193506f, 0.00261076f, 0.00330593f, 0.00349495f, 0.00302518f, 0.00110208f, 0.00233288f, 0.00176112f, 0.00134109f, 0.00349496f, 0.00272406f, 0.00158455f, 0.00162448f, 0.00154825f, 0.00169948f, 0.0053659f, 0.00313326f, 0.00274466f, 0.00284565f, 0.00264253f, 0.00174507f, 0.00232961f, 0.0024446f, 0.00183649f, 0.00185846f, 0.00392365f, 0.00193257f, 0.00286442f, 0.00221972f, 0.00251983f, 0.00275447f, 0.00192416f, 0.00259837f, 0.00181571f, 0.00211534f, 0.00144298f, 0.00254394f, 0.0022426f, 0.00382474f, 0.00360895f, 0.00264596f, 0.00174359f, 0.00380158f, 0.00160018f, 0.00156996f, 0.00248578f, 0.00291255f, 0.00243118f, 0.00353814f, 0.00266122f, 0.00266256f, 0.00177395f, 0.00243613f, 0.0023812f, 0.00188153f, 0.0032886f, 0.00159977f, 0.00213949f, 0.00328587f, 0.00140534f, 0.00330372f, 0.00326319f, 0.00224692f, 0.00155995f, 0.00199254f, 0.00223127f, 0.00139909f, 0.00189023f, 0.00287845f, 0.00153938f, 0.00280196f, 0.00194561f, 0.00300101f, 0.00439471f, 0.00136092f, 0.00226912f, 0.00172129f, 0.00226346f, 0.00279667f, 0.00143076f, 0.00194099f, 0.00158448f, 0.00121523f, 0.00216909f, 0.0017578f, 0.00159142f, 0.00249429f, 0.0024349f, 0.00249148f, 0.00166897f, 0.00161968f, 0.00247561f, 0.00131385f, 0.00158797f, 0.00287709f, 0.00231859f, 0.00275041f, 0.0022932f, 0.00265183f, 0.00243402f, 0.00191215f, 0.00200558f, 0.0017679f, 0.00165547f, 0.00223868f, 0.00160565f, 0.00156773f, 0.00335273f, 0.00287874f, 0.00226368f, 0.00432649f, 0.00177867f, 0.00233485f, 0.00333764f, 0.00202611f, 0.00173998f, 0.0021884f, 0.00185909f, 0.00215375f, 0.0027145f, 0.00150707f, 0.00179943f, 0.00379676f, 0.00193965f, 0.00260621f, 0.00133729f, 0.00254358f, 0.00165844f, 0.00170927f, 0.00227944f, 0.00316175f, 0.00209018f, 0.0018971f, 0.00193862f, 0.00215357f, 0.0024198f, 0.00210462f, 0.00280813f, 0.00292238f, 0.00180494f, 0.00189682f, 0.00233671f, 0.0023648f, 0.00164207f, 0.0016867f, 0.00258147f, 0.00343173f, 0.00251372f, 0.0016981f, 0.00196403f, 0.00218247f, 0.00326044f, 0.00263661f, 0.0037422f, 0.00316325f, 0.00169306f, 0.00266985f, 0.00292987f, 0.00312542f, 0.00208239f, 0.00214805f, 0.00304195f, 0.00283623f, 0.00134297f, 0.00166404f, 0.00167594f, 0.0020137f, 0.00231643f, 0.00376785f, 0.00141553f, 0.0027926f, 0.0011844f, 0.00319131f, 0.00336979f, 0.0035418f, 0.00161199f, 0.00234968f, 0.00327377f, 0.00236096f, 0.00178173f, 0.00274241f, 0.00268044f, 0.00155957f, 0.00146223f, 0.00334513f, 0.00232601f, 0.00211097f, 0.00275688f, 0.00132623f, 0.00244547f, 0.00168277f, 0.00198752f, 0.00222943f, 0.00346977f, 0.00143824f, 0.0018355f, 0.00300855f, 0.00353056f, 0.00156125f, 0.00219512f, 0.0027185f, 0.00237952f, 0.00142383f, 0.00221213f, 0.00219397f, 0.00199863f, 0.00141662f, 0.00163601f, 0.00172269f, 0.00239603f, 0.00234463f, 0.00380562f, 0.00278825f, 0.00186229f, 0.00399021f, 0.00479024f, 0.00227278f, 0.00244685f, 0.00178266f, 0.00178156f, 0.00224292f, 0.00235918f, 0.0033309f, 0.0024546f, 0.00268023f, 0.00222311f, 0.00162554f], rhs_zero_points=[115, 140, 136, 163, 120, 113, 144, 108, 137, 112, 93, 96, 142, 131, 155, 131, 155, 97, 142, 144, 164, 140, 114, 147, 123, 140, 127, 162, 136, 167, 160, 138, 104, 134, 111, 119, 101, 122, 120, 144, 120, 146, 150, 141, 114, 111, 97, 132, 117, 119, 144, 114, 125, 141, 102, 158, 106, 123, 148, 104, 104, 125, 127, 97, 119, 114, 154, 97, 106, 114, 142, 148, 119, 121, 121, 132, 128, 130, 140, 111, 134, 145, 142, 157, 90, 126, 128, 113, 121, 107, 115, 120, 123, 141, 123, 111, 130, 146, 142, 122, 123, 133, 138, 115, 140, 131, 130, 149, 129, 125, 123, 133, 133, 129, 142, 139, 141, 184, 128, 125, 134, 91, 131, 122, 151, 122, 145, 118, 115, 129, 181, 129, 134, 143, 147, 118, 148, 105, 134, 96, 116, 138, 138, 138, 133, 150, 144, 138, 132, 133, 130, 107, 129, 103, 142, 146, 165, 142, 133, 118, 134, 161, 132, 132, 128, 123, 107, 143, 110, 143, 121, 96, 121, 146, 113, 105, 117, 153, 138, 138, 111, 113, 123, 97, 151, 135, 134, 94, 133, 120, 122, 140, 127, 141, 126, 121, 136, 80, 107, 121, 125, 117, 127, 131, 160, 141, 125, 129, 115, 98, 116, 157, 126, 121, 113, 118, 151, 144, 200, 136, 176, 141, 118, 143, 137, 118, 106, 117, 121, 112, 136, 141, 120, 143, 119, 144, 123, 124, 155, 132, 166, 135, 156, 150, 76, 115, 162, 127, 112, 133, 128, 111, 149, 164, 116, 131], scales=[0.0241768f], zero_points=[146]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %409 = %408(%407, meta[relay.Constant][332] /* ty=Tensor[(256, 384, 1, 1), uint8] */, meta[relay.Constant][333] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0156927f], lhs_zero_points=[35], rhs_scales=[0.00186802f, 0.0025659f, 0.00160742f, 0.00168259f, 0.00154346f, 0.00168079f, 0.00244685f, 0.00292247f, 0.00205891f, 0.00220425f, 0.00408244f, 0.00408449f, 0.00317846f, 0.00118897f, 0.00311147f, 0.00182855f, 0.00212846f, 0.00309047f, 0.00171891f, 0.0024027f, 0.00232839f, 0.00235022f, 0.00268001f, 0.00162023f, 0.0014042f, 0.00132904f, 0.00255974f, 0.00185714f, 0.00190796f, 0.00193506f, 0.00261076f, 0.00330593f, 0.00349495f, 0.00302518f, 0.00110208f, 0.00233288f, 0.00176112f, 0.00134109f, 0.00349496f, 0.00272406f, 0.00158455f, 0.00162448f, 0.00154825f, 0.00169948f, 0.0053659f, 0.00313326f, 0.00274466f, 0.00284565f, 0.00264253f, 0.00174507f, 0.00232961f, 0.0024446f, 0.00183649f, 0.00185846f, 0.00392365f, 0.00193257f, 0.00286442f, 0.00221972f, 0.00251983f, 0.00275447f, 0.00192416f, 0.00259837f, 0.00181571f, 0.00211534f, 0.00144298f, 0.00254394f, 0.0022426f, 0.00382474f, 0.00360895f, 0.00264596f, 0.00174359f, 0.00380158f, 0.00160018f, 0.00156996f, 0.00248578f, 0.00291255f, 0.00243118f, 0.00353814f, 0.00266122f, 0.00266256f, 0.00177395f, 0.00243613f, 0.0023812f, 0.00188153f, 0.0032886f, 0.00159977f, 0.00213949f, 0.00328587f, 0.00140534f, 0.00330372f, 0.00326319f, 0.00224692f, 0.00155995f, 0.00199254f, 0.00223127f, 0.00139909f, 0.00189023f, 0.00287845f, 0.00153938f, 0.00280196f, 0.00194561f, 0.00300101f, 0.00439471f, 0.00136092f, 0.00226912f, 0.00172129f, 0.00226346f, 0.00279667f, 0.00143076f, 0.00194099f, 0.00158448f, 0.00121523f, 0.00216909f, 0.0017578f, 0.00159142f, 0.00249429f, 0.0024349f, 0.00249148f, 0.00166897f, 0.00161968f, 0.00247561f, 0.00131385f, 0.00158797f, 0.00287709f, 0.00231859f, 0.00275041f, 0.0022932f, 0.00265183f, 0.00243402f, 0.00191215f, 0.00200558f, 0.0017679f, 0.00165547f, 0.00223868f, 0.00160565f, 0.00156773f, 0.00335273f, 0.00287874f, 0.00226368f, 0.00432649f, 0.00177867f, 0.00233485f, 0.00333764f, 0.00202611f, 0.00173998f, 0.0021884f, 0.00185909f, 0.00215375f, 0.0027145f, 0.00150707f, 0.00179943f, 0.00379676f, 0.00193965f, 0.00260621f, 0.00133729f, 0.00254358f, 0.00165844f, 0.00170927f, 0.00227944f, 0.00316175f, 0.00209018f, 0.0018971f, 0.00193862f, 0.00215357f, 0.0024198f, 0.00210462f, 0.00280813f, 0.00292238f, 0.00180494f, 0.00189682f, 0.00233671f, 0.0023648f, 0.00164207f, 0.0016867f, 0.00258147f, 0.00343173f, 0.00251372f, 0.0016981f, 0.00196403f, 0.00218247f, 0.00326044f, 0.00263661f, 0.0037422f, 0.00316325f, 0.00169306f, 0.00266985f, 0.00292987f, 0.00312542f, 0.00208239f, 0.00214805f, 0.00304195f, 0.00283623f, 0.00134297f, 0.00166404f, 0.00167594f, 0.0020137f, 0.00231643f, 0.00376785f, 0.00141553f, 0.0027926f, 0.0011844f, 0.00319131f, 0.00336979f, 0.0035418f, 0.00161199f, 0.00234968f, 0.00327377f, 0.00236096f, 0.00178173f, 0.00274241f, 0.00268044f, 0.00155957f, 0.00146223f, 0.00334513f, 0.00232601f, 0.00211097f, 0.00275688f, 0.00132623f, 0.00244547f, 0.00168277f, 0.00198752f, 0.00222943f, 0.00346977f, 0.00143824f, 0.0018355f, 0.00300855f, 0.00353056f, 0.00156125f, 0.00219512f, 0.0027185f, 0.00237952f, 0.00142383f, 0.00221213f, 0.00219397f, 0.00199863f, 0.00141662f, 0.00163601f, 0.00172269f, 0.00239603f, 0.00234463f, 0.00380562f, 0.00278825f, 0.00186229f, 0.00399021f, 0.00479024f, 0.00227278f, 0.00244685f, 0.00178266f, 0.00178156f, 0.00224292f, 0.00235918f, 0.0033309f, 0.0024546f, 0.00268023f, 0.00222311f, 0.00162554f], rhs_zero_points=[115, 140, 136, 163, 120, 113, 144, 108, 137, 112, 93, 96, 142, 131, 155, 131, 155, 97, 142, 144, 164, 140, 114, 147, 123, 140, 127, 162, 136, 167, 160, 138, 104, 134, 111, 119, 101, 122, 120, 144, 120, 146, 150, 141, 114, 111, 97, 132, 117, 119, 144, 114, 125, 141, 102, 158, 106, 123, 148, 104, 104, 125, 127, 97, 119, 114, 154, 97, 106, 114, 142, 148, 119, 121, 121, 132, 128, 130, 140, 111, 134, 145, 142, 157, 90, 126, 128, 113, 121, 107, 115, 120, 123, 141, 123, 111, 130, 146, 142, 122, 123, 133, 138, 115, 140, 131, 130, 149, 129, 125, 123, 133, 133, 129, 142, 139, 141, 184, 128, 125, 134, 91, 131, 122, 151, 122, 145, 118, 115, 129, 181, 129, 134, 143, 147, 118, 148, 105, 134, 96, 116, 138, 138, 138, 133, 150, 144, 138, 132, 133, 130, 107, 129, 103, 142, 146, 165, 142, 133, 118, 134, 161, 132, 132, 128, 123, 107, 143, 110, 143, 121, 96, 121, 146, 113, 105, 117, 153, 138, 138, 111, 113, 123, 97, 151, 135, 134, 94, 133, 120, 122, 140, 127, 141, 126, 121, 136, 80, 107, 121, 125, 117, 127, 131, 160, 141, 125, 129, 115, 98, 116, 157, 126, 121, 113, 118, 151, 144, 200, 136, 176, 141, 118, 143, 137, 118, 106, 117, 121, 112, 136, 141, 120, 143, 119, 144, 123, 124, 155, 132, 166, 135, 156, 150, 76, 115, 162, 127, 112, 133, 128, 111, 149, 164, 116, 131], scales=[0.0241768f], zero_points=[146], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %410 = dl.dequantize(%409, input_scales=[0.0241768f], input_zero_points=[146]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %411 = sigmoid(%410) /* /model.13/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %412 = multiply(%410, %411) /* /model.13/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %413 = fn (%FunctionVar_0_02: Tensor[(1, 256, 40, 40), float32], PartitionedFromPattern="image.resize2d_", Composite="ds1:1|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aafa6608)) -> Tensor[(1, 256, 80, 80), float32] {
    image.resize2d(%FunctionVar_0_02, size=[80, 80], roi=[0f, 0f, 0f, 0f], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* /model.14/Resize_output_0 */ /* ty=Tensor[(1, 256, 80, 80), float32] */
  };
  %414 = %413(%412, stage7=0, resize_size=[80, 80], attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 80, 80), float32] */;
  %415 = (%414, %108);
  %416 = concatenate(%415, axis=1) /* /model.15/Concat_output_0 */ /* ty=Tensor[(1, 512, 80, 80), float32] */;
  %417 = dl.quantize(%416, output_scales=[0.0118357f], output_zero_points=[24]) /* fake_quant_143 */ /* ty=Tensor[(1, 512, 80, 80), uint8] */;
  %418 = fn (%FunctionVar_43_0: Tensor[(1, 512, 80, 80), uint8], %FunctionVar_43_1: Tensor[(128, 512, 1, 1), uint8], %FunctionVar_43_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a7b21788)) -> Tensor[(1, 128, 80, 80), uint8] {
    %5 = (%FunctionVar_43_0, %FunctionVar_43_1, %FunctionVar_43_2, meta[relay.Constant][21] /* ty=Tensor[(128), float32] */, meta[relay.Constant][22] /* ty=Tensor[(128), int32] */, meta[relay.Constant][23] /* ty=Tensor[(128), int32] */, meta[relay.Constant][24] /* ty=Tensor[(128), int32] */, meta[relay.Constant][25] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%5, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0118357f], lhs_zero_points=[24], rhs_scales=[0.00133141f, 0.00159782f, 0.00203644f, 0.00237244f, 0.00157033f, 0.00494939f, 0.00296727f, 0.00360642f, 0.00173891f, 0.0027223f, 0.00195252f, 0.00462801f, 0.00260563f, 0.00192917f, 0.00369115f, 0.00176439f, 0.0027719f, 0.00369462f, 0.00297873f, 0.00434149f, 0.00155348f, 0.00119893f, 0.00247046f, 0.00215862f, 0.00185f, 0.00237206f, 0.00241468f, 0.00140792f, 0.0025072f, 0.00207317f, 0.0036838f, 0.00135713f, 0.00227035f, 0.00325357f, 0.00227008f, 0.00551002f, 0.00422439f, 0.00203424f, 0.00475364f, 0.00130789f, 0.00179402f, 0.00528045f, 0.00215194f, 0.00168598f, 0.00198157f, 0.00296022f, 0.00482131f, 0.00292956f, 0.00202985f, 0.00145523f, 0.00437847f, 0.00215957f, 0.00201251f, 0.00257052f, 0.00239678f, 0.00175926f, 0.0016257f, 0.00219657f, 0.002004f, 0.00363923f, 0.00843482f, 0.00262413f, 0.00179691f, 0.0018271f, 0.00193048f, 0.00280852f, 0.00319224f, 0.00155534f, 0.00206889f, 0.00105025f, 0.00248295f, 0.00185679f, 0.00348947f, 0.00231779f, 0.0017517f, 0.00265628f, 0.00107031f, 0.00270054f, 0.0030962f, 0.00180759f, 0.00244421f, 0.00162046f, 0.00231339f, 0.00280687f, 0.00195781f, 0.00407298f, 0.00257403f, 0.00320139f, 0.000873196f, 0.00450808f, 0.00317258f, 0.00217269f, 0.00217401f, 0.00232995f, 0.0024584f, 0.00213183f, 0.00246848f, 0.000695067f, 0.000888991f, 0.00244629f, 0.00257876f, 0.00277976f, 0.00159435f, 0.00331718f, 0.00192631f, 0.00140573f, 0.00176068f, 0.00320242f, 0.0013114f, 0.00242857f, 0.00105676f, 0.000958352f, 0.00349926f, 0.00314431f, 0.00245027f, 0.00232717f, 0.00291202f, 0.00120641f, 0.00235842f, 0.00102606f, 0.00259168f, 0.00275543f, 0.00235497f, 0.00398817f, 0.000897413f, 0.00201255f, 0.00437763f, 0.000792687f], rhs_zero_points=[124, 123, 156, 134, 152, 147, 143, 172, 143, 112, 121, 139, 141, 132, 99, 129, 140, 150, 100, 125, 121, 142, 145, 105, 123, 135, 123, 109, 148, 160, 134, 147, 167, 141, 137, 201, 169, 138, 97, 127, 157, 174, 168, 152, 129, 121, 184, 130, 146, 154, 141, 110, 95, 131, 150, 145, 102, 163, 144, 148, 118, 138, 95, 144, 169, 152, 130, 129, 136, 147, 173, 149, 173, 140, 137, 167, 100, 154, 191, 149, 141, 161, 173, 158, 158, 148, 119, 152, 113, 181, 123, 143, 152, 177, 153, 153, 137, 134, 116, 156, 132, 130, 155, 135, 165, 126, 122, 170, 146, 169, 131, 153, 161, 138, 174, 138, 146, 155, 148, 100, 120, 155, 125, 205, 127, 177, 153, 125], scales=[0.0275461f], zero_points=[171]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %419 = %418(%417, meta[relay.Constant][334] /* ty=Tensor[(128, 512, 1, 1), uint8] */, meta[relay.Constant][335] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0118357f], lhs_zero_points=[24], rhs_scales=[0.00133141f, 0.00159782f, 0.00203644f, 0.00237244f, 0.00157033f, 0.00494939f, 0.00296727f, 0.00360642f, 0.00173891f, 0.0027223f, 0.00195252f, 0.00462801f, 0.00260563f, 0.00192917f, 0.00369115f, 0.00176439f, 0.0027719f, 0.00369462f, 0.00297873f, 0.00434149f, 0.00155348f, 0.00119893f, 0.00247046f, 0.00215862f, 0.00185f, 0.00237206f, 0.00241468f, 0.00140792f, 0.0025072f, 0.00207317f, 0.0036838f, 0.00135713f, 0.00227035f, 0.00325357f, 0.00227008f, 0.00551002f, 0.00422439f, 0.00203424f, 0.00475364f, 0.00130789f, 0.00179402f, 0.00528045f, 0.00215194f, 0.00168598f, 0.00198157f, 0.00296022f, 0.00482131f, 0.00292956f, 0.00202985f, 0.00145523f, 0.00437847f, 0.00215957f, 0.00201251f, 0.00257052f, 0.00239678f, 0.00175926f, 0.0016257f, 0.00219657f, 0.002004f, 0.00363923f, 0.00843482f, 0.00262413f, 0.00179691f, 0.0018271f, 0.00193048f, 0.00280852f, 0.00319224f, 0.00155534f, 0.00206889f, 0.00105025f, 0.00248295f, 0.00185679f, 0.00348947f, 0.00231779f, 0.0017517f, 0.00265628f, 0.00107031f, 0.00270054f, 0.0030962f, 0.00180759f, 0.00244421f, 0.00162046f, 0.00231339f, 0.00280687f, 0.00195781f, 0.00407298f, 0.00257403f, 0.00320139f, 0.000873196f, 0.00450808f, 0.00317258f, 0.00217269f, 0.00217401f, 0.00232995f, 0.0024584f, 0.00213183f, 0.00246848f, 0.000695067f, 0.000888991f, 0.00244629f, 0.00257876f, 0.00277976f, 0.00159435f, 0.00331718f, 0.00192631f, 0.00140573f, 0.00176068f, 0.00320242f, 0.0013114f, 0.00242857f, 0.00105676f, 0.000958352f, 0.00349926f, 0.00314431f, 0.00245027f, 0.00232717f, 0.00291202f, 0.00120641f, 0.00235842f, 0.00102606f, 0.00259168f, 0.00275543f, 0.00235497f, 0.00398817f, 0.000897413f, 0.00201255f, 0.00437763f, 0.000792687f], rhs_zero_points=[124, 123, 156, 134, 152, 147, 143, 172, 143, 112, 121, 139, 141, 132, 99, 129, 140, 150, 100, 125, 121, 142, 145, 105, 123, 135, 123, 109, 148, 160, 134, 147, 167, 141, 137, 201, 169, 138, 97, 127, 157, 174, 168, 152, 129, 121, 184, 130, 146, 154, 141, 110, 95, 131, 150, 145, 102, 163, 144, 148, 118, 138, 95, 144, 169, 152, 130, 129, 136, 147, 173, 149, 173, 140, 137, 167, 100, 154, 191, 149, 141, 161, 173, 158, 158, 148, 119, 152, 113, 181, 123, 143, 152, 177, 153, 153, 137, 134, 116, 156, 132, 130, 155, 135, 165, 126, 122, 170, 146, 169, 131, 153, 161, 138, 174, 138, 146, 155, 148, 100, 120, 155, 125, 205, 127, 177, 153, 125], scales=[0.0275461f], zero_points=[171], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %420 = dl.dequantize(%419, input_scales=[0.0275461f], input_zero_points=[171]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %421 = sigmoid(%420) /* /model.16/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %422 = multiply(%420, %421) /* /model.16/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %423 = fn (%FunctionVar_3_0: Tensor[(1, 128, 80, 80), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf8c898)) -> (Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) {
    split(%FunctionVar_3_0, indices_or_sections=[64], axis=1) /* /model.16/Split_output_0 */ /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) */
  };
  %424 = %423(%422, indices_or_sections=[64], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 64, 80, 80), float32], Tensor[(1, 64, 80, 80), float32]) */;
  %427 = %424.1;
  %428 = dl.quantize(%427, output_scales=[0.00659014f], output_zero_points=[42]) /* fake_quant_146 */ /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %429 = fn (%FunctionVar_42_0: Tensor[(1, 64, 80, 80), uint8], %FunctionVar_42_1: Tensor[(32, 64, 3, 3), uint8], %FunctionVar_42_2: Tensor[(32), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaee5438)) -> Tensor[(1, 32, 80, 80), uint8] {
    %426 = (%FunctionVar_42_0, %FunctionVar_42_1, %FunctionVar_42_2, meta[relay.Constant][341] /* ty=Tensor[(32), float32] */, meta[relay.Constant][342] /* ty=Tensor[(32), int32] */, meta[relay.Constant][343] /* ty=Tensor[(32), int32] */, meta[relay.Constant][344] /* ty=Tensor[(32), int32] */, meta[relay.Constant][345] /* ty=Tensor[(32), int32] */);
    dl.quantized_conv2d(%426, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00659014f], lhs_zero_points=[42], rhs_scales=[0.00652133f, 0.00526375f, 0.00666468f, 0.0033416f, 0.0055294f, 0.00718647f, 0.004021f, 0.00765242f, 0.00544177f, 0.00785499f, 0.00447138f, 0.00757551f, 0.0030032f, 0.00575126f, 0.00645349f, 0.00782957f, 0.00835529f, 0.00820797f, 0.00235292f, 0.00659955f, 0.00689919f, 0.00740757f, 0.00525854f, 0.00469515f, 0.00839644f, 0.0103208f, 0.00596333f, 0.00684204f, 0.0100124f, 0.00616718f, 0.00451745f, 0.00706632f], rhs_zero_points=[126, 157, 134, 160, 142, 152, 158, 167, 133, 165, 113, 156, 116, 154, 149, 179, 124, 168, 114, 130, 163, 172, 142, 130, 166, 158, 141, 78, 153, 134, 97, 153], scales=[0.0264784f], zero_points=[129]) /* ty=Tensor[(1, 32, 80, 80), uint8] */
  };
  %430 = %429(%428, meta[relay.Constant][346] /* ty=Tensor[(32, 64, 3, 3), uint8] */, meta[relay.Constant][347] /* ty=Tensor[(32), int32] */, kernel_size=[3, 3], pad_value=42f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00659014f], lhs_zero_points=[42], rhs_scales=[0.00652133f, 0.00526375f, 0.00666468f, 0.0033416f, 0.0055294f, 0.00718647f, 0.004021f, 0.00765242f, 0.00544177f, 0.00785499f, 0.00447138f, 0.00757551f, 0.0030032f, 0.00575126f, 0.00645349f, 0.00782957f, 0.00835529f, 0.00820797f, 0.00235292f, 0.00659955f, 0.00689919f, 0.00740757f, 0.00525854f, 0.00469515f, 0.00839644f, 0.0103208f, 0.00596333f, 0.00684204f, 0.0100124f, 0.00616718f, 0.00451745f, 0.00706632f], rhs_zero_points=[126, 157, 134, 160, 142, 152, 158, 167, 133, 165, 113, 156, 116, 154, 149, 179, 124, 168, 114, 130, 163, 172, 142, 130, 166, 158, 141, 78, 153, 134, 97, 153], scales=[0.0264784f], zero_points=[129], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 32, 80, 80), uint8] */;
  %431 = dl.dequantize(%430, input_scales=[0.0264784f], input_zero_points=[129]) /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %432 = sigmoid(%431) /* /model.16/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %433 = multiply(%431, %432) /* /model.16/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 32, 80, 80), float32] */;
  %434 = dl.quantize(%433, output_scales=[0.0137215f], output_zero_points=[20]) /* fake_quant_149 */ /* ty=Tensor[(1, 32, 80, 80), uint8] */;
  %435 = fn (%FunctionVar_41_0: Tensor[(1, 32, 80, 80), uint8], %FunctionVar_41_1: Tensor[(64, 32, 3, 3), uint8], %FunctionVar_41_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a98456c8)) -> Tensor[(1, 64, 80, 80), uint8] {
    %425 = (%FunctionVar_41_0, %FunctionVar_41_1, %FunctionVar_41_2, meta[relay.Constant][336] /* ty=Tensor[(64), float32] */, meta[relay.Constant][337] /* ty=Tensor[(64), int32] */, meta[relay.Constant][338] /* ty=Tensor[(64), int32] */, meta[relay.Constant][339] /* ty=Tensor[(64), int32] */, meta[relay.Constant][340] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%425, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0137215f], lhs_zero_points=[20], rhs_scales=[0.00534033f, 0.0041955f, 0.00477965f, 0.00356591f, 0.00679802f, 0.00199893f, 0.00463938f, 0.00619537f, 0.00503353f, 0.00711561f, 0.00669256f, 0.00254953f, 0.00178314f, 0.00483565f, 0.00554095f, 0.00216841f, 0.00499273f, 0.00558871f, 0.00543846f, 0.00367121f, 0.00582084f, 0.00438193f, 0.00607981f, 0.00407439f, 0.0042492f, 0.00281342f, 0.00332631f, 0.0035819f, 0.00330999f, 0.00536436f, 0.00738636f, 0.00936213f, 0.00482602f, 0.00455442f, 0.00515315f, 0.00619209f, 0.0052172f, 0.00399494f, 0.00620549f, 0.00568364f, 0.00463412f, 0.00516091f, 0.00584348f, 0.0032189f, 0.00564874f, 0.00425446f, 0.00384977f, 0.00511311f, 0.00488524f, 0.0020002f, 0.0068562f, 0.00458764f, 0.00205359f, 0.00517265f, 0.00549201f, 0.00387813f, 0.00381501f, 0.00392556f, 0.00276469f, 0.00421727f, 0.00500965f, 0.00481202f, 0.00415626f, 0.00448661f], rhs_zero_points=[143, 122, 157, 104, 111, 145, 151, 144, 176, 102, 126, 140, 127, 154, 126, 143, 111, 149, 129, 113, 121, 147, 135, 147, 119, 120, 180, 43, 144, 131, 144, 113, 163, 145, 141, 150, 118, 166, 134, 129, 116, 119, 125, 139, 115, 135, 174, 158, 156, 104, 148, 137, 113, 149, 158, 133, 155, 154, 141, 145, 141, 150, 150, 123], scales=[0.0261845f], zero_points=[136]) /* ty=Tensor[(1, 64, 80, 80), uint8] */
  };
  %436 = %435(%434, meta[relay.Constant][348] /* ty=Tensor[(64, 32, 3, 3), uint8] */, meta[relay.Constant][349] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=20f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0137215f], lhs_zero_points=[20], rhs_scales=[0.00534033f, 0.0041955f, 0.00477965f, 0.00356591f, 0.00679802f, 0.00199893f, 0.00463938f, 0.00619537f, 0.00503353f, 0.00711561f, 0.00669256f, 0.00254953f, 0.00178314f, 0.00483565f, 0.00554095f, 0.00216841f, 0.00499273f, 0.00558871f, 0.00543846f, 0.00367121f, 0.00582084f, 0.00438193f, 0.00607981f, 0.00407439f, 0.0042492f, 0.00281342f, 0.00332631f, 0.0035819f, 0.00330999f, 0.00536436f, 0.00738636f, 0.00936213f, 0.00482602f, 0.00455442f, 0.00515315f, 0.00619209f, 0.0052172f, 0.00399494f, 0.00620549f, 0.00568364f, 0.00463412f, 0.00516091f, 0.00584348f, 0.0032189f, 0.00564874f, 0.00425446f, 0.00384977f, 0.00511311f, 0.00488524f, 0.0020002f, 0.0068562f, 0.00458764f, 0.00205359f, 0.00517265f, 0.00549201f, 0.00387813f, 0.00381501f, 0.00392556f, 0.00276469f, 0.00421727f, 0.00500965f, 0.00481202f, 0.00415626f, 0.00448661f], rhs_zero_points=[143, 122, 157, 104, 111, 145, 151, 144, 176, 102, 126, 140, 127, 154, 126, 143, 111, 149, 129, 113, 121, 147, 135, 147, 119, 120, 180, 43, 144, 131, 144, 113, 163, 145, 141, 150, 118, 166, 134, 129, 116, 119, 125, 139, 115, 135, 174, 158, 156, 104, 148, 137, 113, 149, 158, 133, 155, 154, 141, 145, 141, 150, 150, 123], scales=[0.0261845f], zero_points=[136], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %437 = dl.dequantize(%436, input_scales=[0.0261845f], input_zero_points=[136]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %438 = sigmoid(%437) /* /model.16/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %439 = multiply(%437, %438) /* /model.16/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %440 = %424.0;
  %441 = add(%427, %439) /* /model.16/m.0/Add_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %442 = (%440, %427, %441);
  %443 = concatenate(%442, axis=1) /* /model.16/Concat_output_0 */ /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %444 = dl.quantize(%443, output_scales=[0.0150633f], output_zero_points=[37]) /* fake_quant_152 */ /* ty=Tensor[(1, 192, 80, 80), uint8] */;
  %445 = fn (%FunctionVar_40_0: Tensor[(1, 192, 80, 80), uint8], %FunctionVar_40_1: Tensor[(128, 192, 1, 1), uint8], %FunctionVar_40_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a955e568)) -> Tensor[(1, 128, 80, 80), uint8] {
    %4 = (%FunctionVar_40_0, %FunctionVar_40_1, %FunctionVar_40_2, meta[relay.Constant][16] /* ty=Tensor[(128), float32] */, meta[relay.Constant][17] /* ty=Tensor[(128), int32] */, meta[relay.Constant][18] /* ty=Tensor[(128), int32] */, meta[relay.Constant][19] /* ty=Tensor[(128), int32] */, meta[relay.Constant][20] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%4, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0150633f], lhs_zero_points=[37], rhs_scales=[0.00279832f, 0.00509466f, 0.00357003f, 0.0082129f, 0.00515966f, 0.0033735f, 0.00394892f, 0.00633814f, 0.00378053f, 0.00561558f, 0.00680074f, 0.00353234f, 0.0015697f, 0.00539215f, 0.00388948f, 0.00475242f, 0.00269092f, 0.00517011f, 0.00605851f, 0.0059872f, 0.004179f, 0.00444212f, 0.00651618f, 0.00642749f, 0.00431629f, 0.0070044f, 0.00289802f, 0.00585996f, 0.00261638f, 0.00395027f, 0.0058054f, 0.0056439f, 0.0025509f, 0.00500992f, 0.00400854f, 0.00514395f, 0.00469649f, 0.00391499f, 0.00300098f, 0.00447744f, 0.00428204f, 0.00242382f, 0.00395302f, 0.00358643f, 0.00352692f, 0.00464577f, 0.00556936f, 0.00490178f, 0.00205948f, 0.00373133f, 0.00241218f, 0.00525774f, 0.00277787f, 0.00428692f, 0.00230756f, 0.00722161f, 0.00411243f, 0.00212827f, 0.00513564f, 0.00487945f, 0.00536557f, 0.002757f, 0.00290386f, 0.00352341f, 0.00521311f, 0.00501394f, 0.00377216f, 0.00463908f, 0.00346063f, 0.00279476f, 0.00404403f, 0.00313191f, 0.00192709f, 0.005928f, 0.00179528f, 0.00367728f, 0.00358957f, 0.00554944f, 0.00704995f, 0.00347261f, 0.0050816f, 0.0033395f, 0.00234477f, 0.00349988f, 0.00428951f, 0.00417058f, 0.00658271f, 0.00566478f, 0.00771147f, 0.00399609f, 0.00662108f, 0.00705525f, 0.00531514f, 0.00208833f, 0.0021864f, 0.00292777f, 0.00464684f, 0.00165761f, 0.00629319f, 0.00276072f, 0.00180724f, 0.00197119f, 0.00581207f, 0.00419577f, 0.00445441f, 0.00387871f, 0.0022637f, 0.0044477f, 0.00220258f, 0.00464645f, 0.0067629f, 0.00543823f, 0.00669287f, 0.00212201f, 0.00160315f, 0.00808956f, 0.00461548f, 0.00505994f, 0.0047534f, 0.00645228f, 0.0064934f, 0.00620603f, 0.003886f, 0.00542554f, 0.00556275f, 0.00237302f, 0.00193463f, 0.00472957f], rhs_zero_points=[120, 124, 191, 175, 132, 115, 102, 109, 144, 140, 130, 121, 116, 115, 107, 140, 110, 194, 134, 152, 149, 117, 153, 139, 165, 144, 138, 135, 116, 136, 142, 123, 128, 171, 132, 149, 156, 151, 123, 138, 146, 92, 107, 111, 100, 102, 138, 166, 106, 126, 132, 126, 101, 141, 150, 154, 117, 73, 130, 134, 149, 119, 107, 84, 128, 122, 142, 114, 117, 126, 152, 166, 122, 130, 119, 175, 163, 96, 149, 154, 163, 131, 99, 116, 129, 169, 151, 155, 134, 178, 148, 123, 149, 97, 197, 123, 122, 110, 142, 138, 127, 121, 138, 140, 122, 142, 133, 116, 133, 112, 128, 168, 144, 115, 117, 176, 130, 143, 128, 137, 176, 147, 186, 122, 144, 117, 111, 131], scales=[0.0305964f], zero_points=[166]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %446 = %445(%444, meta[relay.Constant][350] /* ty=Tensor[(128, 192, 1, 1), uint8] */, meta[relay.Constant][351] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0150633f], lhs_zero_points=[37], rhs_scales=[0.00279832f, 0.00509466f, 0.00357003f, 0.0082129f, 0.00515966f, 0.0033735f, 0.00394892f, 0.00633814f, 0.00378053f, 0.00561558f, 0.00680074f, 0.00353234f, 0.0015697f, 0.00539215f, 0.00388948f, 0.00475242f, 0.00269092f, 0.00517011f, 0.00605851f, 0.0059872f, 0.004179f, 0.00444212f, 0.00651618f, 0.00642749f, 0.00431629f, 0.0070044f, 0.00289802f, 0.00585996f, 0.00261638f, 0.00395027f, 0.0058054f, 0.0056439f, 0.0025509f, 0.00500992f, 0.00400854f, 0.00514395f, 0.00469649f, 0.00391499f, 0.00300098f, 0.00447744f, 0.00428204f, 0.00242382f, 0.00395302f, 0.00358643f, 0.00352692f, 0.00464577f, 0.00556936f, 0.00490178f, 0.00205948f, 0.00373133f, 0.00241218f, 0.00525774f, 0.00277787f, 0.00428692f, 0.00230756f, 0.00722161f, 0.00411243f, 0.00212827f, 0.00513564f, 0.00487945f, 0.00536557f, 0.002757f, 0.00290386f, 0.00352341f, 0.00521311f, 0.00501394f, 0.00377216f, 0.00463908f, 0.00346063f, 0.00279476f, 0.00404403f, 0.00313191f, 0.00192709f, 0.005928f, 0.00179528f, 0.00367728f, 0.00358957f, 0.00554944f, 0.00704995f, 0.00347261f, 0.0050816f, 0.0033395f, 0.00234477f, 0.00349988f, 0.00428951f, 0.00417058f, 0.00658271f, 0.00566478f, 0.00771147f, 0.00399609f, 0.00662108f, 0.00705525f, 0.00531514f, 0.00208833f, 0.0021864f, 0.00292777f, 0.00464684f, 0.00165761f, 0.00629319f, 0.00276072f, 0.00180724f, 0.00197119f, 0.00581207f, 0.00419577f, 0.00445441f, 0.00387871f, 0.0022637f, 0.0044477f, 0.00220258f, 0.00464645f, 0.0067629f, 0.00543823f, 0.00669287f, 0.00212201f, 0.00160315f, 0.00808956f, 0.00461548f, 0.00505994f, 0.0047534f, 0.00645228f, 0.0064934f, 0.00620603f, 0.003886f, 0.00542554f, 0.00556275f, 0.00237302f, 0.00193463f, 0.00472957f], rhs_zero_points=[120, 124, 191, 175, 132, 115, 102, 109, 144, 140, 130, 121, 116, 115, 107, 140, 110, 194, 134, 152, 149, 117, 153, 139, 165, 144, 138, 135, 116, 136, 142, 123, 128, 171, 132, 149, 156, 151, 123, 138, 146, 92, 107, 111, 100, 102, 138, 166, 106, 126, 132, 126, 101, 141, 150, 154, 117, 73, 130, 134, 149, 119, 107, 84, 128, 122, 142, 114, 117, 126, 152, 166, 122, 130, 119, 175, 163, 96, 149, 154, 163, 131, 99, 116, 129, 169, 151, 155, 134, 178, 148, 123, 149, 97, 197, 123, 122, 110, 142, 138, 127, 121, 138, 140, 122, 142, 133, 116, 133, 112, 128, 168, 144, 115, 117, 176, 130, 143, 128, 137, 176, 147, 186, 122, 144, 117, 111, 131], scales=[0.0305964f], zero_points=[166], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %447 = dl.dequantize(%446, input_scales=[0.0305964f], input_zero_points=[166]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %448 = sigmoid(%447) /* /model.16/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %449 = multiply(%447, %448) /* /model.16/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %450 = dl.quantize(%449, output_scales=[0.0111069f], output_zero_points=[25]) /* fake_quant_155 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %451 = fn (%FunctionVar_39_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_39_1: Tensor[(64, 128, 3, 3), uint8], %FunctionVar_39_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae82a58)) -> Tensor[(1, 64, 80, 80), uint8] {
    %3 = (%FunctionVar_39_0, %FunctionVar_39_1, %FunctionVar_39_2, meta[relay.Constant][11] /* ty=Tensor[(64), float32] */, meta[relay.Constant][12] /* ty=Tensor[(64), int32] */, meta[relay.Constant][13] /* ty=Tensor[(64), int32] */, meta[relay.Constant][14] /* ty=Tensor[(64), int32] */, meta[relay.Constant][15] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%3, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.0036357f, 0.00434458f, 0.00204458f, 0.00944211f, 0.00924147f, 0.00560343f, 0.00536307f, 0.00570855f, 0.0035682f, 0.0038826f, 0.00561999f, 0.0033836f, 0.00313267f, 0.00387916f, 0.0044304f, 0.00182188f, 0.00271838f, 0.00379901f, 0.00266655f, 0.00318865f, 0.00444538f, 0.00260088f, 0.00538485f, 0.00977756f, 0.00607337f, 0.00829624f, 0.00327283f, 0.0047783f, 0.00484845f, 0.00546409f, 0.00675953f, 0.0049639f, 0.00243936f, 0.00560719f, 0.00369842f, 0.00843481f, 0.00398039f, 0.0037801f, 0.00818717f, 0.0043999f, 0.00641706f, 0.00321602f, 0.00449684f, 0.00530918f, 0.00456041f, 0.00460781f, 0.00239057f, 0.00569857f, 0.00258919f, 0.00279442f, 0.00477922f, 0.00447832f, 0.00582676f, 0.00562925f, 0.00370882f, 0.00724045f, 0.00528282f, 0.0052646f, 0.00488524f, 0.00495284f, 0.00787314f, 0.00315378f, 0.00504479f, 0.00961182f], rhs_zero_points=[160, 103, 122, 65, 197, 149, 136, 140, 165, 149, 114, 178, 148, 143, 142, 96, 139, 167, 136, 156, 146, 144, 109, 181, 155, 133, 148, 163, 126, 156, 145, 123, 103, 165, 153, 150, 171, 163, 147, 143, 111, 136, 107, 143, 183, 129, 128, 153, 153, 134, 127, 158, 157, 154, 151, 167, 188, 173, 126, 183, 159, 121, 127, 93], scales=[0.0374865f], zero_points=[149]) /* ty=Tensor[(1, 64, 80, 80), uint8] */
  };
  %452 = %451(%450, meta[relay.Constant][352] /* ty=Tensor[(64, 128, 3, 3), uint8] */, meta[relay.Constant][353] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=25f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.0036357f, 0.00434458f, 0.00204458f, 0.00944211f, 0.00924147f, 0.00560343f, 0.00536307f, 0.00570855f, 0.0035682f, 0.0038826f, 0.00561999f, 0.0033836f, 0.00313267f, 0.00387916f, 0.0044304f, 0.00182188f, 0.00271838f, 0.00379901f, 0.00266655f, 0.00318865f, 0.00444538f, 0.00260088f, 0.00538485f, 0.00977756f, 0.00607337f, 0.00829624f, 0.00327283f, 0.0047783f, 0.00484845f, 0.00546409f, 0.00675953f, 0.0049639f, 0.00243936f, 0.00560719f, 0.00369842f, 0.00843481f, 0.00398039f, 0.0037801f, 0.00818717f, 0.0043999f, 0.00641706f, 0.00321602f, 0.00449684f, 0.00530918f, 0.00456041f, 0.00460781f, 0.00239057f, 0.00569857f, 0.00258919f, 0.00279442f, 0.00477922f, 0.00447832f, 0.00582676f, 0.00562925f, 0.00370882f, 0.00724045f, 0.00528282f, 0.0052646f, 0.00488524f, 0.00495284f, 0.00787314f, 0.00315378f, 0.00504479f, 0.00961182f], rhs_zero_points=[160, 103, 122, 65, 197, 149, 136, 140, 165, 149, 114, 178, 148, 143, 142, 96, 139, 167, 136, 156, 146, 144, 109, 181, 155, 133, 148, 163, 126, 156, 145, 123, 103, 165, 153, 150, 171, 163, 147, 143, 111, 136, 107, 143, 183, 129, 128, 153, 153, 134, 127, 158, 157, 154, 151, 167, 188, 173, 126, 183, 159, 121, 127, 93], scales=[0.0374865f], zero_points=[149], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %453 = dl.dequantize(%452, input_scales=[0.0374865f], input_zero_points=[149]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %454 = sigmoid(%453) /* /model.23/cv2.0/cv2.0.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %455 = multiply(%453, %454) /* /model.23/cv2.0/cv2.0.0/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %456 = dl.quantize(%455, output_scales=[0.0163101f], output_zero_points=[17]) /* fake_quant_158 */ /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %457 = fn (%FunctionVar_38_0: Tensor[(1, 64, 80, 80), uint8], %FunctionVar_38_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_38_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adb3c0d8)) -> Tensor[(1, 64, 80, 80), uint8] {
    %2 = (%FunctionVar_38_0, %FunctionVar_38_1, %FunctionVar_38_2, meta[relay.Constant][6] /* ty=Tensor[(64), float32] */, meta[relay.Constant][7] /* ty=Tensor[(64), int32] */, meta[relay.Constant][8] /* ty=Tensor[(64), int32] */, meta[relay.Constant][9] /* ty=Tensor[(64), int32] */, meta[relay.Constant][10] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%2, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0163101f], lhs_zero_points=[17], rhs_scales=[0.018801f, 0.00938203f, 0.00886829f, 0.0236694f, 0.00496593f, 0.00384076f, 0.00323897f, 0.00644582f, 0.00319853f, 0.0082846f, 0.0115992f, 0.0159056f, 0.00451532f, 0.0114606f, 0.00351445f, 0.00727491f, 0.0161459f, 0.0229574f, 0.0230521f, 0.00733641f, 0.0112177f, 0.00770084f, 0.00904749f, 0.00443398f, 0.00696112f, 0.00835594f, 0.0261559f, 0.0103303f, 0.00861443f, 0.00798709f, 0.0120217f, 0.00413152f, 0.0127249f, 0.0188437f, 0.00332123f, 0.00419496f, 0.00675669f, 0.0137437f, 0.00809444f, 0.0196809f, 0.0147996f, 0.0334321f, 0.00717207f, 0.00495185f, 0.0123606f, 0.00834311f, 0.0113584f, 0.00768788f, 0.0146386f, 0.00272909f, 0.00744135f, 0.0142287f, 0.00545071f, 0.0142263f, 0.00342497f, 0.00726896f, 0.00497887f, 0.00774393f, 0.0109819f, 0.00581175f, 0.00668017f, 0.00559864f, 0.0100784f, 0.00755296f], rhs_zero_points=[138, 152, 150, 63, 126, 137, 105, 131, 137, 131, 101, 186, 137, 112, 159, 118, 184, 113, 68, 106, 129, 134, 161, 136, 129, 75, 199, 94, 141, 114, 123, 170, 117, 132, 114, 95, 152, 107, 97, 203, 128, 104, 137, 163, 144, 144, 141, 131, 113, 144, 181, 176, 153, 146, 121, 135, 102, 135, 147, 122, 135, 128, 154, 181], scales=[0.125723f], zero_points=[93]) /* ty=Tensor[(1, 64, 80, 80), uint8] */
  };
  %458 = %457(%456, meta[relay.Constant][354] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][355] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=17f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0163101f], lhs_zero_points=[17], rhs_scales=[0.018801f, 0.00938203f, 0.00886829f, 0.0236694f, 0.00496593f, 0.00384076f, 0.00323897f, 0.00644582f, 0.00319853f, 0.0082846f, 0.0115992f, 0.0159056f, 0.00451532f, 0.0114606f, 0.00351445f, 0.00727491f, 0.0161459f, 0.0229574f, 0.0230521f, 0.00733641f, 0.0112177f, 0.00770084f, 0.00904749f, 0.00443398f, 0.00696112f, 0.00835594f, 0.0261559f, 0.0103303f, 0.00861443f, 0.00798709f, 0.0120217f, 0.00413152f, 0.0127249f, 0.0188437f, 0.00332123f, 0.00419496f, 0.00675669f, 0.0137437f, 0.00809444f, 0.0196809f, 0.0147996f, 0.0334321f, 0.00717207f, 0.00495185f, 0.0123606f, 0.00834311f, 0.0113584f, 0.00768788f, 0.0146386f, 0.00272909f, 0.00744135f, 0.0142287f, 0.00545071f, 0.0142263f, 0.00342497f, 0.00726896f, 0.00497887f, 0.00774393f, 0.0109819f, 0.00581175f, 0.00668017f, 0.00559864f, 0.0100784f, 0.00755296f], rhs_zero_points=[138, 152, 150, 63, 126, 137, 105, 131, 137, 131, 101, 186, 137, 112, 159, 118, 184, 113, 68, 106, 129, 134, 161, 136, 129, 75, 199, 94, 141, 114, 123, 170, 117, 132, 114, 95, 152, 107, 97, 203, 128, 104, 137, 163, 144, 144, 141, 131, 113, 144, 181, 176, 153, 146, 121, 135, 102, 135, 147, 122, 135, 128, 154, 181], scales=[0.125723f], zero_points=[93], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %459 = dl.dequantize(%458, input_scales=[0.125723f], input_zero_points=[93]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %460 = sigmoid(%459) /* /model.23/cv2.0/cv2.0.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %461 = multiply(%459, %460) /* /model.23/cv2.0/cv2.0.1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %462 = dl.quantize(%461, output_scales=[0.0811047f], output_zero_points=[3]) /* fake_quant_161 */ /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %463 = fn (%FunctionVar_37_0: Tensor[(1, 64, 80, 80), uint8], %FunctionVar_37_1: Tensor[(64, 64, 1, 1), uint8], %FunctionVar_37_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a7b28548)) -> Tensor[(1, 64, 80, 80), uint8] {
    %1 = (%FunctionVar_37_0, %FunctionVar_37_1, %FunctionVar_37_2, meta[relay.Constant][1] /* ty=Tensor[(64), float32] */, meta[relay.Constant][2] /* ty=Tensor[(64), int32] */, meta[relay.Constant][3] /* ty=Tensor[(64), int32] */, meta[relay.Constant][4] /* ty=Tensor[(64), int32] */, meta[relay.Constant][5] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%1, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0811047f], lhs_zero_points=[3], rhs_scales=[0.00189233f, 0.00176643f, 0.00181047f, 0.00142607f, 0.00126666f, 0.00140931f, 0.00104693f, 0.000752767f, 0.000810451f, 0.000679525f, 0.000580791f, 0.000476314f, 0.000398823f, 0.000361603f, 0.000335753f, 0.000509703f, 0.00190908f, 0.00161851f, 0.00167404f, 0.00137772f, 0.00131309f, 0.00125326f, 0.000977759f, 0.000957654f, 0.000752169f, 0.000522868f, 0.000507609f, 0.000478587f, 0.00044789f, 0.000424254f, 0.000391941f, 0.000533639f, 0.00202876f, 0.00168409f, 0.00173292f, 0.00141314f, 0.00121448f, 0.00126235f, 0.00110988f, 0.000848269f, 0.000597067f, 0.00058881f, 0.000579714f, 0.000546444f, 0.000486965f, 0.00042198f, 0.000373212f, 0.000475476f, 0.00177983f, 0.00167595f, 0.00167356f, 0.0013028f, 0.00127336f, 0.00127671f, 0.000997147f, 0.00106441f, 0.000837737f, 0.000516764f, 0.000597307f, 0.000553026f, 0.000481579f, 0.000419467f, 0.000367527f, 0.000517482f], rhs_zero_points=[116, 95, 98, 104, 121, 105, 114, 122, 115, 68, 63, 69, 73, 81, 87, 104, 121, 90, 112, 99, 118, 123, 128, 91, 82, 76, 59, 57, 55, 62, 69, 98, 128, 89, 104, 102, 111, 108, 98, 92, 94, 76, 67, 69, 69, 66, 69, 91, 120, 109, 118, 92, 109, 98, 134, 90, 78, 87, 62, 58, 57, 62, 68, 66], scales=[0.0451293f], zero_points=[43]) /* ty=Tensor[(1, 64, 80, 80), uint8] */
  };
  %464 = %463(%462, meta[relay.Constant][356] /* ty=Tensor[(64, 64, 1, 1), uint8] */, meta[relay.Constant][357] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.0811047f], lhs_zero_points=[3], rhs_scales=[0.00189233f, 0.00176643f, 0.00181047f, 0.00142607f, 0.00126666f, 0.00140931f, 0.00104693f, 0.000752767f, 0.000810451f, 0.000679525f, 0.000580791f, 0.000476314f, 0.000398823f, 0.000361603f, 0.000335753f, 0.000509703f, 0.00190908f, 0.00161851f, 0.00167404f, 0.00137772f, 0.00131309f, 0.00125326f, 0.000977759f, 0.000957654f, 0.000752169f, 0.000522868f, 0.000507609f, 0.000478587f, 0.00044789f, 0.000424254f, 0.000391941f, 0.000533639f, 0.00202876f, 0.00168409f, 0.00173292f, 0.00141314f, 0.00121448f, 0.00126235f, 0.00110988f, 0.000848269f, 0.000597067f, 0.00058881f, 0.000579714f, 0.000546444f, 0.000486965f, 0.00042198f, 0.000373212f, 0.000475476f, 0.00177983f, 0.00167595f, 0.00167356f, 0.0013028f, 0.00127336f, 0.00127671f, 0.000997147f, 0.00106441f, 0.000837737f, 0.000516764f, 0.000597307f, 0.000553026f, 0.000481579f, 0.000419467f, 0.000367527f, 0.000517482f], rhs_zero_points=[116, 95, 98, 104, 121, 105, 114, 122, 115, 68, 63, 69, 73, 81, 87, 104, 121, 90, 112, 99, 118, 123, 128, 91, 82, 76, 59, 57, 55, 62, 69, 98, 128, 89, 104, 102, 111, 108, 98, 92, 94, 76, 67, 69, 69, 66, 69, 91, 120, 109, 118, 92, 109, 98, 134, 90, 78, 87, 62, 58, 57, 62, 68, 66], scales=[0.0451293f], zero_points=[43], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 80, 80), uint8] */;
  %470 = fn (%FunctionVar_36_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_36_1: Tensor[(128, 1, 3, 3), uint8], %FunctionVar_36_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad99c1b8)) -> Tensor[(1, 128, 80, 80), uint8] {
    %469 = (%FunctionVar_36_0, %FunctionVar_36_1, %FunctionVar_36_2, meta[relay.Constant][378] /* ty=Tensor[(128), float32] */, meta[relay.Constant][379] /* ty=Tensor[(128), int32] */, meta[relay.Constant][380] /* ty=Tensor[(128), int32] */, meta[relay.Constant][381] /* ty=Tensor[(128), int32] */, meta[relay.Constant][382] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%469, groups=128, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.00373587f, 0.00183637f, 0.00344374f, 0.00485348f, 0.00253416f, 0.00269177f, 0.00725193f, 0.00258701f, 0.00217934f, 0.00538451f, 0.00302639f, 0.0033797f, 0.00370986f, 0.00232436f, 0.00339845f, 0.00179225f, 0.00251479f, 0.0051907f, 0.00496523f, 0.00234181f, 0.00451228f, 0.00274838f, 0.00719352f, 0.00695946f, 0.00831117f, 0.00425647f, 0.00170657f, 0.00476895f, 0.00274334f, 0.000965993f, 0.00249859f, 0.00401126f, 0.0045193f, 0.0045771f, 0.00546377f, 0.00382341f, 0.00521499f, 0.00492828f, 0.00395319f, 0.00622718f, 0.00452876f, 0.00300385f, 0.00667326f, 0.00465516f, 0.00186474f, 0.00419365f, 0.00405798f, 0.00472011f, 0.00316098f, 0.00421922f, 0.00203791f, 0.00480675f, 0.00269131f, 0.00186487f, 0.00615325f, 0.00294517f, 0.00523927f, 0.00338758f, 0.00526081f, 0.00306222f, 0.00433657f, 0.00543592f, 0.00354362f, 0.00378399f, 0.00412389f, 0.00259688f, 0.00327271f, 0.00176079f, 0.00211116f, 0.00312199f, 0.00450167f, 0.00262921f, 0.00188423f, 0.00588636f, 0.00315699f, 0.00226761f, 0.00345261f, 0.00282832f, 0.0050735f, 0.00548764f, 0.00574524f, 0.00575626f, 0.00538583f, 0.00272412f, 0.00369831f, 0.00288194f, 0.00603796f, 0.00216689f, 0.00385505f, 0.00346244f, 0.00547881f, 0.00591274f, 0.00339444f, 0.00312683f, 0.00305059f, 0.00401551f, 0.00457922f, 0.00367746f, 0.00425714f, 0.00311893f, 0.00230622f, 0.00242689f, 0.00592486f, 0.00560147f, 0.00364561f, 0.00583643f, 0.00305003f, 0.00358577f, 0.00253305f, 0.00534485f, 0.00567918f, 0.00951402f, 0.0023778f, 0.00158768f, 0.0234662f, 0.00595901f, 0.00341257f, 0.00393728f, 0.00324998f, 0.00372833f, 0.00332131f, 0.0046038f, 0.00348906f, 0.00178599f, 0.00772262f, 0.00372169f, 0.00310443f, 0.00333781f], rhs_zero_points=[25, 255, 32, 100, 18, 15, 76, 255, 7, 51, 47, 254, 187, 0, 80, 2, 0, 46, 56, 225, 135, 96, 103, 91, 62, 9, 0, 118, 18, 0, 59, 20, 231, 24, 192, 34, 33, 124, 53, 49, 211, 0, 213, 165, 255, 65, 26, 47, 15, 204, 78, 61, 0, 255, 84, 225, 21, 6, 139, 56, 64, 103, 5, 12, 157, 193, 212, 0, 0, 0, 17, 0, 0, 17, 228, 7, 30, 81, 71, 156, 91, 78, 190, 10, 132, 47, 31, 67, 90, 135, 182, 97, 69, 0, 241, 14, 79, 229, 43, 15, 255, 0, 93, 36, 36, 25, 0, 65, 0, 46, 51, 68, 202, 0, 214, 70, 75, 93, 132, 12, 19, 13, 236, 255, 175, 42, 0, 12], scales=[0.0261712f], zero_points=[110]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %471 = %470(%450, meta[relay.Constant][383] /* ty=Tensor[(128, 1, 3, 3), uint8] */, meta[relay.Constant][384] /* ty=Tensor[(128), int32] */, groups=128, kernel_size=[3, 3], pad_value=25f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.00373587f, 0.00183637f, 0.00344374f, 0.00485348f, 0.00253416f, 0.00269177f, 0.00725193f, 0.00258701f, 0.00217934f, 0.00538451f, 0.00302639f, 0.0033797f, 0.00370986f, 0.00232436f, 0.00339845f, 0.00179225f, 0.00251479f, 0.0051907f, 0.00496523f, 0.00234181f, 0.00451228f, 0.00274838f, 0.00719352f, 0.00695946f, 0.00831117f, 0.00425647f, 0.00170657f, 0.00476895f, 0.00274334f, 0.000965993f, 0.00249859f, 0.00401126f, 0.0045193f, 0.0045771f, 0.00546377f, 0.00382341f, 0.00521499f, 0.00492828f, 0.00395319f, 0.00622718f, 0.00452876f, 0.00300385f, 0.00667326f, 0.00465516f, 0.00186474f, 0.00419365f, 0.00405798f, 0.00472011f, 0.00316098f, 0.00421922f, 0.00203791f, 0.00480675f, 0.00269131f, 0.00186487f, 0.00615325f, 0.00294517f, 0.00523927f, 0.00338758f, 0.00526081f, 0.00306222f, 0.00433657f, 0.00543592f, 0.00354362f, 0.00378399f, 0.00412389f, 0.00259688f, 0.00327271f, 0.00176079f, 0.00211116f, 0.00312199f, 0.00450167f, 0.00262921f, 0.00188423f, 0.00588636f, 0.00315699f, 0.00226761f, 0.00345261f, 0.00282832f, 0.0050735f, 0.00548764f, 0.00574524f, 0.00575626f, 0.00538583f, 0.00272412f, 0.00369831f, 0.00288194f, 0.00603796f, 0.00216689f, 0.00385505f, 0.00346244f, 0.00547881f, 0.00591274f, 0.00339444f, 0.00312683f, 0.00305059f, 0.00401551f, 0.00457922f, 0.00367746f, 0.00425714f, 0.00311893f, 0.00230622f, 0.00242689f, 0.00592486f, 0.00560147f, 0.00364561f, 0.00583643f, 0.00305003f, 0.00358577f, 0.00253305f, 0.00534485f, 0.00567918f, 0.00951402f, 0.0023778f, 0.00158768f, 0.0234662f, 0.00595901f, 0.00341257f, 0.00393728f, 0.00324998f, 0.00372833f, 0.00332131f, 0.0046038f, 0.00348906f, 0.00178599f, 0.00772262f, 0.00372169f, 0.00310443f, 0.00333781f], rhs_zero_points=[25, 255, 32, 100, 18, 15, 76, 255, 7, 51, 47, 254, 187, 0, 80, 2, 0, 46, 56, 225, 135, 96, 103, 91, 62, 9, 0, 118, 18, 0, 59, 20, 231, 24, 192, 34, 33, 124, 53, 49, 211, 0, 213, 165, 255, 65, 26, 47, 15, 204, 78, 61, 0, 255, 84, 225, 21, 6, 139, 56, 64, 103, 5, 12, 157, 193, 212, 0, 0, 0, 17, 0, 0, 17, 228, 7, 30, 81, 71, 156, 91, 78, 190, 10, 132, 47, 31, 67, 90, 135, 182, 97, 69, 0, 241, 14, 79, 229, 43, 15, 255, 0, 93, 36, 36, 25, 0, 65, 0, 46, 51, 68, 202, 0, 214, 70, 75, 93, 132, 12, 19, 13, 236, 255, 175, 42, 0, 12], scales=[0.0261712f], zero_points=[110], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %472 = dl.dequantize(%471, input_scales=[0.0261712f], input_zero_points=[110]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %473 = sigmoid(%472) /* /model.23/cv3.0/cv3.0.0/cv3.0.0.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %474 = multiply(%472, %473) /* /model.23/cv3.0/cv3.0.0/cv3.0.0.0/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %475 = dl.quantize(%474, output_scales=[0.0156972f], output_zero_points=[18]) /* fake_quant_167 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %476 = fn (%FunctionVar_35_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_35_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_35_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c1bfa8)) -> Tensor[(1, 128, 80, 80), uint8] {
    %468 = (%FunctionVar_35_0, %FunctionVar_35_1, %FunctionVar_35_2, meta[relay.Constant][373] /* ty=Tensor[(128), float32] */, meta[relay.Constant][374] /* ty=Tensor[(128), int32] */, meta[relay.Constant][375] /* ty=Tensor[(128), int32] */, meta[relay.Constant][376] /* ty=Tensor[(128), int32] */, meta[relay.Constant][377] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%468, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0156972f], lhs_zero_points=[18], rhs_scales=[0.00387543f, 0.00488882f, 0.00804206f, 0.00734091f, 0.00770348f, 0.0062914f, 0.00589584f, 0.00524891f, 0.00481419f, 0.00515054f, 0.00668169f, 0.00418581f, 0.00522289f, 0.00646413f, 0.00561332f, 0.00531991f, 0.00563591f, 0.00147376f, 0.00222604f, 0.00436498f, 0.00691435f, 0.0107848f, 0.00794947f, 0.00831836f, 0.00468328f, 0.00530032f, 0.00552522f, 0.0055772f, 0.00421791f, 0.00497626f, 0.00243599f, 0.0107331f, 0.00496761f, 0.00324805f, 0.00446134f, 0.000914459f, 0.00558461f, 0.00753551f, 0.00465965f, 0.00779255f, 0.00693863f, 0.00375732f, 0.00523895f, 0.0069793f, 0.00214176f, 0.00582099f, 0.0132258f, 0.00620084f, 0.00331192f, 0.00489526f, 0.00230509f, 0.00482028f, 0.00371606f, 0.00561231f, 0.004208f, 0.00273774f, 0.00540485f, 0.00501847f, 0.00534835f, 0.00765992f, 0.00448861f, 0.0097116f, 0.00314694f, 0.0035517f, 0.00553746f, 0.00539225f, 0.00334033f, 0.00859139f, 0.00709076f, 0.00550948f, 0.00525667f, 0.00547531f, 0.00565139f, 0.00445952f, 0.00561096f, 0.00276277f, 0.00412347f, 0.00810807f, 0.00642455f, 0.00288262f, 0.00267079f, 0.004177f, 0.0029933f, 0.00570953f, 0.00618995f, 0.00779287f, 0.00353171f, 0.00632038f, 0.00884759f, 0.00719034f, 0.00432959f, 0.00368526f, 0.00441842f, 0.00474422f, 0.00393645f, 0.00287531f, 0.00448324f, 0.00539713f, 0.00512681f, 0.00863548f, 0.00474356f, 0.00441184f, 0.00746169f, 0.00313208f, 0.00152008f, 0.00767555f, 0.00473097f, 0.00584571f, 0.00821493f, 0.00609295f, 0.00420189f, 0.00517174f, 0.00590986f, 0.00790804f, 0.00380145f, 0.00511166f, 0.00448642f, 0.00488752f, 0.0108547f, 0.00988184f, 0.0042144f, 0.003752f, 0.00644928f, 0.00306649f, 0.00399643f, 0.00548009f, 0.00345967f, 0.00482398f], rhs_zero_points=[79, 162, 142, 195, 170, 176, 150, 153, 179, 159, 60, 100, 160, 175, 123, 95, 98, 145, 78, 132, 158, 194, 120, 179, 133, 180, 184, 120, 138, 156, 145, 127, 163, 124, 67, 167, 184, 141, 150, 197, 136, 89, 115, 125, 150, 136, 205, 158, 120, 163, 101, 151, 117, 108, 147, 126, 134, 150, 157, 153, 140, 185, 168, 93, 163, 150, 117, 155, 163, 87, 155, 141, 123, 149, 100, 154, 147, 156, 180, 108, 102, 202, 146, 175, 161, 204, 140, 168, 117, 155, 130, 106, 118, 140, 122, 138, 173, 160, 147, 188, 165, 106, 174, 117, 159, 206, 147, 135, 87, 128, 128, 149, 162, 160, 146, 142, 159, 146, 171, 214, 169, 129, 161, 135, 127, 80, 141, 138], scales=[0.024462f], zero_points=[140]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %477 = %476(%475, meta[relay.Constant][385] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][386] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0156972f], lhs_zero_points=[18], rhs_scales=[0.00387543f, 0.00488882f, 0.00804206f, 0.00734091f, 0.00770348f, 0.0062914f, 0.00589584f, 0.00524891f, 0.00481419f, 0.00515054f, 0.00668169f, 0.00418581f, 0.00522289f, 0.00646413f, 0.00561332f, 0.00531991f, 0.00563591f, 0.00147376f, 0.00222604f, 0.00436498f, 0.00691435f, 0.0107848f, 0.00794947f, 0.00831836f, 0.00468328f, 0.00530032f, 0.00552522f, 0.0055772f, 0.00421791f, 0.00497626f, 0.00243599f, 0.0107331f, 0.00496761f, 0.00324805f, 0.00446134f, 0.000914459f, 0.00558461f, 0.00753551f, 0.00465965f, 0.00779255f, 0.00693863f, 0.00375732f, 0.00523895f, 0.0069793f, 0.00214176f, 0.00582099f, 0.0132258f, 0.00620084f, 0.00331192f, 0.00489526f, 0.00230509f, 0.00482028f, 0.00371606f, 0.00561231f, 0.004208f, 0.00273774f, 0.00540485f, 0.00501847f, 0.00534835f, 0.00765992f, 0.00448861f, 0.0097116f, 0.00314694f, 0.0035517f, 0.00553746f, 0.00539225f, 0.00334033f, 0.00859139f, 0.00709076f, 0.00550948f, 0.00525667f, 0.00547531f, 0.00565139f, 0.00445952f, 0.00561096f, 0.00276277f, 0.00412347f, 0.00810807f, 0.00642455f, 0.00288262f, 0.00267079f, 0.004177f, 0.0029933f, 0.00570953f, 0.00618995f, 0.00779287f, 0.00353171f, 0.00632038f, 0.00884759f, 0.00719034f, 0.00432959f, 0.00368526f, 0.00441842f, 0.00474422f, 0.00393645f, 0.00287531f, 0.00448324f, 0.00539713f, 0.00512681f, 0.00863548f, 0.00474356f, 0.00441184f, 0.00746169f, 0.00313208f, 0.00152008f, 0.00767555f, 0.00473097f, 0.00584571f, 0.00821493f, 0.00609295f, 0.00420189f, 0.00517174f, 0.00590986f, 0.00790804f, 0.00380145f, 0.00511166f, 0.00448642f, 0.00488752f, 0.0108547f, 0.00988184f, 0.0042144f, 0.003752f, 0.00644928f, 0.00306649f, 0.00399643f, 0.00548009f, 0.00345967f, 0.00482398f], rhs_zero_points=[79, 162, 142, 195, 170, 176, 150, 153, 179, 159, 60, 100, 160, 175, 123, 95, 98, 145, 78, 132, 158, 194, 120, 179, 133, 180, 184, 120, 138, 156, 145, 127, 163, 124, 67, 167, 184, 141, 150, 197, 136, 89, 115, 125, 150, 136, 205, 158, 120, 163, 101, 151, 117, 108, 147, 126, 134, 150, 157, 153, 140, 185, 168, 93, 163, 150, 117, 155, 163, 87, 155, 141, 123, 149, 100, 154, 147, 156, 180, 108, 102, 202, 146, 175, 161, 204, 140, 168, 117, 155, 130, 106, 118, 140, 122, 138, 173, 160, 147, 188, 165, 106, 174, 117, 159, 206, 147, 135, 87, 128, 128, 149, 162, 160, 146, 142, 159, 146, 171, 214, 169, 129, 161, 135, 127, 80, 141, 138], scales=[0.024462f], zero_points=[140], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %478 = dl.dequantize(%477, input_scales=[0.024462f], input_zero_points=[140]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %479 = sigmoid(%478) /* /model.23/cv3.0/cv3.0.0/cv3.0.0.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %480 = multiply(%478, %479) /* /model.23/cv3.0/cv3.0.0/cv3.0.0.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %481 = dl.quantize(%480, output_scales=[0.0115494f], output_zero_points=[24]) /* fake_quant_170 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %482 = fn (%FunctionVar_34_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_34_1: Tensor[(128, 1, 3, 3), uint8], %FunctionVar_34_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaefb898)) -> Tensor[(1, 128, 80, 80), uint8] {
    %467 = (%FunctionVar_34_0, %FunctionVar_34_1, %FunctionVar_34_2, meta[relay.Constant][368] /* ty=Tensor[(128), float32] */, meta[relay.Constant][369] /* ty=Tensor[(128), int32] */, meta[relay.Constant][370] /* ty=Tensor[(128), int32] */, meta[relay.Constant][371] /* ty=Tensor[(128), int32] */, meta[relay.Constant][372] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%467, groups=128, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0115494f], lhs_zero_points=[24], rhs_scales=[0.0243256f, 0.00151376f, 0.00116621f, 0.0014744f, 0.00117242f, 0.00232523f, 0.00207018f, 0.0163241f, 0.00130597f, 0.0033456f, 0.00152008f, 0.0104278f, 0.00281832f, 0.0074546f, 0.000969923f, 0.0256001f, 0.00312905f, 0.00807324f, 0.00458004f, 0.00685733f, 0.00198654f, 0.00111096f, 0.000995517f, 0.00113699f, 0.00594296f, 0.00174701f, 0.00164008f, 0.0117744f, 0.00394693f, 0.00599581f, 0.012439f, 0.000822613f, 0.00270409f, 0.0207869f, 0.0012961f, 0.055423f, 0.000821056f, 0.00143968f, 0.00296728f, 0.00667508f, 0.0019185f, 0.00107467f, 0.00274952f, 0.00103568f, 0.00687415f, 0.00253083f, 0.000766298f, 0.000969747f, 0.00256725f, 0.00152526f, 0.0114062f, 0.00247793f, 0.00521097f, 0.00356804f, 0.00239315f, 0.00458553f, 0.00181604f, 0.0153529f, 0.00137147f, 0.00141434f, 0.00303166f, 0.000876399f, 0.00544362f, 0.00966642f, 0.00323503f, 0.000958426f, 0.00227882f, 0.000916146f, 0.00131105f, 0.00119363f, 0.00283649f, 0.00189625f, 0.0052595f, 0.00380838f, 0.00144679f, 0.0130198f, 0.00865935f, 0.000824764f, 0.00113923f, 0.00285593f, 0.0141053f, 0.000779048f, 0.00629255f, 0.0011652f, 0.00123179f, 0.00426843f, 0.00160245f, 0.00359811f, 0.00497311f, 0.00447258f, 0.000936854f, 0.00309086f, 0.00174037f, 0.00568378f, 0.0014274f, 0.0078999f, 0.00192717f, 0.00140557f, 0.00415194f, 0.006723f, 0.00267954f, 0.00189081f, 0.000939168f, 0.0115062f, 0.010987f, 0.00124784f, 0.00407996f, 0.00104236f, 0.0084567f, 0.00516155f, 0.00472326f, 0.0188496f, 0.00141137f, 0.00563267f, 0.00539277f, 0.0253185f, 0.00147797f, 0.005679f, 0.00871746f, 0.00153046f, 0.0116167f, 0.00982666f, 0.00143475f, 0.00147304f, 0.00222287f, 0.030125f, 0.0141502f, 0.0198151f], rhs_zero_points=[159, 82, 28, 31, 0, 203, 255, 202, 0, 31, 255, 119, 12, 79, 0, 160, 139, 255, 123, 6, 13, 25, 18, 0, 19, 0, 17, 226, 160, 12, 115, 0, 255, 205, 0, 206, 0, 24, 255, 71, 201, 0, 255, 11, 255, 0, 0, 0, 255, 0, 100, 255, 234, 44, 220, 51, 255, 221, 0, 6, 8, 255, 94, 119, 34, 21, 0, 16, 14, 0, 0, 255, 13, 21, 255, 141, 104, 3, 0, 216, 153, 255, 227, 0, 0, 29, 0, 48, 56, 62, 0, 255, 199, 12, 255, 157, 24, 0, 28, 79, 0, 255, 0, 145, 12, 0, 0, 0, 95, 16, 191, 228, 0, 68, 236, 247, 0, 18, 216, 0, 53, 121, 0, 0, 255, 206, 45, 246], scales=[0.0211114f], zero_points=[124]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %483 = %482(%481, meta[relay.Constant][387] /* ty=Tensor[(128, 1, 3, 3), uint8] */, meta[relay.Constant][388] /* ty=Tensor[(128), int32] */, groups=128, kernel_size=[3, 3], pad_value=24f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0115494f], lhs_zero_points=[24], rhs_scales=[0.0243256f, 0.00151376f, 0.00116621f, 0.0014744f, 0.00117242f, 0.00232523f, 0.00207018f, 0.0163241f, 0.00130597f, 0.0033456f, 0.00152008f, 0.0104278f, 0.00281832f, 0.0074546f, 0.000969923f, 0.0256001f, 0.00312905f, 0.00807324f, 0.00458004f, 0.00685733f, 0.00198654f, 0.00111096f, 0.000995517f, 0.00113699f, 0.00594296f, 0.00174701f, 0.00164008f, 0.0117744f, 0.00394693f, 0.00599581f, 0.012439f, 0.000822613f, 0.00270409f, 0.0207869f, 0.0012961f, 0.055423f, 0.000821056f, 0.00143968f, 0.00296728f, 0.00667508f, 0.0019185f, 0.00107467f, 0.00274952f, 0.00103568f, 0.00687415f, 0.00253083f, 0.000766298f, 0.000969747f, 0.00256725f, 0.00152526f, 0.0114062f, 0.00247793f, 0.00521097f, 0.00356804f, 0.00239315f, 0.00458553f, 0.00181604f, 0.0153529f, 0.00137147f, 0.00141434f, 0.00303166f, 0.000876399f, 0.00544362f, 0.00966642f, 0.00323503f, 0.000958426f, 0.00227882f, 0.000916146f, 0.00131105f, 0.00119363f, 0.00283649f, 0.00189625f, 0.0052595f, 0.00380838f, 0.00144679f, 0.0130198f, 0.00865935f, 0.000824764f, 0.00113923f, 0.00285593f, 0.0141053f, 0.000779048f, 0.00629255f, 0.0011652f, 0.00123179f, 0.00426843f, 0.00160245f, 0.00359811f, 0.00497311f, 0.00447258f, 0.000936854f, 0.00309086f, 0.00174037f, 0.00568378f, 0.0014274f, 0.0078999f, 0.00192717f, 0.00140557f, 0.00415194f, 0.006723f, 0.00267954f, 0.00189081f, 0.000939168f, 0.0115062f, 0.010987f, 0.00124784f, 0.00407996f, 0.00104236f, 0.0084567f, 0.00516155f, 0.00472326f, 0.0188496f, 0.00141137f, 0.00563267f, 0.00539277f, 0.0253185f, 0.00147797f, 0.005679f, 0.00871746f, 0.00153046f, 0.0116167f, 0.00982666f, 0.00143475f, 0.00147304f, 0.00222287f, 0.030125f, 0.0141502f, 0.0198151f], rhs_zero_points=[159, 82, 28, 31, 0, 203, 255, 202, 0, 31, 255, 119, 12, 79, 0, 160, 139, 255, 123, 6, 13, 25, 18, 0, 19, 0, 17, 226, 160, 12, 115, 0, 255, 205, 0, 206, 0, 24, 255, 71, 201, 0, 255, 11, 255, 0, 0, 0, 255, 0, 100, 255, 234, 44, 220, 51, 255, 221, 0, 6, 8, 255, 94, 119, 34, 21, 0, 16, 14, 0, 0, 255, 13, 21, 255, 141, 104, 3, 0, 216, 153, 255, 227, 0, 0, 29, 0, 48, 56, 62, 0, 255, 199, 12, 255, 157, 24, 0, 28, 79, 0, 255, 0, 145, 12, 0, 0, 0, 95, 16, 191, 228, 0, 68, 236, 247, 0, 18, 216, 0, 53, 121, 0, 0, 255, 206, 45, 246], scales=[0.0211114f], zero_points=[124], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %484 = dl.dequantize(%483, input_scales=[0.0211114f], input_zero_points=[124]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %485 = sigmoid(%484) /* /model.23/cv3.0/cv3.0.1/cv3.0.1.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %486 = multiply(%484, %485) /* /model.23/cv3.0/cv3.0.1/cv3.0.1.0/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %487 = dl.quantize(%486, output_scales=[0.0112635f], output_zero_points=[25]) /* fake_quant_173 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %488 = fn (%FunctionVar_33_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_33_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_33_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aad97648)) -> Tensor[(1, 128, 80, 80), uint8] {
    %466 = (%FunctionVar_33_0, %FunctionVar_33_1, %FunctionVar_33_2, meta[relay.Constant][363] /* ty=Tensor[(128), float32] */, meta[relay.Constant][364] /* ty=Tensor[(128), int32] */, meta[relay.Constant][365] /* ty=Tensor[(128), int32] */, meta[relay.Constant][366] /* ty=Tensor[(128), int32] */, meta[relay.Constant][367] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%466, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0112635f], lhs_zero_points=[25], rhs_scales=[0.00910522f, 0.0104236f, 0.0105028f, 0.0118496f, 0.00901345f, 0.00707561f, 0.00807071f, 0.030931f, 0.012661f, 0.00916077f, 0.0103862f, 0.00990638f, 0.00858624f, 0.012414f, 0.01299f, 0.0083464f, 0.0098098f, 0.00880545f, 0.00945201f, 0.0102488f, 0.0100341f, 0.0100622f, 0.0374581f, 0.00918889f, 0.00958288f, 0.00779779f, 0.0113165f, 0.0113439f, 0.00759082f, 0.0115147f, 0.0108152f, 0.0130258f, 0.0108384f, 0.00857789f, 0.00909156f, 0.00820673f, 0.00880653f, 0.0106463f, 0.00848389f, 0.00996121f, 0.00805823f, 0.00907207f, 0.00569968f, 0.00931943f, 0.00774383f, 0.00910131f, 0.0102207f, 0.0124727f, 0.00792523f, 0.0125229f, 0.00662165f, 0.00864628f, 0.0108348f, 0.00976328f, 0.00951418f, 0.0115096f, 0.0123079f, 0.0113044f, 0.00767983f, 0.00697216f, 0.0110287f, 0.0110108f, 0.0126292f, 0.00804554f, 0.0167594f, 0.0104092f, 0.0141628f, 0.0101086f, 0.0117261f, 0.0109922f, 0.0098829f, 0.00784182f, 0.00989763f, 0.0108656f, 0.00715009f, 0.00853256f, 0.00951076f, 0.00918981f, 0.00997388f, 0.00934514f, 0.00898086f, 0.00733463f, 0.011538f, 0.0114737f, 0.0117537f, 0.0082836f, 0.0105783f, 0.0122769f, 0.00911147f, 0.00642215f, 0.00673686f, 0.00791914f, 0.0110027f, 0.00743108f, 0.0115915f, 0.00690722f, 0.0075841f, 0.00821593f, 0.0081163f, 0.0342798f, 0.00719421f, 0.00800249f, 0.0109912f, 0.011746f, 0.0108929f, 0.0109565f, 0.01294f, 0.0122639f, 0.012396f, 0.0106634f, 0.0183068f, 0.0120828f, 0.00790362f, 0.00940484f, 0.0084587f, 0.00862729f, 0.0097111f, 0.00824173f, 0.00946238f, 0.00867973f, 0.0133002f, 0.0111689f, 0.00797174f, 0.00960883f, 0.0135478f, 0.0118063f, 0.00748105f, 0.00835409f], rhs_zero_points=[147, 147, 140, 97, 110, 121, 130, 113, 140, 115, 144, 128, 119, 93, 133, 124, 111, 119, 106, 97, 122, 142, 163, 125, 129, 143, 128, 134, 145, 124, 126, 140, 155, 133, 150, 137, 119, 128, 144, 131, 129, 121, 102, 136, 117, 147, 119, 140, 131, 116, 109, 150, 165, 114, 146, 141, 142, 166, 114, 106, 122, 106, 75, 143, 143, 125, 104, 144, 114, 160, 165, 104, 140, 141, 134, 141, 111, 108, 138, 90, 137, 135, 139, 144, 104, 107, 91, 127, 155, 142, 94, 125, 126, 148, 147, 149, 134, 110, 124, 179, 153, 136, 119, 129, 137, 131, 173, 148, 110, 107, 168, 121, 136, 138, 109, 116, 130, 114, 96, 135, 162, 104, 116, 121, 143, 119, 112, 135], scales=[0.0498847f], zero_points=[88]) /* ty=Tensor[(1, 128, 80, 80), uint8] */
  };
  %489 = %488(%487, meta[relay.Constant][389] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][390] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0112635f], lhs_zero_points=[25], rhs_scales=[0.00910522f, 0.0104236f, 0.0105028f, 0.0118496f, 0.00901345f, 0.00707561f, 0.00807071f, 0.030931f, 0.012661f, 0.00916077f, 0.0103862f, 0.00990638f, 0.00858624f, 0.012414f, 0.01299f, 0.0083464f, 0.0098098f, 0.00880545f, 0.00945201f, 0.0102488f, 0.0100341f, 0.0100622f, 0.0374581f, 0.00918889f, 0.00958288f, 0.00779779f, 0.0113165f, 0.0113439f, 0.00759082f, 0.0115147f, 0.0108152f, 0.0130258f, 0.0108384f, 0.00857789f, 0.00909156f, 0.00820673f, 0.00880653f, 0.0106463f, 0.00848389f, 0.00996121f, 0.00805823f, 0.00907207f, 0.00569968f, 0.00931943f, 0.00774383f, 0.00910131f, 0.0102207f, 0.0124727f, 0.00792523f, 0.0125229f, 0.00662165f, 0.00864628f, 0.0108348f, 0.00976328f, 0.00951418f, 0.0115096f, 0.0123079f, 0.0113044f, 0.00767983f, 0.00697216f, 0.0110287f, 0.0110108f, 0.0126292f, 0.00804554f, 0.0167594f, 0.0104092f, 0.0141628f, 0.0101086f, 0.0117261f, 0.0109922f, 0.0098829f, 0.00784182f, 0.00989763f, 0.0108656f, 0.00715009f, 0.00853256f, 0.00951076f, 0.00918981f, 0.00997388f, 0.00934514f, 0.00898086f, 0.00733463f, 0.011538f, 0.0114737f, 0.0117537f, 0.0082836f, 0.0105783f, 0.0122769f, 0.00911147f, 0.00642215f, 0.00673686f, 0.00791914f, 0.0110027f, 0.00743108f, 0.0115915f, 0.00690722f, 0.0075841f, 0.00821593f, 0.0081163f, 0.0342798f, 0.00719421f, 0.00800249f, 0.0109912f, 0.011746f, 0.0108929f, 0.0109565f, 0.01294f, 0.0122639f, 0.012396f, 0.0106634f, 0.0183068f, 0.0120828f, 0.00790362f, 0.00940484f, 0.0084587f, 0.00862729f, 0.0097111f, 0.00824173f, 0.00946238f, 0.00867973f, 0.0133002f, 0.0111689f, 0.00797174f, 0.00960883f, 0.0135478f, 0.0118063f, 0.00748105f, 0.00835409f], rhs_zero_points=[147, 147, 140, 97, 110, 121, 130, 113, 140, 115, 144, 128, 119, 93, 133, 124, 111, 119, 106, 97, 122, 142, 163, 125, 129, 143, 128, 134, 145, 124, 126, 140, 155, 133, 150, 137, 119, 128, 144, 131, 129, 121, 102, 136, 117, 147, 119, 140, 131, 116, 109, 150, 165, 114, 146, 141, 142, 166, 114, 106, 122, 106, 75, 143, 143, 125, 104, 144, 114, 160, 165, 104, 140, 141, 134, 141, 111, 108, 138, 90, 137, 135, 139, 144, 104, 107, 91, 127, 155, 142, 94, 125, 126, 148, 147, 149, 134, 110, 124, 179, 153, 136, 119, 129, 137, 131, 173, 148, 110, 107, 168, 121, 136, 138, 109, 116, 130, 114, 96, 135, 162, 104, 116, 121, 143, 119, 112, 135], scales=[0.0498847f], zero_points=[88], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %490 = dl.dequantize(%489, input_scales=[0.0498847f], input_zero_points=[88]) /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %491 = sigmoid(%490) /* /model.23/cv3.0/cv3.0.1/cv3.0.1.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %492 = multiply(%490, %491) /* /model.23/cv3.0/cv3.0.1/cv3.0.1.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 80, 80), float32] */;
  %493 = dl.quantize(%492, output_scales=[0.0337887f], output_zero_points=[8]) /* fake_quant_176 */ /* ty=Tensor[(1, 128, 80, 80), uint8] */;
  %494 = fn (%FunctionVar_32_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_32_1: Tensor[(80, 128, 1, 1), uint8], %FunctionVar_32_2: Tensor[(80), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab08a058)) -> Tensor[(1, 80, 80, 80), uint8] {
    %465 = (%FunctionVar_32_0, %FunctionVar_32_1, %FunctionVar_32_2, meta[relay.Constant][358] /* ty=Tensor[(80), float32] */, meta[relay.Constant][359] /* ty=Tensor[(80), int32] */, meta[relay.Constant][360] /* ty=Tensor[(80), int32] */, meta[relay.Constant][361] /* ty=Tensor[(80), int32] */, meta[relay.Constant][362] /* ty=Tensor[(80), int32] */);
    dl.quantized_conv2d(%465, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0337887f], lhs_zero_points=[8], rhs_scales=[0.00121592f, 0.000743193f, 0.000933958f, 0.000768804f, 0.000637638f, 0.000647212f, 0.00074056f, 0.000740081f, 0.000844439f, 0.000693168f, 0.000711239f, 0.000769043f, 0.00054046f, 0.000746065f, 0.00105722f, 0.000711359f, 0.000710162f, 0.000702742f, 0.000847551f, 0.000811169f, 0.000740321f, 0.000737209f, 0.000630697f, 0.000674977f, 0.000900687f, 0.000896858f, 0.000887762f, 0.000667796f, 0.00073314f, 0.000730507f, 0.000670669f, 0.000716385f, 0.000750852f, 0.000756597f, 0.000707768f, 0.00069963f, 0.000782207f, 0.000727635f, 0.000730986f, 0.000861194f, 0.00063692f, 0.00069987f, 0.00064793f, 0.000705614f, 0.000776702f, 0.00071088f, 0.000824094f, 0.000859519f, 0.00063309f, 0.000900927f, 0.000850184f, 0.00102491f, 0.000636441f, 0.000634287f, 0.000795132f, 0.000831275f, 0.000874837f, 0.000694125f, 0.00103832f, 0.000674498f, 0.000806861f, 0.00069221f, 0.000869811f, 0.000762102f, 0.000687184f, 0.00069245f, 0.000734576f, 0.000767607f, 0.000676413f, 0.000595751f, 0.000696998f, 0.000675934f, 0.000530168f, 0.000980392f, 0.000881539f, 0.000868853f, 0.000741039f, 0.000651999f, 0.000616216f, 0.000681918f], rhs_zero_points=[134, 107, 120, 102, 112, 90, 109, 111, 109, 121, 84, 79, 104, 124, 91, 100, 99, 110, 114, 95, 105, 80, 96, 100, 108, 103, 108, 116, 117, 92, 128, 100, 103, 104, 107, 114, 93, 115, 99, 124, 122, 135, 106, 110, 102, 134, 121, 96, 104, 94, 104, 91, 104, 113, 120, 90, 127, 111, 80, 87, 115, 94, 93, 93, 95, 118, 115, 95, 105, 104, 77, 105, 109, 115, 104, 99, 80, 111, 77, 85], scales=[0.0686566f], zero_points=[255]) /* ty=Tensor[(1, 80, 80, 80), uint8] */
  };
  %495 = %494(%493, meta[relay.Constant][391] /* ty=Tensor[(80, 128, 1, 1), uint8] */, meta[relay.Constant][392] /* ty=Tensor[(80), int32] */, kernel_size=[1, 1], lhs_scales=[0.0337887f], lhs_zero_points=[8], rhs_scales=[0.00121592f, 0.000743193f, 0.000933958f, 0.000768804f, 0.000637638f, 0.000647212f, 0.00074056f, 0.000740081f, 0.000844439f, 0.000693168f, 0.000711239f, 0.000769043f, 0.00054046f, 0.000746065f, 0.00105722f, 0.000711359f, 0.000710162f, 0.000702742f, 0.000847551f, 0.000811169f, 0.000740321f, 0.000737209f, 0.000630697f, 0.000674977f, 0.000900687f, 0.000896858f, 0.000887762f, 0.000667796f, 0.00073314f, 0.000730507f, 0.000670669f, 0.000716385f, 0.000750852f, 0.000756597f, 0.000707768f, 0.00069963f, 0.000782207f, 0.000727635f, 0.000730986f, 0.000861194f, 0.00063692f, 0.00069987f, 0.00064793f, 0.000705614f, 0.000776702f, 0.00071088f, 0.000824094f, 0.000859519f, 0.00063309f, 0.000900927f, 0.000850184f, 0.00102491f, 0.000636441f, 0.000634287f, 0.000795132f, 0.000831275f, 0.000874837f, 0.000694125f, 0.00103832f, 0.000674498f, 0.000806861f, 0.00069221f, 0.000869811f, 0.000762102f, 0.000687184f, 0.00069245f, 0.000734576f, 0.000767607f, 0.000676413f, 0.000595751f, 0.000696998f, 0.000675934f, 0.000530168f, 0.000980392f, 0.000881539f, 0.000868853f, 0.000741039f, 0.000651999f, 0.000616216f, 0.000681918f], rhs_zero_points=[134, 107, 120, 102, 112, 90, 109, 111, 109, 121, 84, 79, 104, 124, 91, 100, 99, 110, 114, 95, 105, 80, 96, 100, 108, 103, 108, 116, 117, 92, 128, 100, 103, 104, 107, 114, 93, 115, 99, 124, 122, 135, 106, 110, 102, 134, 121, 96, 104, 94, 104, 91, 104, 113, 120, 90, 127, 111, 80, 87, 115, 94, 93, 93, 95, 118, 115, 95, 105, 104, 77, 105, 109, 115, 104, 99, 80, 111, 77, 85], scales=[0.0686566f], zero_points=[255], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 80, 80, 80), uint8] */;
  %496 = dl.dequantize(%464, input_scales=[0.0451293f], input_zero_points=[43]) /* ty=Tensor[(1, 64, 80, 80), float32] */;
  %497 = dl.dequantize(%495, input_scales=[0.0686566f], input_zero_points=[255]) /* ty=Tensor[(1, 80, 80, 80), float32] */;
  %498 = (%496, %497);
  %499 = concatenate(%498, axis=1) /* /model.23/Concat_output_0 */ /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %506 = fn (%FunctionVar_31_0: Tensor[(1, 128, 80, 80), uint8], %FunctionVar_31_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_31_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a96ce8d8)) -> Tensor[(1, 128, 40, 40), uint8] {
    %505 = (%FunctionVar_31_0, %FunctionVar_31_1, %FunctionVar_31_2, meta[relay.Constant][418] /* ty=Tensor[(128), float32] */, meta[relay.Constant][419] /* ty=Tensor[(128), int32] */, meta[relay.Constant][420] /* ty=Tensor[(128), int32] */, meta[relay.Constant][421] /* ty=Tensor[(128), int32] */, meta[relay.Constant][422] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%505, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.0013269f, 0.00255469f, 0.0014759f, 0.00298334f, 0.00178884f, 0.00186875f, 0.00325858f, 0.00123118f, 0.00117284f, 0.00294272f, 0.00328647f, 0.00328777f, 0.00214976f, 0.00199781f, 0.0023652f, 0.00379524f, 0.0026283f, 0.00274449f, 0.00287195f, 0.00287666f, 0.00199968f, 0.00199099f, 0.00280759f, 0.00386471f, 0.00256084f, 0.00180689f, 0.00314132f, 0.00412995f, 0.00426767f, 0.00336055f, 0.00190524f, 0.00412859f, 0.00220183f, 0.00468908f, 0.002725f, 0.0018593f, 0.0033035f, 0.0029675f, 0.00304721f, 0.00240506f, 0.00503146f, 0.0027688f, 0.00295092f, 0.00129845f, 0.00188272f, 0.00289491f, 0.00134604f, 0.00320349f, 0.00246128f, 0.00196776f, 0.00202487f, 0.00339855f, 0.00338581f, 0.00275489f, 0.00218061f, 0.00285819f, 0.00308389f, 0.00364523f, 0.00254178f, 0.00233767f, 0.00347144f, 0.00329823f, 0.00378609f, 0.00246392f, 0.00285687f, 0.00140945f, 0.00323674f, 0.00276495f, 0.00215064f, 0.00208462f, 0.00180677f, 0.00217655f, 0.0025467f, 0.00232424f, 0.0033562f, 0.00188454f, 0.00297011f, 0.00279322f, 0.00325427f, 0.00397921f, 0.00318071f, 0.00209258f, 0.00545425f, 0.00420793f, 0.00306162f, 0.00384087f, 0.00267885f, 0.00179959f, 0.00287061f, 0.00272312f, 0.00181124f, 0.00220077f, 0.00451417f, 0.003272f, 0.00231348f, 0.00256043f, 0.00184713f, 0.00224015f, 0.00263785f, 0.00369878f, 0.00298147f, 0.00185275f, 0.00336181f, 0.00255906f, 0.00165271f, 0.00289771f, 0.00249245f, 0.00339572f, 0.00267208f, 0.00184403f, 0.00326566f, 0.00211371f, 0.00166989f, 0.00381575f, 0.00208952f, 0.00286934f, 0.00221372f, 0.00271918f, 0.00307516f, 0.00176467f, 0.00276949f, 0.00205014f, 0.00287611f, 0.00149678f, 0.00260096f, 0.00534649f, 0.00199474f, 0.00218477f], rhs_zero_points=[119, 121, 127, 146, 101, 176, 155, 143, 108, 159, 115, 179, 109, 131, 144, 128, 142, 153, 158, 141, 160, 152, 171, 142, 157, 152, 128, 155, 141, 156, 150, 131, 125, 143, 150, 132, 126, 141, 157, 120, 180, 129, 132, 105, 108, 105, 154, 154, 138, 157, 90, 171, 152, 151, 142, 142, 128, 121, 126, 163, 163, 155, 136, 155, 129, 106, 101, 128, 85, 113, 124, 121, 119, 159, 155, 119, 146, 111, 129, 135, 147, 152, 87, 115, 128, 129, 94, 158, 153, 105, 168, 136, 146, 133, 70, 141, 141, 118, 124, 104, 87, 183, 150, 126, 158, 115, 124, 142, 93, 155, 136, 141, 128, 128, 160, 117, 105, 101, 149, 157, 120, 143, 120, 139, 155, 155, 113, 149], scales=[0.0287033f], zero_points=[164]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %507 = %506(%450, meta[relay.Constant][423] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][424] /* ty=Tensor[(128), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=25f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0111069f], lhs_zero_points=[25], rhs_scales=[0.0013269f, 0.00255469f, 0.0014759f, 0.00298334f, 0.00178884f, 0.00186875f, 0.00325858f, 0.00123118f, 0.00117284f, 0.00294272f, 0.00328647f, 0.00328777f, 0.00214976f, 0.00199781f, 0.0023652f, 0.00379524f, 0.0026283f, 0.00274449f, 0.00287195f, 0.00287666f, 0.00199968f, 0.00199099f, 0.00280759f, 0.00386471f, 0.00256084f, 0.00180689f, 0.00314132f, 0.00412995f, 0.00426767f, 0.00336055f, 0.00190524f, 0.00412859f, 0.00220183f, 0.00468908f, 0.002725f, 0.0018593f, 0.0033035f, 0.0029675f, 0.00304721f, 0.00240506f, 0.00503146f, 0.0027688f, 0.00295092f, 0.00129845f, 0.00188272f, 0.00289491f, 0.00134604f, 0.00320349f, 0.00246128f, 0.00196776f, 0.00202487f, 0.00339855f, 0.00338581f, 0.00275489f, 0.00218061f, 0.00285819f, 0.00308389f, 0.00364523f, 0.00254178f, 0.00233767f, 0.00347144f, 0.00329823f, 0.00378609f, 0.00246392f, 0.00285687f, 0.00140945f, 0.00323674f, 0.00276495f, 0.00215064f, 0.00208462f, 0.00180677f, 0.00217655f, 0.0025467f, 0.00232424f, 0.0033562f, 0.00188454f, 0.00297011f, 0.00279322f, 0.00325427f, 0.00397921f, 0.00318071f, 0.00209258f, 0.00545425f, 0.00420793f, 0.00306162f, 0.00384087f, 0.00267885f, 0.00179959f, 0.00287061f, 0.00272312f, 0.00181124f, 0.00220077f, 0.00451417f, 0.003272f, 0.00231348f, 0.00256043f, 0.00184713f, 0.00224015f, 0.00263785f, 0.00369878f, 0.00298147f, 0.00185275f, 0.00336181f, 0.00255906f, 0.00165271f, 0.00289771f, 0.00249245f, 0.00339572f, 0.00267208f, 0.00184403f, 0.00326566f, 0.00211371f, 0.00166989f, 0.00381575f, 0.00208952f, 0.00286934f, 0.00221372f, 0.00271918f, 0.00307516f, 0.00176467f, 0.00276949f, 0.00205014f, 0.00287611f, 0.00149678f, 0.00260096f, 0.00534649f, 0.00199474f, 0.00218477f], rhs_zero_points=[119, 121, 127, 146, 101, 176, 155, 143, 108, 159, 115, 179, 109, 131, 144, 128, 142, 153, 158, 141, 160, 152, 171, 142, 157, 152, 128, 155, 141, 156, 150, 131, 125, 143, 150, 132, 126, 141, 157, 120, 180, 129, 132, 105, 108, 105, 154, 154, 138, 157, 90, 171, 152, 151, 142, 142, 128, 121, 126, 163, 163, 155, 136, 155, 129, 106, 101, 128, 85, 113, 124, 121, 119, 159, 155, 119, 146, 111, 129, 135, 147, 152, 87, 115, 128, 129, 94, 158, 153, 105, 168, 136, 146, 133, 70, 141, 141, 118, 124, 104, 87, 183, 150, 126, 158, 115, 124, 142, 93, 155, 136, 141, 128, 128, 160, 117, 105, 101, 149, 157, 120, 143, 120, 139, 155, 155, 113, 149], scales=[0.0287033f], zero_points=[164], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %508 = dl.dequantize(%507, input_scales=[0.0287033f], input_zero_points=[164]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %509 = sigmoid(%508) /* /model.17/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %510 = multiply(%508, %509) /* /model.17/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %511 = (%510, %412);
  %512 = concatenate(%511, axis=1) /* /model.18/Concat_output_0 */ /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %513 = dl.quantize(%512, output_scales=[0.0107057f], output_zero_points=[26]) /* fake_quant_182 */ /* ty=Tensor[(1, 384, 40, 40), uint8] */;
  %514 = fn (%FunctionVar_30_0: Tensor[(1, 384, 40, 40), uint8], %FunctionVar_30_1: Tensor[(256, 384, 1, 1), uint8], %FunctionVar_30_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf9f5c8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %504 = (%FunctionVar_30_0, %FunctionVar_30_1, %FunctionVar_30_2, meta[relay.Constant][413] /* ty=Tensor[(256), float32] */, meta[relay.Constant][414] /* ty=Tensor[(256), int32] */, meta[relay.Constant][415] /* ty=Tensor[(256), int32] */, meta[relay.Constant][416] /* ty=Tensor[(256), int32] */, meta[relay.Constant][417] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%504, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0107057f], lhs_zero_points=[26], rhs_scales=[0.00430273f, 0.00331251f, 0.00450537f, 0.00280054f, 0.00445413f, 0.00631584f, 0.00431965f, 0.00508893f, 0.00455774f, 0.00416216f, 0.0030585f, 0.0052848f, 0.00339692f, 0.00463241f, 0.00419421f, 0.00717126f, 0.00467287f, 0.00482944f, 0.00566436f, 0.00574716f, 0.00421506f, 0.00584825f, 0.00448336f, 0.0039378f, 0.00418531f, 0.00711379f, 0.00460935f, 0.00242286f, 0.00308988f, 0.00432266f, 0.00415093f, 0.011587f, 0.00537178f, 0.005514f, 0.00425302f, 0.00350094f, 0.00382222f, 0.00565013f, 0.00476807f, 0.00398127f, 0.00335947f, 0.00505185f, 0.00366851f, 0.00633351f, 0.00418678f, 0.00523767f, 0.0042618f, 0.00378961f, 0.0061101f, 0.00363057f, 0.00462077f, 0.00574735f, 0.00540671f, 0.00697358f, 0.00324533f, 0.00392763f, 0.00536015f, 0.00480061f, 0.00381045f, 0.00548223f, 0.00484646f, 0.00520187f, 0.00498153f, 0.00475472f, 0.00433536f, 0.0052539f, 0.00522292f, 0.00490993f, 0.00533454f, 0.00383402f, 0.00410853f, 0.00422178f, 0.00365631f, 0.00434059f, 0.00520842f, 0.00447092f, 0.00366745f, 0.00462427f, 0.0032111f, 0.00586724f, 0.00407111f, 0.0055094f, 0.00500278f, 0.00313028f, 0.0034144f, 0.00455986f, 0.00426922f, 0.00583388f, 0.00556249f, 0.00486354f, 0.00280226f, 0.00587717f, 0.0074994f, 0.002995f, 0.00910551f, 0.00630577f, 0.00551618f, 0.00746997f, 0.00475484f, 0.00285039f, 0.00462964f, 0.00561965f, 0.0049073f, 0.00455993f, 0.00532968f, 0.00406242f, 0.00544959f, 0.00432066f, 0.00495477f, 0.00454308f, 0.00431817f, 0.0049338f, 0.0041684f, 0.00688636f, 0.00540695f, 0.00417271f, 0.00427424f, 0.00378683f, 0.00241466f, 0.0046467f, 0.00525028f, 0.00356679f, 0.00542394f, 0.00390928f, 0.00608764f, 0.00317604f, 0.00488832f, 0.00380637f, 0.00182406f, 0.0035635f, 0.00348007f, 0.00317292f, 0.00299275f, 0.00197535f, 0.0030208f, 0.00321994f, 0.00223891f, 0.00296445f, 0.00346586f, 0.00289702f, 0.00359937f, 0.00289974f, 0.0017143f, 0.0029218f, 0.00269665f, 0.00382263f, 0.00295474f, 0.00299023f, 0.00482899f, 0.00367886f, 0.00307371f, 0.00283272f, 0.00145621f, 0.00360409f, 0.00358997f, 0.00352629f, 0.00375986f, 0.00431868f, 0.00345113f, 0.00297404f, 0.00232433f, 0.00283675f, 0.00345983f, 0.00403822f, 0.00283132f, 0.00331269f, 0.0022503f, 0.0030501f, 0.00282306f, 0.00282745f, 0.00320685f, 0.00340284f, 0.00227462f, 0.00239398f, 0.00217498f, 0.00233416f, 0.00325423f, 0.00272453f, 0.00313173f, 0.00359768f, 0.00297541f, 0.0022545f, 0.0027342f, 0.00326045f, 0.0030083f, 0.00309323f, 0.00365298f, 0.00386215f, 0.00227952f, 0.00303382f, 0.0028161f, 0.00290273f, 0.00334344f, 0.00302401f, 0.00308708f, 0.00271655f, 0.00241553f, 0.00363246f, 0.00365457f, 0.00314025f, 0.00330046f, 0.00316662f, 0.0019343f, 0.0034196f, 0.00298916f, 0.00229377f, 0.00352064f, 0.00232309f, 0.00385494f, 0.00247429f, 0.0036248f, 0.00337024f, 0.00442672f, 0.00186663f, 0.00318804f, 0.00240165f, 0.0032418f, 0.0019742f, 0.00272777f, 0.00453234f, 0.00352233f, 0.00259379f, 0.00259324f, 0.0017525f, 0.00076718f, 0.00368852f, 0.00295835f, 0.00288116f, 0.00258888f, 0.0035098f, 0.00229676f, 0.00328343f, 0.00339054f, 0.00249943f, 0.00188384f, 0.00362825f, 0.00292078f, 0.00352702f, 0.00410366f, 0.00319528f, 0.0035236f, 0.00227352f, 0.00333378f, 0.0029561f, 0.00448132f, 0.00331952f, 0.00324996f, 0.00257495f, 0.00239024f, 0.00277117f, 0.0022787f, 0.00364652f, 0.00153984f, 0.00278223f, 0.00345876f, 0.00267105f], rhs_zero_points=[123, 129, 147, 121, 106, 160, 123, 122, 124, 148, 112, 130, 111, 115, 109, 175, 114, 119, 114, 136, 77, 85, 118, 125, 90, 184, 139, 106, 140, 126, 166, 85, 140, 143, 105, 122, 131, 108, 163, 137, 135, 152, 119, 104, 161, 93, 137, 113, 150, 146, 134, 133, 122, 153, 136, 114, 88, 153, 132, 157, 120, 107, 136, 128, 140, 101, 141, 125, 149, 124, 143, 119, 131, 121, 122, 161, 136, 148, 149, 105, 148, 109, 122, 170, 122, 132, 117, 135, 133, 165, 113, 145, 84, 145, 92, 105, 99, 143, 95, 100, 128, 166, 90, 124, 123, 140, 184, 109, 131, 120, 136, 141, 113, 127, 127, 94, 127, 141, 130, 149, 132, 152, 137, 138, 110, 133, 117, 150, 139, 143, 133, 121, 116, 149, 121, 137, 158, 158, 144, 137, 132, 176, 165, 122, 161, 171, 177, 159, 148, 120, 158, 97, 124, 155, 121, 148, 102, 180, 145, 172, 129, 115, 159, 111, 134, 127, 106, 123, 141, 120, 147, 114, 133, 110, 131, 169, 143, 139, 145, 141, 115, 167, 145, 140, 145, 129, 143, 161, 139, 159, 133, 142, 150, 151, 116, 129, 114, 121, 129, 160, 164, 170, 161, 142, 134, 141, 127, 150, 152, 144, 169, 143, 150, 117, 177, 147, 158, 115, 129, 159, 170, 129, 153, 130, 148, 179, 152, 169, 167, 117, 115, 159, 106, 120, 156, 143, 132, 126, 168, 138, 158, 126, 160, 142, 123, 105, 133, 116, 139, 169, 128, 157, 121, 137, 157, 147], scales=[0.0283505f], zero_points=[131]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %515 = %514(%513, meta[relay.Constant][425] /* ty=Tensor[(256, 384, 1, 1), uint8] */, meta[relay.Constant][426] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0107057f], lhs_zero_points=[26], rhs_scales=[0.00430273f, 0.00331251f, 0.00450537f, 0.00280054f, 0.00445413f, 0.00631584f, 0.00431965f, 0.00508893f, 0.00455774f, 0.00416216f, 0.0030585f, 0.0052848f, 0.00339692f, 0.00463241f, 0.00419421f, 0.00717126f, 0.00467287f, 0.00482944f, 0.00566436f, 0.00574716f, 0.00421506f, 0.00584825f, 0.00448336f, 0.0039378f, 0.00418531f, 0.00711379f, 0.00460935f, 0.00242286f, 0.00308988f, 0.00432266f, 0.00415093f, 0.011587f, 0.00537178f, 0.005514f, 0.00425302f, 0.00350094f, 0.00382222f, 0.00565013f, 0.00476807f, 0.00398127f, 0.00335947f, 0.00505185f, 0.00366851f, 0.00633351f, 0.00418678f, 0.00523767f, 0.0042618f, 0.00378961f, 0.0061101f, 0.00363057f, 0.00462077f, 0.00574735f, 0.00540671f, 0.00697358f, 0.00324533f, 0.00392763f, 0.00536015f, 0.00480061f, 0.00381045f, 0.00548223f, 0.00484646f, 0.00520187f, 0.00498153f, 0.00475472f, 0.00433536f, 0.0052539f, 0.00522292f, 0.00490993f, 0.00533454f, 0.00383402f, 0.00410853f, 0.00422178f, 0.00365631f, 0.00434059f, 0.00520842f, 0.00447092f, 0.00366745f, 0.00462427f, 0.0032111f, 0.00586724f, 0.00407111f, 0.0055094f, 0.00500278f, 0.00313028f, 0.0034144f, 0.00455986f, 0.00426922f, 0.00583388f, 0.00556249f, 0.00486354f, 0.00280226f, 0.00587717f, 0.0074994f, 0.002995f, 0.00910551f, 0.00630577f, 0.00551618f, 0.00746997f, 0.00475484f, 0.00285039f, 0.00462964f, 0.00561965f, 0.0049073f, 0.00455993f, 0.00532968f, 0.00406242f, 0.00544959f, 0.00432066f, 0.00495477f, 0.00454308f, 0.00431817f, 0.0049338f, 0.0041684f, 0.00688636f, 0.00540695f, 0.00417271f, 0.00427424f, 0.00378683f, 0.00241466f, 0.0046467f, 0.00525028f, 0.00356679f, 0.00542394f, 0.00390928f, 0.00608764f, 0.00317604f, 0.00488832f, 0.00380637f, 0.00182406f, 0.0035635f, 0.00348007f, 0.00317292f, 0.00299275f, 0.00197535f, 0.0030208f, 0.00321994f, 0.00223891f, 0.00296445f, 0.00346586f, 0.00289702f, 0.00359937f, 0.00289974f, 0.0017143f, 0.0029218f, 0.00269665f, 0.00382263f, 0.00295474f, 0.00299023f, 0.00482899f, 0.00367886f, 0.00307371f, 0.00283272f, 0.00145621f, 0.00360409f, 0.00358997f, 0.00352629f, 0.00375986f, 0.00431868f, 0.00345113f, 0.00297404f, 0.00232433f, 0.00283675f, 0.00345983f, 0.00403822f, 0.00283132f, 0.00331269f, 0.0022503f, 0.0030501f, 0.00282306f, 0.00282745f, 0.00320685f, 0.00340284f, 0.00227462f, 0.00239398f, 0.00217498f, 0.00233416f, 0.00325423f, 0.00272453f, 0.00313173f, 0.00359768f, 0.00297541f, 0.0022545f, 0.0027342f, 0.00326045f, 0.0030083f, 0.00309323f, 0.00365298f, 0.00386215f, 0.00227952f, 0.00303382f, 0.0028161f, 0.00290273f, 0.00334344f, 0.00302401f, 0.00308708f, 0.00271655f, 0.00241553f, 0.00363246f, 0.00365457f, 0.00314025f, 0.00330046f, 0.00316662f, 0.0019343f, 0.0034196f, 0.00298916f, 0.00229377f, 0.00352064f, 0.00232309f, 0.00385494f, 0.00247429f, 0.0036248f, 0.00337024f, 0.00442672f, 0.00186663f, 0.00318804f, 0.00240165f, 0.0032418f, 0.0019742f, 0.00272777f, 0.00453234f, 0.00352233f, 0.00259379f, 0.00259324f, 0.0017525f, 0.00076718f, 0.00368852f, 0.00295835f, 0.00288116f, 0.00258888f, 0.0035098f, 0.00229676f, 0.00328343f, 0.00339054f, 0.00249943f, 0.00188384f, 0.00362825f, 0.00292078f, 0.00352702f, 0.00410366f, 0.00319528f, 0.0035236f, 0.00227352f, 0.00333378f, 0.0029561f, 0.00448132f, 0.00331952f, 0.00324996f, 0.00257495f, 0.00239024f, 0.00277117f, 0.0022787f, 0.00364652f, 0.00153984f, 0.00278223f, 0.00345876f, 0.00267105f], rhs_zero_points=[123, 129, 147, 121, 106, 160, 123, 122, 124, 148, 112, 130, 111, 115, 109, 175, 114, 119, 114, 136, 77, 85, 118, 125, 90, 184, 139, 106, 140, 126, 166, 85, 140, 143, 105, 122, 131, 108, 163, 137, 135, 152, 119, 104, 161, 93, 137, 113, 150, 146, 134, 133, 122, 153, 136, 114, 88, 153, 132, 157, 120, 107, 136, 128, 140, 101, 141, 125, 149, 124, 143, 119, 131, 121, 122, 161, 136, 148, 149, 105, 148, 109, 122, 170, 122, 132, 117, 135, 133, 165, 113, 145, 84, 145, 92, 105, 99, 143, 95, 100, 128, 166, 90, 124, 123, 140, 184, 109, 131, 120, 136, 141, 113, 127, 127, 94, 127, 141, 130, 149, 132, 152, 137, 138, 110, 133, 117, 150, 139, 143, 133, 121, 116, 149, 121, 137, 158, 158, 144, 137, 132, 176, 165, 122, 161, 171, 177, 159, 148, 120, 158, 97, 124, 155, 121, 148, 102, 180, 145, 172, 129, 115, 159, 111, 134, 127, 106, 123, 141, 120, 147, 114, 133, 110, 131, 169, 143, 139, 145, 141, 115, 167, 145, 140, 145, 129, 143, 161, 139, 159, 133, 142, 150, 151, 116, 129, 114, 121, 129, 160, 164, 170, 161, 142, 134, 141, 127, 150, 152, 144, 169, 143, 150, 117, 177, 147, 158, 115, 129, 159, 170, 129, 153, 130, 148, 179, 152, 169, 167, 117, 115, 159, 106, 120, 156, 143, 132, 126, 168, 138, 158, 126, 160, 142, 123, 105, 133, 116, 139, 169, 128, 157, 121, 137, 157, 147], scales=[0.0283505f], zero_points=[131], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %516 = dl.dequantize(%515, input_scales=[0.0283505f], input_zero_points=[131]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %517 = sigmoid(%516) /* /model.19/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %518 = multiply(%516, %517) /* /model.19/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %519 = fn (%FunctionVar_2_02: Tensor[(1, 256, 40, 40), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c110f8)) -> (Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) {
    split(%FunctionVar_2_02, indices_or_sections=[128], axis=1) /* /model.19/Split_output_0 */ /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */
  };
  %520 = %519(%518, indices_or_sections=[128], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(1, 128, 40, 40), float32]) */;
  %523 = %520.1;
  %524 = dl.quantize(%523, output_scales=[0.00810974f], output_zero_points=[34]) /* fake_quant_185 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %525 = fn (%FunctionVar_29_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_29_1: Tensor[(64, 128, 3, 3), uint8], %FunctionVar_29_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a7433238)) -> Tensor[(1, 64, 40, 40), uint8] {
    %522 = (%FunctionVar_29_0, %FunctionVar_29_1, %FunctionVar_29_2, meta[relay.Constant][432] /* ty=Tensor[(64), float32] */, meta[relay.Constant][433] /* ty=Tensor[(64), int32] */, meta[relay.Constant][434] /* ty=Tensor[(64), int32] */, meta[relay.Constant][435] /* ty=Tensor[(64), int32] */, meta[relay.Constant][436] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%522, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00810974f], lhs_zero_points=[34], rhs_scales=[0.00391081f, 0.00275814f, 0.00300513f, 0.00527851f, 0.00291357f, 0.00324234f, 0.00436678f, 0.0026707f, 0.00289499f, 0.00254978f, 0.00460924f, 0.00473943f, 0.00314283f, 0.00457139f, 0.000722121f, 0.00419729f, 0.00290807f, 0.00467998f, 0.00566475f, 0.00268319f, 0.00336035f, 0.0049232f, 0.00279155f, 0.00453074f, 0.00332796f, 0.00357125f, 0.00275002f, 0.00369521f, 0.00479261f, 0.0031397f, 0.00422444f, 0.00443753f, 0.00379987f, 0.00452833f, 0.00165141f, 0.00308223f, 0.00532357f, 0.00386683f, 0.0036651f, 0.00195119f, 0.00309705f, 0.003371f, 0.00142379f, 0.00543323f, 0.00369077f, 0.00468277f, 0.00372921f, 0.00443028f, 0.0037345f, 0.0024638f, 0.003654f, 0.00305754f, 0.00292814f, 0.0035298f, 0.00468301f, 0.00573203f, 0.00120537f, 0.0059807f, 0.00272501f, 0.00290704f, 0.00495926f, 0.00363396f, 0.00372792f, 0.00440322f], rhs_zero_points=[111, 150, 128, 132, 138, 134, 146, 155, 142, 138, 144, 116, 133, 130, 114, 104, 143, 151, 144, 149, 126, 151, 155, 88, 135, 116, 147, 131, 117, 145, 105, 141, 139, 96, 124, 148, 124, 119, 144, 133, 147, 129, 133, 134, 114, 133, 129, 158, 125, 132, 106, 132, 170, 100, 118, 121, 138, 142, 164, 190, 140, 134, 127, 147], scales=[0.025673f], zero_points=[162]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %526 = %525(%524, meta[relay.Constant][437] /* ty=Tensor[(64, 128, 3, 3), uint8] */, meta[relay.Constant][438] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=34f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00810974f], lhs_zero_points=[34], rhs_scales=[0.00391081f, 0.00275814f, 0.00300513f, 0.00527851f, 0.00291357f, 0.00324234f, 0.00436678f, 0.0026707f, 0.00289499f, 0.00254978f, 0.00460924f, 0.00473943f, 0.00314283f, 0.00457139f, 0.000722121f, 0.00419729f, 0.00290807f, 0.00467998f, 0.00566475f, 0.00268319f, 0.00336035f, 0.0049232f, 0.00279155f, 0.00453074f, 0.00332796f, 0.00357125f, 0.00275002f, 0.00369521f, 0.00479261f, 0.0031397f, 0.00422444f, 0.00443753f, 0.00379987f, 0.00452833f, 0.00165141f, 0.00308223f, 0.00532357f, 0.00386683f, 0.0036651f, 0.00195119f, 0.00309705f, 0.003371f, 0.00142379f, 0.00543323f, 0.00369077f, 0.00468277f, 0.00372921f, 0.00443028f, 0.0037345f, 0.0024638f, 0.003654f, 0.00305754f, 0.00292814f, 0.0035298f, 0.00468301f, 0.00573203f, 0.00120537f, 0.0059807f, 0.00272501f, 0.00290704f, 0.00495926f, 0.00363396f, 0.00372792f, 0.00440322f], rhs_zero_points=[111, 150, 128, 132, 138, 134, 146, 155, 142, 138, 144, 116, 133, 130, 114, 104, 143, 151, 144, 149, 126, 151, 155, 88, 135, 116, 147, 131, 117, 145, 105, 141, 139, 96, 124, 148, 124, 119, 144, 133, 147, 129, 133, 134, 114, 133, 129, 158, 125, 132, 106, 132, 170, 100, 118, 121, 138, 142, 164, 190, 140, 134, 127, 147], scales=[0.025673f], zero_points=[162], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %527 = dl.dequantize(%526, input_scales=[0.025673f], input_zero_points=[162]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %528 = sigmoid(%527) /* /model.19/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %529 = multiply(%527, %528) /* /model.19/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %530 = dl.quantize(%529, output_scales=[0.0097162f], output_zero_points=[29]) /* fake_quant_188 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %531 = fn (%FunctionVar_28_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_28_1: Tensor[(128, 64, 3, 3), uint8], %FunctionVar_28_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a96f4e48)) -> Tensor[(1, 128, 40, 40), uint8] {
    %521 = (%FunctionVar_28_0, %FunctionVar_28_1, %FunctionVar_28_2, meta[relay.Constant][427] /* ty=Tensor[(128), float32] */, meta[relay.Constant][428] /* ty=Tensor[(128), int32] */, meta[relay.Constant][429] /* ty=Tensor[(128), int32] */, meta[relay.Constant][430] /* ty=Tensor[(128), int32] */, meta[relay.Constant][431] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%521, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0097162f], lhs_zero_points=[29], rhs_scales=[0.00887278f, 0.00849789f, 0.0111722f, 0.0121453f, 0.0107547f, 0.0046281f, 0.00625651f, 0.00609449f, 0.00762184f, 0.00781601f, 0.004958f, 0.0065337f, 0.0157091f, 0.0071127f, 0.00522553f, 0.00571563f, 0.0127066f, 0.00648505f, 0.00580028f, 0.00519966f, 0.0107662f, 0.00457448f, 0.00584009f, 0.00458682f, 0.00826625f, 0.00841535f, 0.0072152f, 0.00181247f, 0.00888825f, 0.00494122f, 0.00557596f, 0.0132751f, 0.00551387f, 0.00957369f, 0.00547626f, 0.00999608f, 0.00405108f, 0.0110966f, 0.00519529f, 0.012141f, 0.00546506f, 0.00397509f, 0.00674478f, 0.00747226f, 0.0082166f, 0.00870948f, 0.00477622f, 0.00500258f, 0.00399302f, 0.00711995f, 0.00685699f, 0.00436934f, 0.00486492f, 0.00809027f, 0.00275233f, 0.0112141f, 0.00676404f, 0.00787087f, 0.004339f, 0.00669078f, 0.00797979f, 0.00473855f, 0.00466085f, 0.00617527f, 0.00730496f, 0.00880795f, 0.00856974f, 0.0113132f, 0.0053608f, 0.00519271f, 0.00950283f, 0.00391704f, 0.00694928f, 0.00534526f, 0.00765631f, 0.00375897f, 0.0102264f, 0.00798294f, 0.010379f, 0.00619384f, 0.00562771f, 0.00340256f, 0.00348884f, 0.00309584f, 0.00569134f, 0.00583825f, 0.0101172f, 0.0069423f, 0.00305957f, 0.00411103f, 0.00705731f, 0.00609635f, 0.00999051f, 0.00464635f, 0.00434173f, 0.00489074f, 0.00437998f, 0.00587878f, 0.00620082f, 0.00886159f, 0.00315336f, 0.00693475f, 0.0132686f, 0.00467335f, 0.00629894f, 0.0051559f, 0.00307089f, 0.00659818f, 0.00663928f, 0.00383035f, 0.00684898f, 0.00907302f, 0.0044619f, 0.00387598f, 0.00899155f, 0.00354239f, 0.0116367f, 0.00264922f, 0.00979376f, 0.00716681f, 0.00612352f, 0.00392682f, 0.00883133f, 0.00554675f, 0.00581862f, 0.00934308f, 0.00803529f, 0.00916963f], rhs_zero_points=[104, 186, 155, 97, 134, 154, 161, 174, 131, 163, 92, 95, 154, 146, 148, 135, 140, 159, 147, 144, 114, 161, 146, 122, 134, 198, 156, 114, 131, 150, 164, 152, 127, 116, 151, 148, 134, 128, 145, 131, 112, 145, 118, 179, 158, 106, 156, 98, 146, 153, 118, 140, 125, 111, 142, 113, 140, 122, 104, 83, 191, 126, 108, 117, 144, 157, 105, 112, 108, 100, 120, 115, 135, 149, 88, 101, 141, 140, 133, 149, 118, 143, 139, 126, 107, 74, 101, 128, 155, 106, 118, 142, 115, 145, 156, 147, 126, 101, 101, 180, 112, 81, 175, 184, 150, 115, 113, 123, 126, 109, 117, 127, 154, 124, 139, 115, 151, 109, 112, 98, 114, 165, 126, 144, 132, 96, 157, 132], scales=[0.0341256f], zero_points=[150]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %532 = %531(%530, meta[relay.Constant][439] /* ty=Tensor[(128, 64, 3, 3), uint8] */, meta[relay.Constant][440] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=29f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0097162f], lhs_zero_points=[29], rhs_scales=[0.00887278f, 0.00849789f, 0.0111722f, 0.0121453f, 0.0107547f, 0.0046281f, 0.00625651f, 0.00609449f, 0.00762184f, 0.00781601f, 0.004958f, 0.0065337f, 0.0157091f, 0.0071127f, 0.00522553f, 0.00571563f, 0.0127066f, 0.00648505f, 0.00580028f, 0.00519966f, 0.0107662f, 0.00457448f, 0.00584009f, 0.00458682f, 0.00826625f, 0.00841535f, 0.0072152f, 0.00181247f, 0.00888825f, 0.00494122f, 0.00557596f, 0.0132751f, 0.00551387f, 0.00957369f, 0.00547626f, 0.00999608f, 0.00405108f, 0.0110966f, 0.00519529f, 0.012141f, 0.00546506f, 0.00397509f, 0.00674478f, 0.00747226f, 0.0082166f, 0.00870948f, 0.00477622f, 0.00500258f, 0.00399302f, 0.00711995f, 0.00685699f, 0.00436934f, 0.00486492f, 0.00809027f, 0.00275233f, 0.0112141f, 0.00676404f, 0.00787087f, 0.004339f, 0.00669078f, 0.00797979f, 0.00473855f, 0.00466085f, 0.00617527f, 0.00730496f, 0.00880795f, 0.00856974f, 0.0113132f, 0.0053608f, 0.00519271f, 0.00950283f, 0.00391704f, 0.00694928f, 0.00534526f, 0.00765631f, 0.00375897f, 0.0102264f, 0.00798294f, 0.010379f, 0.00619384f, 0.00562771f, 0.00340256f, 0.00348884f, 0.00309584f, 0.00569134f, 0.00583825f, 0.0101172f, 0.0069423f, 0.00305957f, 0.00411103f, 0.00705731f, 0.00609635f, 0.00999051f, 0.00464635f, 0.00434173f, 0.00489074f, 0.00437998f, 0.00587878f, 0.00620082f, 0.00886159f, 0.00315336f, 0.00693475f, 0.0132686f, 0.00467335f, 0.00629894f, 0.0051559f, 0.00307089f, 0.00659818f, 0.00663928f, 0.00383035f, 0.00684898f, 0.00907302f, 0.0044619f, 0.00387598f, 0.00899155f, 0.00354239f, 0.0116367f, 0.00264922f, 0.00979376f, 0.00716681f, 0.00612352f, 0.00392682f, 0.00883133f, 0.00554675f, 0.00581862f, 0.00934308f, 0.00803529f, 0.00916963f], rhs_zero_points=[104, 186, 155, 97, 134, 154, 161, 174, 131, 163, 92, 95, 154, 146, 148, 135, 140, 159, 147, 144, 114, 161, 146, 122, 134, 198, 156, 114, 131, 150, 164, 152, 127, 116, 151, 148, 134, 128, 145, 131, 112, 145, 118, 179, 158, 106, 156, 98, 146, 153, 118, 140, 125, 111, 142, 113, 140, 122, 104, 83, 191, 126, 108, 117, 144, 157, 105, 112, 108, 100, 120, 115, 135, 149, 88, 101, 141, 140, 133, 149, 118, 143, 139, 126, 107, 74, 101, 128, 155, 106, 118, 142, 115, 145, 156, 147, 126, 101, 101, 180, 112, 81, 175, 184, 150, 115, 113, 123, 126, 109, 117, 127, 154, 124, 139, 115, 151, 109, 112, 98, 114, 165, 126, 144, 132, 96, 157, 132], scales=[0.0341256f], zero_points=[150], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %533 = dl.dequantize(%532, input_scales=[0.0341256f], input_zero_points=[150]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %534 = sigmoid(%533) /* /model.19/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %535 = multiply(%533, %534) /* /model.19/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %536 = %520.0;
  %537 = add(%523, %535) /* /model.19/m.0/Add_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %538 = (%536, %523, %537);
  %539 = concatenate(%538, axis=1) /* /model.19/Concat_output_0 */ /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %540 = dl.quantize(%539, output_scales=[0.0189006f], output_zero_points=[29]) /* fake_quant_191 */ /* ty=Tensor[(1, 384, 40, 40), uint8] */;
  %541 = fn (%FunctionVar_27_0: Tensor[(1, 384, 40, 40), uint8], %FunctionVar_27_1: Tensor[(256, 384, 1, 1), uint8], %FunctionVar_27_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae174a8)) -> Tensor[(1, 256, 40, 40), uint8] {
    %503 = (%FunctionVar_27_0, %FunctionVar_27_1, %FunctionVar_27_2, meta[relay.Constant][408] /* ty=Tensor[(256), float32] */, meta[relay.Constant][409] /* ty=Tensor[(256), int32] */, meta[relay.Constant][410] /* ty=Tensor[(256), int32] */, meta[relay.Constant][411] /* ty=Tensor[(256), int32] */, meta[relay.Constant][412] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%503, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0189006f], lhs_zero_points=[29], rhs_scales=[0.00595923f, 0.00297717f, 0.00143979f, 0.00402046f, 0.00449753f, 0.00491582f, 0.0071991f, 0.00305042f, 0.00569945f, 0.00428563f, 0.00616255f, 0.0034659f, 0.00202369f, 0.00301211f, 0.0026889f, 0.00450341f, 0.00341232f, 0.00156112f, 0.00147697f, 0.00211515f, 0.00328892f, 0.00285843f, 0.00230749f, 0.00267472f, 0.00336759f, 0.00202576f, 0.00254217f, 0.0030401f, 0.00244833f, 0.00395836f, 0.00315699f, 0.00439112f, 0.0020041f, 0.00635765f, 0.0018315f, 0.00284484f, 0.00451666f, 0.00192827f, 0.00417931f, 0.00273138f, 0.00440252f, 0.00372147f, 0.00166795f, 0.00434827f, 0.00397162f, 0.00386776f, 0.00419219f, 0.002416f, 0.0051184f, 0.00389776f, 0.00358593f, 0.0040663f, 0.00220148f, 0.00690881f, 0.00265957f, 0.00615334f, 0.00391466f, 0.00616523f, 0.00316929f, 0.00496741f, 0.0018256f, 0.00287996f, 0.00317649f, 0.00451573f, 0.00447963f, 0.00458879f, 0.00184711f, 0.00388623f, 0.00410312f, 0.00356224f, 0.00205923f, 0.0041194f, 0.00292821f, 0.00391011f, 0.00210785f, 0.00206889f, 0.00308011f, 0.00252884f, 0.00471055f, 0.00318774f, 0.00171712f, 0.00182527f, 0.00241857f, 0.00109678f, 0.00106728f, 0.00524685f, 0.00314953f, 0.00313715f, 0.00497709f, 0.00431436f, 0.00475191f, 0.00498797f, 0.0022467f, 0.001776f, 0.00302343f, 0.00112445f, 0.00395898f, 0.00136033f, 0.00199977f, 0.0046187f, 0.00470022f, 0.00239372f, 0.00220068f, 0.00216119f, 0.00528214f, 0.00566626f, 0.00414672f, 0.00255141f, 0.00238862f, 0.00293937f, 0.00382168f, 0.0025784f, 0.00174809f, 0.00246253f, 0.00234817f, 0.0013883f, 0.00195137f, 0.00243956f, 0.00735646f, 0.00243292f, 0.0033014f, 0.00293045f, 0.0015703f, 0.00330918f, 0.00318647f, 0.00259376f, 0.00460014f, 0.00434633f, 0.00419978f, 0.00342457f, 0.00304463f, 0.00327594f, 0.00282726f, 0.00159621f, 0.00328417f, 0.00340185f, 0.00383833f, 0.00163941f, 0.00322553f, 0.0039826f, 0.00367161f, 0.0048773f, 0.00397938f, 0.00335032f, 0.00314421f, 0.00479967f, 0.00251434f, 0.00188229f, 0.00637864f, 0.00263352f, 0.00177704f, 0.00340633f, 0.00350748f, 0.00582015f, 0.00178676f, 0.00214749f, 0.00259106f, 0.0038905f, 0.00336914f, 0.00306402f, 0.00413811f, 0.00159581f, 0.00371104f, 0.00236439f, 0.00435851f, 0.00249708f, 0.00430858f, 0.00252757f, 0.00165355f, 0.00369441f, 0.00492892f, 0.00356605f, 0.00380498f, 0.00252421f, 0.00252821f, 0.00422872f, 0.00226493f, 0.00317067f, 0.00190371f, 0.00221527f, 0.00283285f, 0.00198111f, 0.00406412f, 0.00334985f, 0.00297055f, 0.00214517f, 0.00232299f, 0.00180696f, 0.00389561f, 0.00154486f, 0.00361529f, 0.00202295f, 0.00277289f, 0.00136808f, 0.00287283f, 0.00226654f, 0.00363523f, 0.0044531f, 0.00228298f, 0.00473764f, 0.00445058f, 0.00454923f, 0.00516398f, 0.00402454f, 0.00230213f, 0.0028523f, 0.00503572f, 0.00341852f, 0.00777432f, 0.00210082f, 0.00196261f, 0.00154309f, 0.00342466f, 0.00243769f, 0.00208373f, 0.01003f, 0.00347902f, 0.00440208f, 0.00288581f, 0.00447164f, 0.00401995f, 0.00457857f, 0.0044554f, 0.00294281f, 0.00500442f, 0.00155336f, 0.00355119f, 0.00433721f, 0.00316165f, 0.00390657f, 0.00263405f, 0.00314443f, 0.00267937f, 0.00452092f, 0.00286492f, 0.00146226f, 0.00369988f, 0.00265399f, 0.0021138f, 0.00300768f, 0.00531071f, 0.00392382f, 0.00131635f, 0.00223673f, 0.00631282f, 0.00204901f, 0.00213869f, 0.0036344f, 0.00248649f, 0.0012279f, 0.00322484f, 0.00374166f, 0.0027453f, 0.00294796f, 0.0072937f, 0.00221982f], rhs_zero_points=[145, 102, 125, 174, 97, 184, 176, 122, 104, 123, 134, 183, 112, 174, 139, 100, 90, 117, 115, 97, 170, 108, 131, 140, 118, 131, 126, 152, 112, 166, 166, 136, 149, 207, 143, 141, 109, 143, 137, 149, 165, 96, 124, 135, 160, 97, 170, 131, 172, 143, 160, 123, 161, 192, 145, 82, 184, 97, 133, 120, 125, 181, 150, 80, 108, 107, 133, 178, 103, 149, 152, 156, 176, 146, 134, 135, 95, 124, 159, 160, 121, 137, 139, 155, 129, 130, 101, 106, 102, 165, 194, 175, 115, 112, 157, 114, 184, 134, 130, 105, 110, 150, 117, 158, 168, 108, 137, 134, 123, 149, 173, 132, 148, 123, 144, 133, 128, 102, 189, 118, 144, 115, 150, 170, 149, 138, 135, 119, 93, 115, 113, 175, 106, 134, 173, 134, 92, 140, 115, 145, 149, 126, 116, 126, 155, 107, 136, 150, 195, 106, 144, 116, 176, 181, 99, 148, 153, 99, 148, 152, 151, 136, 122, 98, 177, 118, 154, 106, 132, 116, 100, 165, 122, 129, 157, 135, 138, 159, 100, 141, 130, 111, 134, 139, 61, 144, 146, 149, 150, 138, 103, 153, 189, 142, 131, 126, 110, 136, 123, 184, 87, 182, 193, 134, 135, 110, 170, 115, 216, 138, 120, 135, 115, 180, 102, 171, 161, 117, 157, 161, 197, 150, 100, 142, 123, 91, 127, 122, 188, 99, 138, 107, 108, 181, 135, 162, 132, 140, 184, 132, 200, 122, 160, 150, 203, 176, 158, 129, 138, 165, 134, 150, 147, 139, 188, 135], scales=[0.0374714f], zero_points=[155]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %542 = %541(%540, meta[relay.Constant][441] /* ty=Tensor[(256, 384, 1, 1), uint8] */, meta[relay.Constant][442] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0189006f], lhs_zero_points=[29], rhs_scales=[0.00595923f, 0.00297717f, 0.00143979f, 0.00402046f, 0.00449753f, 0.00491582f, 0.0071991f, 0.00305042f, 0.00569945f, 0.00428563f, 0.00616255f, 0.0034659f, 0.00202369f, 0.00301211f, 0.0026889f, 0.00450341f, 0.00341232f, 0.00156112f, 0.00147697f, 0.00211515f, 0.00328892f, 0.00285843f, 0.00230749f, 0.00267472f, 0.00336759f, 0.00202576f, 0.00254217f, 0.0030401f, 0.00244833f, 0.00395836f, 0.00315699f, 0.00439112f, 0.0020041f, 0.00635765f, 0.0018315f, 0.00284484f, 0.00451666f, 0.00192827f, 0.00417931f, 0.00273138f, 0.00440252f, 0.00372147f, 0.00166795f, 0.00434827f, 0.00397162f, 0.00386776f, 0.00419219f, 0.002416f, 0.0051184f, 0.00389776f, 0.00358593f, 0.0040663f, 0.00220148f, 0.00690881f, 0.00265957f, 0.00615334f, 0.00391466f, 0.00616523f, 0.00316929f, 0.00496741f, 0.0018256f, 0.00287996f, 0.00317649f, 0.00451573f, 0.00447963f, 0.00458879f, 0.00184711f, 0.00388623f, 0.00410312f, 0.00356224f, 0.00205923f, 0.0041194f, 0.00292821f, 0.00391011f, 0.00210785f, 0.00206889f, 0.00308011f, 0.00252884f, 0.00471055f, 0.00318774f, 0.00171712f, 0.00182527f, 0.00241857f, 0.00109678f, 0.00106728f, 0.00524685f, 0.00314953f, 0.00313715f, 0.00497709f, 0.00431436f, 0.00475191f, 0.00498797f, 0.0022467f, 0.001776f, 0.00302343f, 0.00112445f, 0.00395898f, 0.00136033f, 0.00199977f, 0.0046187f, 0.00470022f, 0.00239372f, 0.00220068f, 0.00216119f, 0.00528214f, 0.00566626f, 0.00414672f, 0.00255141f, 0.00238862f, 0.00293937f, 0.00382168f, 0.0025784f, 0.00174809f, 0.00246253f, 0.00234817f, 0.0013883f, 0.00195137f, 0.00243956f, 0.00735646f, 0.00243292f, 0.0033014f, 0.00293045f, 0.0015703f, 0.00330918f, 0.00318647f, 0.00259376f, 0.00460014f, 0.00434633f, 0.00419978f, 0.00342457f, 0.00304463f, 0.00327594f, 0.00282726f, 0.00159621f, 0.00328417f, 0.00340185f, 0.00383833f, 0.00163941f, 0.00322553f, 0.0039826f, 0.00367161f, 0.0048773f, 0.00397938f, 0.00335032f, 0.00314421f, 0.00479967f, 0.00251434f, 0.00188229f, 0.00637864f, 0.00263352f, 0.00177704f, 0.00340633f, 0.00350748f, 0.00582015f, 0.00178676f, 0.00214749f, 0.00259106f, 0.0038905f, 0.00336914f, 0.00306402f, 0.00413811f, 0.00159581f, 0.00371104f, 0.00236439f, 0.00435851f, 0.00249708f, 0.00430858f, 0.00252757f, 0.00165355f, 0.00369441f, 0.00492892f, 0.00356605f, 0.00380498f, 0.00252421f, 0.00252821f, 0.00422872f, 0.00226493f, 0.00317067f, 0.00190371f, 0.00221527f, 0.00283285f, 0.00198111f, 0.00406412f, 0.00334985f, 0.00297055f, 0.00214517f, 0.00232299f, 0.00180696f, 0.00389561f, 0.00154486f, 0.00361529f, 0.00202295f, 0.00277289f, 0.00136808f, 0.00287283f, 0.00226654f, 0.00363523f, 0.0044531f, 0.00228298f, 0.00473764f, 0.00445058f, 0.00454923f, 0.00516398f, 0.00402454f, 0.00230213f, 0.0028523f, 0.00503572f, 0.00341852f, 0.00777432f, 0.00210082f, 0.00196261f, 0.00154309f, 0.00342466f, 0.00243769f, 0.00208373f, 0.01003f, 0.00347902f, 0.00440208f, 0.00288581f, 0.00447164f, 0.00401995f, 0.00457857f, 0.0044554f, 0.00294281f, 0.00500442f, 0.00155336f, 0.00355119f, 0.00433721f, 0.00316165f, 0.00390657f, 0.00263405f, 0.00314443f, 0.00267937f, 0.00452092f, 0.00286492f, 0.00146226f, 0.00369988f, 0.00265399f, 0.0021138f, 0.00300768f, 0.00531071f, 0.00392382f, 0.00131635f, 0.00223673f, 0.00631282f, 0.00204901f, 0.00213869f, 0.0036344f, 0.00248649f, 0.0012279f, 0.00322484f, 0.00374166f, 0.0027453f, 0.00294796f, 0.0072937f, 0.00221982f], rhs_zero_points=[145, 102, 125, 174, 97, 184, 176, 122, 104, 123, 134, 183, 112, 174, 139, 100, 90, 117, 115, 97, 170, 108, 131, 140, 118, 131, 126, 152, 112, 166, 166, 136, 149, 207, 143, 141, 109, 143, 137, 149, 165, 96, 124, 135, 160, 97, 170, 131, 172, 143, 160, 123, 161, 192, 145, 82, 184, 97, 133, 120, 125, 181, 150, 80, 108, 107, 133, 178, 103, 149, 152, 156, 176, 146, 134, 135, 95, 124, 159, 160, 121, 137, 139, 155, 129, 130, 101, 106, 102, 165, 194, 175, 115, 112, 157, 114, 184, 134, 130, 105, 110, 150, 117, 158, 168, 108, 137, 134, 123, 149, 173, 132, 148, 123, 144, 133, 128, 102, 189, 118, 144, 115, 150, 170, 149, 138, 135, 119, 93, 115, 113, 175, 106, 134, 173, 134, 92, 140, 115, 145, 149, 126, 116, 126, 155, 107, 136, 150, 195, 106, 144, 116, 176, 181, 99, 148, 153, 99, 148, 152, 151, 136, 122, 98, 177, 118, 154, 106, 132, 116, 100, 165, 122, 129, 157, 135, 138, 159, 100, 141, 130, 111, 134, 139, 61, 144, 146, 149, 150, 138, 103, 153, 189, 142, 131, 126, 110, 136, 123, 184, 87, 182, 193, 134, 135, 110, 170, 115, 216, 138, 120, 135, 115, 180, 102, 171, 161, 117, 157, 161, 197, 150, 100, 142, 123, 91, 127, 122, 188, 99, 138, 107, 108, 181, 135, 162, 132, 140, 184, 132, 200, 122, 160, 150, 203, 176, 158, 129, 138, 165, 134, 150, 147, 139, 188, 135], scales=[0.0374714f], zero_points=[155], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %543 = dl.dequantize(%542, input_scales=[0.0374714f], input_zero_points=[155]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %544 = sigmoid(%543) /* /model.19/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %545 = multiply(%543, %544) /* /model.19/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %546 = dl.quantize(%545, output_scales=[0.0154256f], output_zero_points=[18]) /* fake_quant_194 */ /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %547 = fn (%FunctionVar_26_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_26_1: Tensor[(64, 256, 3, 3), uint8], %FunctionVar_26_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aadc53f8)) -> Tensor[(1, 64, 40, 40), uint8] {
    %502 = (%FunctionVar_26_0, %FunctionVar_26_1, %FunctionVar_26_2, meta[relay.Constant][403] /* ty=Tensor[(64), float32] */, meta[relay.Constant][404] /* ty=Tensor[(64), int32] */, meta[relay.Constant][405] /* ty=Tensor[(64), int32] */, meta[relay.Constant][406] /* ty=Tensor[(64), int32] */, meta[relay.Constant][407] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%502, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00111945f, 0.00195287f, 0.00194686f, 0.00144469f, 0.00178143f, 0.00324665f, 0.00440934f, 0.0020643f, 0.00141736f, 0.00307624f, 0.00245722f, 0.00212308f, 0.00178253f, 0.00248508f, 0.00179537f, 0.00481165f, 0.00313881f, 0.00145203f, 0.00434371f, 0.00200797f, 0.00471711f, 0.00134827f, 0.00457575f, 0.00223933f, 0.00166566f, 0.00574244f, 0.00149274f, 0.00416128f, 0.00189229f, 0.00239006f, 0.00261207f, 0.00259972f, 0.00639358f, 0.00740902f, 0.00300937f, 0.00435999f, 0.0015147f, 0.00412767f, 0.00173701f, 0.00160001f, 0.00361133f, 0.00190824f, 0.00192364f, 0.00380967f, 0.00155338f, 0.002127f, 0.00273706f, 0.00180941f, 0.00295922f, 0.00154762f, 0.00513847f, 0.00276067f, 0.00522596f, 0.00188188f, 0.00194914f, 0.00694935f, 0.00217481f, 0.000691647f, 0.00222667f, 0.00606449f, 0.00250947f, 0.00422014f, 0.00289489f, 0.00194438f], rhs_zero_points=[157, 121, 107, 153, 125, 147, 139, 134, 154, 151, 122, 158, 110, 110, 154, 128, 110, 132, 132, 162, 108, 140, 141, 142, 96, 173, 150, 131, 126, 147, 90, 143, 179, 227, 171, 136, 150, 89, 131, 114, 154, 113, 123, 121, 140, 113, 169, 116, 108, 135, 181, 149, 166, 158, 144, 119, 131, 140, 106, 169, 158, 163, 150, 123], scales=[0.035928f], zero_points=[160]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %548 = %547(%546, meta[relay.Constant][443] /* ty=Tensor[(64, 256, 3, 3), uint8] */, meta[relay.Constant][444] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=18f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00111945f, 0.00195287f, 0.00194686f, 0.00144469f, 0.00178143f, 0.00324665f, 0.00440934f, 0.0020643f, 0.00141736f, 0.00307624f, 0.00245722f, 0.00212308f, 0.00178253f, 0.00248508f, 0.00179537f, 0.00481165f, 0.00313881f, 0.00145203f, 0.00434371f, 0.00200797f, 0.00471711f, 0.00134827f, 0.00457575f, 0.00223933f, 0.00166566f, 0.00574244f, 0.00149274f, 0.00416128f, 0.00189229f, 0.00239006f, 0.00261207f, 0.00259972f, 0.00639358f, 0.00740902f, 0.00300937f, 0.00435999f, 0.0015147f, 0.00412767f, 0.00173701f, 0.00160001f, 0.00361133f, 0.00190824f, 0.00192364f, 0.00380967f, 0.00155338f, 0.002127f, 0.00273706f, 0.00180941f, 0.00295922f, 0.00154762f, 0.00513847f, 0.00276067f, 0.00522596f, 0.00188188f, 0.00194914f, 0.00694935f, 0.00217481f, 0.000691647f, 0.00222667f, 0.00606449f, 0.00250947f, 0.00422014f, 0.00289489f, 0.00194438f], rhs_zero_points=[157, 121, 107, 153, 125, 147, 139, 134, 154, 151, 122, 158, 110, 110, 154, 128, 110, 132, 132, 162, 108, 140, 141, 142, 96, 173, 150, 131, 126, 147, 90, 143, 179, 227, 171, 136, 150, 89, 131, 114, 154, 113, 123, 121, 140, 113, 169, 116, 108, 135, 181, 149, 166, 158, 144, 119, 131, 140, 106, 169, 158, 163, 150, 123], scales=[0.035928f], zero_points=[160], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %549 = dl.dequantize(%548, input_scales=[0.035928f], input_zero_points=[160]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %550 = sigmoid(%549) /* /model.23/cv2.1/cv2.1.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %551 = multiply(%549, %550) /* /model.23/cv2.1/cv2.1.0/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %552 = dl.quantize(%551, output_scales=[0.0140747f], output_zero_points=[20]) /* fake_quant_197 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %553 = fn (%FunctionVar_25_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_25_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_25_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adb5db98)) -> Tensor[(1, 64, 40, 40), uint8] {
    %501 = (%FunctionVar_25_0, %FunctionVar_25_1, %FunctionVar_25_2, meta[relay.Constant][398] /* ty=Tensor[(64), float32] */, meta[relay.Constant][399] /* ty=Tensor[(64), int32] */, meta[relay.Constant][400] /* ty=Tensor[(64), int32] */, meta[relay.Constant][401] /* ty=Tensor[(64), int32] */, meta[relay.Constant][402] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%501, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0140747f], lhs_zero_points=[20], rhs_scales=[0.00554379f, 0.00599218f, 0.00323282f, 0.00741638f, 0.00399338f, 0.00876188f, 0.0208303f, 0.00826605f, 0.0125779f, 0.00440499f, 0.00609698f, 0.0110236f, 0.0118842f, 0.0031504f, 0.0101154f, 0.0152494f, 0.00969135f, 0.0114582f, 0.00756272f, 0.00862223f, 0.00721682f, 0.00903767f, 0.0098757f, 0.0089784f, 0.00418122f, 0.00827536f, 0.0219309f, 0.00535368f, 0.0143424f, 0.00314377f, 0.00411171f, 0.00832224f, 0.00858759f, 0.00848299f, 0.0065942f, 0.0132903f, 0.0146051f, 0.0117948f, 0.0107064f, 0.0133658f, 0.0110268f, 0.0168726f, 0.00487774f, 0.00331399f, 0.00767376f, 0.00321878f, 0.0236123f, 0.00298871f, 0.00752829f, 0.00308748f, 0.00556905f, 0.00545673f, 0.00634095f, 0.00689803f, 0.00596603f, 0.00292779f, 0.00507216f, 0.0102932f, 0.00628265f, 0.0134837f, 0.00985552f, 0.00751116f, 0.0109318f, 0.0137434f], rhs_zero_points=[161, 126, 107, 118, 113, 156, 52, 138, 103, 121, 159, 168, 184, 110, 200, 97, 160, 123, 153, 190, 92, 92, 94, 142, 128, 182, 40, 181, 149, 115, 171, 112, 115, 180, 74, 183, 146, 201, 169, 113, 204, 183, 166, 131, 100, 96, 83, 135, 158, 109, 150, 80, 153, 94, 83, 143, 151, 60, 136, 99, 170, 49, 100, 175], scales=[0.10083f], zero_points=[79]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %554 = %553(%552, meta[relay.Constant][445] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][446] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=20f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0140747f], lhs_zero_points=[20], rhs_scales=[0.00554379f, 0.00599218f, 0.00323282f, 0.00741638f, 0.00399338f, 0.00876188f, 0.0208303f, 0.00826605f, 0.0125779f, 0.00440499f, 0.00609698f, 0.0110236f, 0.0118842f, 0.0031504f, 0.0101154f, 0.0152494f, 0.00969135f, 0.0114582f, 0.00756272f, 0.00862223f, 0.00721682f, 0.00903767f, 0.0098757f, 0.0089784f, 0.00418122f, 0.00827536f, 0.0219309f, 0.00535368f, 0.0143424f, 0.00314377f, 0.00411171f, 0.00832224f, 0.00858759f, 0.00848299f, 0.0065942f, 0.0132903f, 0.0146051f, 0.0117948f, 0.0107064f, 0.0133658f, 0.0110268f, 0.0168726f, 0.00487774f, 0.00331399f, 0.00767376f, 0.00321878f, 0.0236123f, 0.00298871f, 0.00752829f, 0.00308748f, 0.00556905f, 0.00545673f, 0.00634095f, 0.00689803f, 0.00596603f, 0.00292779f, 0.00507216f, 0.0102932f, 0.00628265f, 0.0134837f, 0.00985552f, 0.00751116f, 0.0109318f, 0.0137434f], rhs_zero_points=[161, 126, 107, 118, 113, 156, 52, 138, 103, 121, 159, 168, 184, 110, 200, 97, 160, 123, 153, 190, 92, 92, 94, 142, 128, 182, 40, 181, 149, 115, 171, 112, 115, 180, 74, 183, 146, 201, 169, 113, 204, 183, 166, 131, 100, 96, 83, 135, 158, 109, 150, 80, 153, 94, 83, 143, 151, 60, 136, 99, 170, 49, 100, 175], scales=[0.10083f], zero_points=[79], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %555 = dl.dequantize(%554, input_scales=[0.10083f], input_zero_points=[79]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %556 = sigmoid(%555) /* /model.23/cv2.1/cv2.1.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %557 = multiply(%555, %556) /* /model.23/cv2.1/cv2.1.1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %558 = dl.quantize(%557, output_scales=[0.0706521f], output_zero_points=[4]) /* fake_quant_200 */ /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %559 = fn (%FunctionVar_24_0: Tensor[(1, 64, 40, 40), uint8], %FunctionVar_24_1: Tensor[(64, 64, 1, 1), uint8], %FunctionVar_24_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9651f98)) -> Tensor[(1, 64, 40, 40), uint8] {
    %500 = (%FunctionVar_24_0, %FunctionVar_24_1, %FunctionVar_24_2, meta[relay.Constant][393] /* ty=Tensor[(64), float32] */, meta[relay.Constant][394] /* ty=Tensor[(64), int32] */, meta[relay.Constant][395] /* ty=Tensor[(64), int32] */, meta[relay.Constant][396] /* ty=Tensor[(64), int32] */, meta[relay.Constant][397] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%500, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0706521f], lhs_zero_points=[4], rhs_scales=[0.00205892f, 0.00200243f, 0.0016726f, 0.00151128f, 0.00130639f, 0.00110342f, 0.00132267f, 0.00101318f, 0.000770958f, 0.000843362f, 0.000510302f, 0.000520953f, 0.000552548f, 0.000552368f, 0.000541059f, 0.000625072f, 0.0020077f, 0.00180281f, 0.00181526f, 0.00165393f, 0.00139208f, 0.00125565f, 0.00127958f, 0.00111658f, 0.000940659f, 0.000719018f, 0.000504677f, 0.000501685f, 0.000478887f, 0.000445676f, 0.000398763f, 0.000500608f, 0.0020886f, 0.00194116f, 0.00184159f, 0.0013916f, 0.00145f, 0.00132363f, 0.00124224f, 0.00101653f, 0.000626508f, 0.000510182f, 0.000400379f, 0.000468355f, 0.000505814f, 0.000515508f, 0.000506173f, 0.00059228f, 0.00200866f, 0.0019986f, 0.00164867f, 0.00164101f, 0.00147681f, 0.00123961f, 0.00127863f, 0.00104478f, 0.000924144f, 0.000683354f, 0.000557694f, 0.000431435f, 0.000431554f, 0.000441009f, 0.000452139f, 0.000577201f], rhs_zero_points=[110, 107, 121, 115, 110, 107, 109, 104, 100, 72, 86, 76, 62, 55, 57, 58, 126, 115, 132, 127, 109, 116, 82, 88, 104, 85, 91, 69, 64, 74, 84, 79, 111, 105, 116, 98, 134, 138, 108, 79, 70, 69, 70, 60, 56, 53, 54, 53, 115, 118, 124, 120, 122, 90, 106, 108, 82, 82, 80, 85, 70, 58, 64, 50], scales=[0.0331094f], zero_points=[41]) /* ty=Tensor[(1, 64, 40, 40), uint8] */
  };
  %560 = %559(%558, meta[relay.Constant][447] /* ty=Tensor[(64, 64, 1, 1), uint8] */, meta[relay.Constant][448] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.0706521f], lhs_zero_points=[4], rhs_scales=[0.00205892f, 0.00200243f, 0.0016726f, 0.00151128f, 0.00130639f, 0.00110342f, 0.00132267f, 0.00101318f, 0.000770958f, 0.000843362f, 0.000510302f, 0.000520953f, 0.000552548f, 0.000552368f, 0.000541059f, 0.000625072f, 0.0020077f, 0.00180281f, 0.00181526f, 0.00165393f, 0.00139208f, 0.00125565f, 0.00127958f, 0.00111658f, 0.000940659f, 0.000719018f, 0.000504677f, 0.000501685f, 0.000478887f, 0.000445676f, 0.000398763f, 0.000500608f, 0.0020886f, 0.00194116f, 0.00184159f, 0.0013916f, 0.00145f, 0.00132363f, 0.00124224f, 0.00101653f, 0.000626508f, 0.000510182f, 0.000400379f, 0.000468355f, 0.000505814f, 0.000515508f, 0.000506173f, 0.00059228f, 0.00200866f, 0.0019986f, 0.00164867f, 0.00164101f, 0.00147681f, 0.00123961f, 0.00127863f, 0.00104478f, 0.000924144f, 0.000683354f, 0.000557694f, 0.000431435f, 0.000431554f, 0.000441009f, 0.000452139f, 0.000577201f], rhs_zero_points=[110, 107, 121, 115, 110, 107, 109, 104, 100, 72, 86, 76, 62, 55, 57, 58, 126, 115, 132, 127, 109, 116, 82, 88, 104, 85, 91, 69, 64, 74, 84, 79, 111, 105, 116, 98, 134, 138, 108, 79, 70, 69, 70, 60, 56, 53, 54, 53, 115, 118, 124, 120, 122, 90, 106, 108, 82, 82, 80, 85, 70, 58, 64, 50], scales=[0.0331094f], zero_points=[41], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 40, 40), uint8] */;
  %566 = fn (%FunctionVar_23_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_23_1: Tensor[(256, 1, 3, 3), uint8], %FunctionVar_23_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab043f48)) -> Tensor[(1, 256, 40, 40), uint8] {
    %565 = (%FunctionVar_23_0, %FunctionVar_23_1, %FunctionVar_23_2, meta[relay.Constant][469] /* ty=Tensor[(256), float32] */, meta[relay.Constant][470] /* ty=Tensor[(256), int32] */, meta[relay.Constant][471] /* ty=Tensor[(256), int32] */, meta[relay.Constant][472] /* ty=Tensor[(256), int32] */, meta[relay.Constant][473] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%565, groups=256, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00559753f, 0.00164743f, 0.00222371f, 0.00491461f, 0.0046074f, 0.00496011f, 0.00207205f, 0.00528352f, 0.00236334f, 0.00454586f, 0.00275951f, 0.00743666f, 0.00761083f, 0.00415796f, 0.00434611f, 0.00246653f, 0.00167863f, 0.0020926f, 0.00156839f, 0.00219822f, 0.003721f, 0.00292555f, 0.0026095f, 0.00196188f, 0.00479148f, 0.00196516f, 0.00436195f, 0.00423297f, 0.0111146f, 0.00410451f, 0.0042441f, 0.00329162f, 0.00189792f, 0.00744194f, 0.0021949f, 0.00524127f, 0.00218481f, 0.0020122f, 0.00268171f, 0.00343521f, 0.00273664f, 0.00301098f, 0.0023747f, 0.00225393f, 0.00480817f, 0.00383364f, 0.00708829f, 0.0047304f, 0.00210952f, 0.00481124f, 0.0127997f, 0.00516082f, 0.00257274f, 0.00647863f, 0.00216391f, 0.00267877f, 0.00157547f, 0.00258158f, 0.00408177f, 0.00284477f, 0.00390169f, 0.00475791f, 0.00431635f, 0.00265068f, 0.00368437f, 0.00215512f, 0.00217971f, 0.00400693f, 0.0035065f, 0.00205154f, 0.0018416f, 0.00887128f, 0.00414914f, 0.00367926f, 0.00159692f, 0.00159038f, 0.00420492f, 0.0018626f, 0.00427508f, 0.00391578f, 0.00177186f, 0.00179079f, 0.00711937f, 0.0103933f, 0.00239328f, 0.00289581f, 0.00399039f, 0.00402839f, 0.00293742f, 0.00482587f, 0.00562714f, 0.00516631f, 0.00366996f, 0.00211297f, 0.00342972f, 0.00237483f, 0.00137689f, 0.00639421f, 0.00177977f, 0.00257379f, 0.0027252f, 0.00476422f, 0.00194541f, 0.00148477f, 0.00446472f, 0.00243251f, 0.00342764f, 0.00398956f, 0.00406515f, 0.00450606f, 0.00546248f, 0.00243812f, 0.00715952f, 0.00165153f, 0.00171412f, 0.00212284f, 0.00735769f, 0.00368763f, 0.00609732f, 0.00372332f, 0.00464115f, 0.0028501f, 0.0027289f, 0.00432107f, 0.00147522f, 0.00503712f, 0.00411317f, 0.00398664f, 0.00358904f, 0.0020231f, 0.00354578f, 0.00607435f, 0.00345924f, 0.00484f, 0.0058207f, 0.00290327f, 0.00320721f, 0.0021014f, 0.00231909f, 0.0034041f, 0.00527983f, 0.00215317f, 0.0016843f, 0.00265822f, 0.00325228f, 0.0049289f, 0.00444937f, 0.00693859f, 0.00538818f, 0.00221273f, 0.00182074f, 0.00851228f, 0.00372644f, 0.0170297f, 0.00268072f, 0.00349342f, 0.00708717f, 0.00483862f, 0.00614767f, 0.0030781f, 0.00630123f, 0.00169378f, 0.00398627f, 0.00215637f, 0.00889495f, 0.00178671f, 0.00304138f, 0.00319771f, 0.00210233f, 0.00396775f, 0.00316681f, 0.00253424f, 0.00308826f, 0.00404989f, 0.00371696f, 0.00278328f, 0.00336442f, 0.00111577f, 0.0016332f, 0.00233885f, 0.00413616f, 0.00183084f, 0.0034511f, 0.00343065f, 0.00292878f, 0.00208317f, 0.00149706f, 0.0018979f, 0.0044426f, 0.00144819f, 0.00348705f, 0.00179285f, 0.00330981f, 0.00220683f, 0.00218687f, 0.00284966f, 0.00282246f, 0.00289879f, 0.00239638f, 0.00551371f, 0.00238611f, 0.0047763f, 0.00363657f, 0.00308502f, 0.00484967f, 0.00672729f, 0.00540694f, 0.0075023f, 0.0074847f, 0.00451793f, 0.00185995f, 0.00305032f, 0.00421242f, 0.00530583f, 0.00182614f, 0.00674999f, 0.00330189f, 0.00347076f, 0.00329962f, 0.00406689f, 0.001303f, 0.00418074f, 0.00210497f, 0.00307067f, 0.0016014f, 0.00200322f, 0.00196159f, 0.00336817f, 0.00834726f, 0.00129561f, 0.00195767f, 0.00154623f, 0.00277965f, 0.00311136f, 0.00335164f, 0.00209112f, 0.00427683f, 0.00313128f, 0.00137448f, 0.00722598f, 0.00430301f, 0.00161557f, 0.0083489f, 0.0063499f, 0.00800154f, 0.00649748f, 0.00827237f, 0.00284933f, 0.00386564f, 0.0163877f, 0.00353103f, 0.00478335f, 0.00579785f, 0.00376178f, 0.00901063f, 0.00313109f], rhs_zero_points=[52, 239, 0, 12, 220, 61, 0, 89, 126, 161, 63, 141, 8, 81, 124, 158, 44, 0, 0, 81, 195, 72, 255, 10, 47, 0, 76, 58, 174, 22, 88, 131, 0, 81, 0, 87, 42, 0, 152, 255, 81, 159, 29, 122, 103, 100, 114, 106, 35, 13, 80, 226, 255, 64, 229, 161, 255, 102, 183, 62, 27, 36, 28, 29, 162, 82, 0, 22, 159, 249, 12, 63, 177, 44, 0, 0, 159, 196, 42, 52, 0, 0, 29, 250, 0, 140, 58, 120, 115, 39, 46, 52, 81, 0, 22, 255, 255, 64, 0, 166, 175, 24, 42, 0, 17, 167, 135, 66, 166, 151, 46, 90, 202, 0, 255, 0, 143, 250, 44, 158, 43, 227, 0, 251, 44, 193, 172, 51, 113, 246, 39, 158, 59, 81, 157, 42, 98, 0, 143, 195, 184, 8, 255, 94, 59, 146, 50, 85, 166, 6, 0, 137, 75, 152, 255, 21, 53, 127, 202, 171, 21, 0, 89, 216, 108, 61, 238, 42, 0, 91, 107, 255, 233, 109, 152, 35, 82, 255, 0, 0, 245, 0, 90, 29, 30, 0, 5, 0, 148, 15, 120, 0, 94, 0, 56, 73, 221, 59, 255, 60, 65, 35, 43, 109, 118, 36, 121, 57, 22, 43, 0, 255, 224, 7, 0, 143, 30, 131, 46, 28, 255, 27, 110, 20, 255, 0, 67, 220, 123, 255, 0, 26, 49, 26, 251, 255, 214, 101, 0, 104, 30, 239, 94, 11, 85, 23, 15, 43, 130, 35, 48, 118, 185, 70, 143, 26], scales=[0.0422686f], zero_points=[111]) /* ty=Tensor[(1, 256, 40, 40), uint8] */
  };
  %567 = %566(%546, meta[relay.Constant][474] /* ty=Tensor[(256, 1, 3, 3), uint8] */, meta[relay.Constant][475] /* ty=Tensor[(256), int32] */, groups=256, kernel_size=[3, 3], pad_value=18f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00559753f, 0.00164743f, 0.00222371f, 0.00491461f, 0.0046074f, 0.00496011f, 0.00207205f, 0.00528352f, 0.00236334f, 0.00454586f, 0.00275951f, 0.00743666f, 0.00761083f, 0.00415796f, 0.00434611f, 0.00246653f, 0.00167863f, 0.0020926f, 0.00156839f, 0.00219822f, 0.003721f, 0.00292555f, 0.0026095f, 0.00196188f, 0.00479148f, 0.00196516f, 0.00436195f, 0.00423297f, 0.0111146f, 0.00410451f, 0.0042441f, 0.00329162f, 0.00189792f, 0.00744194f, 0.0021949f, 0.00524127f, 0.00218481f, 0.0020122f, 0.00268171f, 0.00343521f, 0.00273664f, 0.00301098f, 0.0023747f, 0.00225393f, 0.00480817f, 0.00383364f, 0.00708829f, 0.0047304f, 0.00210952f, 0.00481124f, 0.0127997f, 0.00516082f, 0.00257274f, 0.00647863f, 0.00216391f, 0.00267877f, 0.00157547f, 0.00258158f, 0.00408177f, 0.00284477f, 0.00390169f, 0.00475791f, 0.00431635f, 0.00265068f, 0.00368437f, 0.00215512f, 0.00217971f, 0.00400693f, 0.0035065f, 0.00205154f, 0.0018416f, 0.00887128f, 0.00414914f, 0.00367926f, 0.00159692f, 0.00159038f, 0.00420492f, 0.0018626f, 0.00427508f, 0.00391578f, 0.00177186f, 0.00179079f, 0.00711937f, 0.0103933f, 0.00239328f, 0.00289581f, 0.00399039f, 0.00402839f, 0.00293742f, 0.00482587f, 0.00562714f, 0.00516631f, 0.00366996f, 0.00211297f, 0.00342972f, 0.00237483f, 0.00137689f, 0.00639421f, 0.00177977f, 0.00257379f, 0.0027252f, 0.00476422f, 0.00194541f, 0.00148477f, 0.00446472f, 0.00243251f, 0.00342764f, 0.00398956f, 0.00406515f, 0.00450606f, 0.00546248f, 0.00243812f, 0.00715952f, 0.00165153f, 0.00171412f, 0.00212284f, 0.00735769f, 0.00368763f, 0.00609732f, 0.00372332f, 0.00464115f, 0.0028501f, 0.0027289f, 0.00432107f, 0.00147522f, 0.00503712f, 0.00411317f, 0.00398664f, 0.00358904f, 0.0020231f, 0.00354578f, 0.00607435f, 0.00345924f, 0.00484f, 0.0058207f, 0.00290327f, 0.00320721f, 0.0021014f, 0.00231909f, 0.0034041f, 0.00527983f, 0.00215317f, 0.0016843f, 0.00265822f, 0.00325228f, 0.0049289f, 0.00444937f, 0.00693859f, 0.00538818f, 0.00221273f, 0.00182074f, 0.00851228f, 0.00372644f, 0.0170297f, 0.00268072f, 0.00349342f, 0.00708717f, 0.00483862f, 0.00614767f, 0.0030781f, 0.00630123f, 0.00169378f, 0.00398627f, 0.00215637f, 0.00889495f, 0.00178671f, 0.00304138f, 0.00319771f, 0.00210233f, 0.00396775f, 0.00316681f, 0.00253424f, 0.00308826f, 0.00404989f, 0.00371696f, 0.00278328f, 0.00336442f, 0.00111577f, 0.0016332f, 0.00233885f, 0.00413616f, 0.00183084f, 0.0034511f, 0.00343065f, 0.00292878f, 0.00208317f, 0.00149706f, 0.0018979f, 0.0044426f, 0.00144819f, 0.00348705f, 0.00179285f, 0.00330981f, 0.00220683f, 0.00218687f, 0.00284966f, 0.00282246f, 0.00289879f, 0.00239638f, 0.00551371f, 0.00238611f, 0.0047763f, 0.00363657f, 0.00308502f, 0.00484967f, 0.00672729f, 0.00540694f, 0.0075023f, 0.0074847f, 0.00451793f, 0.00185995f, 0.00305032f, 0.00421242f, 0.00530583f, 0.00182614f, 0.00674999f, 0.00330189f, 0.00347076f, 0.00329962f, 0.00406689f, 0.001303f, 0.00418074f, 0.00210497f, 0.00307067f, 0.0016014f, 0.00200322f, 0.00196159f, 0.00336817f, 0.00834726f, 0.00129561f, 0.00195767f, 0.00154623f, 0.00277965f, 0.00311136f, 0.00335164f, 0.00209112f, 0.00427683f, 0.00313128f, 0.00137448f, 0.00722598f, 0.00430301f, 0.00161557f, 0.0083489f, 0.0063499f, 0.00800154f, 0.00649748f, 0.00827237f, 0.00284933f, 0.00386564f, 0.0163877f, 0.00353103f, 0.00478335f, 0.00579785f, 0.00376178f, 0.00901063f, 0.00313109f], rhs_zero_points=[52, 239, 0, 12, 220, 61, 0, 89, 126, 161, 63, 141, 8, 81, 124, 158, 44, 0, 0, 81, 195, 72, 255, 10, 47, 0, 76, 58, 174, 22, 88, 131, 0, 81, 0, 87, 42, 0, 152, 255, 81, 159, 29, 122, 103, 100, 114, 106, 35, 13, 80, 226, 255, 64, 229, 161, 255, 102, 183, 62, 27, 36, 28, 29, 162, 82, 0, 22, 159, 249, 12, 63, 177, 44, 0, 0, 159, 196, 42, 52, 0, 0, 29, 250, 0, 140, 58, 120, 115, 39, 46, 52, 81, 0, 22, 255, 255, 64, 0, 166, 175, 24, 42, 0, 17, 167, 135, 66, 166, 151, 46, 90, 202, 0, 255, 0, 143, 250, 44, 158, 43, 227, 0, 251, 44, 193, 172, 51, 113, 246, 39, 158, 59, 81, 157, 42, 98, 0, 143, 195, 184, 8, 255, 94, 59, 146, 50, 85, 166, 6, 0, 137, 75, 152, 255, 21, 53, 127, 202, 171, 21, 0, 89, 216, 108, 61, 238, 42, 0, 91, 107, 255, 233, 109, 152, 35, 82, 255, 0, 0, 245, 0, 90, 29, 30, 0, 5, 0, 148, 15, 120, 0, 94, 0, 56, 73, 221, 59, 255, 60, 65, 35, 43, 109, 118, 36, 121, 57, 22, 43, 0, 255, 224, 7, 0, 143, 30, 131, 46, 28, 255, 27, 110, 20, 255, 0, 67, 220, 123, 255, 0, 26, 49, 26, 251, 255, 214, 101, 0, 104, 30, 239, 94, 11, 85, 23, 15, 43, 130, 35, 48, 118, 185, 70, 143, 26], scales=[0.0422686f], zero_points=[111], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %568 = dl.dequantize(%567, input_scales=[0.0422686f], input_zero_points=[111]) /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %569 = sigmoid(%568) /* /model.23/cv3.1/cv3.1.0/cv3.1.0.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %570 = multiply(%568, %569) /* /model.23/cv3.1/cv3.1.0/cv3.1.0.0/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 40, 40), float32] */;
  %571 = dl.quantize(%570, output_scales=[0.0248869f], output_zero_points=[11]) /* fake_quant_206 */ /* ty=Tensor[(1, 256, 40, 40), uint8] */;
  %572 = fn (%FunctionVar_22_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_22_1: Tensor[(128, 256, 1, 1), uint8], %FunctionVar_22_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf1ba68)) -> Tensor[(1, 128, 40, 40), uint8] {
    %564 = (%FunctionVar_22_0, %FunctionVar_22_1, %FunctionVar_22_2, meta[relay.Constant][464] /* ty=Tensor[(128), float32] */, meta[relay.Constant][465] /* ty=Tensor[(128), int32] */, meta[relay.Constant][466] /* ty=Tensor[(128), int32] */, meta[relay.Constant][467] /* ty=Tensor[(128), int32] */, meta[relay.Constant][468] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%564, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0248869f], lhs_zero_points=[11], rhs_scales=[0.00369654f, 0.00439299f, 0.00383096f, 0.00402858f, 0.00233556f, 0.00312235f, 0.00363484f, 0.00493372f, 0.00677821f, 0.00442672f, 0.00401561f, 0.00408164f, 0.00519016f, 0.00419978f, 0.0039953f, 0.000716166f, 0.00484562f, 0.00199648f, 0.00821783f, 0.00353216f, 0.00352269f, 0.00479901f, 0.00609984f, 0.00322017f, 0.0022062f, 0.00359869f, 0.00414875f, 0.00243773f, 0.00414794f, 0.00448349f, 0.00408029f, 0.00283645f, 0.00371498f, 0.00583288f, 0.00596271f, 0.00503936f, 0.00274927f, 0.00471155f, 0.00278849f, 0.00582305f, 0.00501429f, 0.00431582f, 0.00283168f, 0.00467712f, 0.00374984f, 0.00528086f, 0.00347094f, 0.00282085f, 0.00376421f, 0.00401085f, 0.00336239f, 0.00399241f, 0.00328218f, 0.00430674f, 0.00433259f, 0.00910985f, 0.0046063f, 0.00440226f, 0.00370266f, 0.00288436f, 0.00436036f, 0.00231242f, 0.00374576f, 0.0047027f, 0.00393884f, 0.00473813f, 0.00571695f, 0.00603277f, 0.00407198f, 0.00352095f, 0.00494015f, 0.00506009f, 0.00431988f, 0.00494941f, 0.00458766f, 0.00339184f, 0.00199091f, 0.00375291f, 0.00285892f, 0.00471046f, 0.00357785f, 0.00421273f, 0.00624142f, 0.00464266f, 0.00353437f, 0.00475419f, 0.00800777f, 0.00338458f, 0.00541107f, 0.00211642f, 0.00418136f, 0.00429454f, 0.00363614f, 0.00463214f, 0.0048342f, 0.00204564f, 0.00419256f, 0.00427675f, 0.00393991f, 0.00504703f, 0.00424915f, 0.00258515f, 0.00414762f, 0.00667804f, 0.0027222f, 0.000830811f, 0.00240421f, 0.00416663f, 0.00399282f, 0.00289634f, 0.00338534f, 0.00545133f, 0.00301333f, 0.00440654f, 0.00633878f, 0.00349129f, 0.00186896f, 0.00625919f, 0.00124182f, 0.00322719f, 0.00416212f, 0.00629485f, 0.00765991f, 0.00485124f, 0.00282729f, 0.00423492f, 0.00426061f, 0.00199911f], rhs_zero_points=[155, 113, 156, 131, 155, 147, 151, 188, 169, 108, 131, 173, 178, 126, 115, 106, 147, 123, 169, 155, 119, 133, 135, 146, 106, 199, 130, 93, 172, 156, 137, 132, 148, 170, 170, 153, 123, 189, 140, 167, 194, 149, 178, 89, 120, 176, 205, 143, 110, 69, 147, 108, 146, 117, 120, 202, 153, 149, 137, 137, 115, 122, 160, 139, 162, 126, 158, 164, 142, 124, 146, 139, 153, 164, 127, 167, 175, 108, 116, 164, 163, 148, 155, 157, 124, 167, 159, 188, 166, 115, 160, 167, 153, 155, 165, 143, 125, 108, 177, 175, 173, 118, 121, 153, 119, 134, 159, 104, 148, 141, 131, 167, 123, 117, 85, 142, 127, 129, 176, 114, 154, 165, 67, 189, 170, 122, 104, 140], scales=[0.0233432f], zero_points=[149]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %573 = %572(%571, meta[relay.Constant][476] /* ty=Tensor[(128, 256, 1, 1), uint8] */, meta[relay.Constant][477] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0248869f], lhs_zero_points=[11], rhs_scales=[0.00369654f, 0.00439299f, 0.00383096f, 0.00402858f, 0.00233556f, 0.00312235f, 0.00363484f, 0.00493372f, 0.00677821f, 0.00442672f, 0.00401561f, 0.00408164f, 0.00519016f, 0.00419978f, 0.0039953f, 0.000716166f, 0.00484562f, 0.00199648f, 0.00821783f, 0.00353216f, 0.00352269f, 0.00479901f, 0.00609984f, 0.00322017f, 0.0022062f, 0.00359869f, 0.00414875f, 0.00243773f, 0.00414794f, 0.00448349f, 0.00408029f, 0.00283645f, 0.00371498f, 0.00583288f, 0.00596271f, 0.00503936f, 0.00274927f, 0.00471155f, 0.00278849f, 0.00582305f, 0.00501429f, 0.00431582f, 0.00283168f, 0.00467712f, 0.00374984f, 0.00528086f, 0.00347094f, 0.00282085f, 0.00376421f, 0.00401085f, 0.00336239f, 0.00399241f, 0.00328218f, 0.00430674f, 0.00433259f, 0.00910985f, 0.0046063f, 0.00440226f, 0.00370266f, 0.00288436f, 0.00436036f, 0.00231242f, 0.00374576f, 0.0047027f, 0.00393884f, 0.00473813f, 0.00571695f, 0.00603277f, 0.00407198f, 0.00352095f, 0.00494015f, 0.00506009f, 0.00431988f, 0.00494941f, 0.00458766f, 0.00339184f, 0.00199091f, 0.00375291f, 0.00285892f, 0.00471046f, 0.00357785f, 0.00421273f, 0.00624142f, 0.00464266f, 0.00353437f, 0.00475419f, 0.00800777f, 0.00338458f, 0.00541107f, 0.00211642f, 0.00418136f, 0.00429454f, 0.00363614f, 0.00463214f, 0.0048342f, 0.00204564f, 0.00419256f, 0.00427675f, 0.00393991f, 0.00504703f, 0.00424915f, 0.00258515f, 0.00414762f, 0.00667804f, 0.0027222f, 0.000830811f, 0.00240421f, 0.00416663f, 0.00399282f, 0.00289634f, 0.00338534f, 0.00545133f, 0.00301333f, 0.00440654f, 0.00633878f, 0.00349129f, 0.00186896f, 0.00625919f, 0.00124182f, 0.00322719f, 0.00416212f, 0.00629485f, 0.00765991f, 0.00485124f, 0.00282729f, 0.00423492f, 0.00426061f, 0.00199911f], rhs_zero_points=[155, 113, 156, 131, 155, 147, 151, 188, 169, 108, 131, 173, 178, 126, 115, 106, 147, 123, 169, 155, 119, 133, 135, 146, 106, 199, 130, 93, 172, 156, 137, 132, 148, 170, 170, 153, 123, 189, 140, 167, 194, 149, 178, 89, 120, 176, 205, 143, 110, 69, 147, 108, 146, 117, 120, 202, 153, 149, 137, 137, 115, 122, 160, 139, 162, 126, 158, 164, 142, 124, 146, 139, 153, 164, 127, 167, 175, 108, 116, 164, 163, 148, 155, 157, 124, 167, 159, 188, 166, 115, 160, 167, 153, 155, 165, 143, 125, 108, 177, 175, 173, 118, 121, 153, 119, 134, 159, 104, 148, 141, 131, 167, 123, 117, 85, 142, 127, 129, 176, 114, 154, 165, 67, 189, 170, 122, 104, 140], scales=[0.0233432f], zero_points=[149], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %574 = dl.dequantize(%573, input_scales=[0.0233432f], input_zero_points=[149]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %575 = sigmoid(%574) /* /model.23/cv3.1/cv3.1.0/cv3.1.0.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %576 = multiply(%574, %575) /* /model.23/cv3.1/cv3.1.0/cv3.1.0.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %577 = dl.quantize(%576, output_scales=[0.00999407f], output_zero_points=[28]) /* fake_quant_209 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %578 = fn (%FunctionVar_21_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_21_1: Tensor[(128, 1, 3, 3), uint8], %FunctionVar_21_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae94778)) -> Tensor[(1, 128, 40, 40), uint8] {
    %563 = (%FunctionVar_21_0, %FunctionVar_21_1, %FunctionVar_21_2, meta[relay.Constant][459] /* ty=Tensor[(128), float32] */, meta[relay.Constant][460] /* ty=Tensor[(128), int32] */, meta[relay.Constant][461] /* ty=Tensor[(128), int32] */, meta[relay.Constant][462] /* ty=Tensor[(128), int32] */, meta[relay.Constant][463] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%563, groups=128, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00999407f], lhs_zero_points=[28], rhs_scales=[0.00830941f, 0.002211f, 0.00622576f, 0.00226447f, 0.00115005f, 0.00264312f, 0.00217648f, 0.00136415f, 0.0201979f, 0.00222136f, 0.00940658f, 0.00193425f, 0.00138118f, 0.00619613f, 0.00353764f, 0.011945f, 0.000946285f, 0.00235989f, 0.01531f, 0.00185129f, 0.00197537f, 0.000685522f, 0.000810899f, 0.00532244f, 0.0107684f, 0.00440742f, 0.00103612f, 0.00230101f, 0.00214692f, 0.000977465f, 0.0107521f, 0.00234079f, 0.00113537f, 0.000721995f, 0.00071776f, 0.00128797f, 0.004609f, 0.00106878f, 0.0027507f, 0.00153622f, 0.00420087f, 0.00214301f, 0.0026707f, 0.00163176f, 0.00195148f, 0.00143969f, 0.00566043f, 0.00233811f, 0.00201834f, 0.00291519f, 0.00235284f, 0.00485165f, 0.00226333f, 0.00183508f, 0.00203744f, 0.0185715f, 0.00103572f, 0.00176645f, 0.0119005f, 0.00254393f, 0.00373061f, 0.0132781f, 0.00104159f, 0.00525768f, 0.00172725f, 0.0073402f, 0.0017441f, 0.00104877f, 0.00182328f, 0.00173501f, 0.00100113f, 0.000886643f, 0.000839296f, 0.00249066f, 0.00174031f, 0.00702894f, 0.0045276f, 0.00194471f, 0.00190525f, 0.00155199f, 0.00107188f, 0.000758209f, 0.0248264f, 0.00335795f, 0.00236753f, 0.00101227f, 0.000773674f, 0.00799822f, 0.00180701f, 0.00391827f, 0.00540214f, 0.000870283f, 0.00175536f, 0.00121008f, 0.000932349f, 0.00417345f, 0.000788529f, 0.00185455f, 0.00474204f, 0.00247501f, 0.00258802f, 0.00203089f, 0.000982451f, 0.000725297f, 0.0127399f, 0.00914937f, 0.0036037f, 0.00231124f, 0.0059985f, 0.00299359f, 0.00863069f, 0.000866872f, 0.00119296f, 0.000969959f, 0.00642114f, 0.00444365f, 0.00330391f, 0.000600978f, 0.0092244f, 0.0109734f, 0.00130358f, 0.00084151f, 0.00315279f, 0.0116253f, 0.00645391f, 0.000967579f, 0.00212384f, 0.0122128f], rhs_zero_points=[162, 255, 57, 235, 244, 222, 255, 28, 54, 255, 223, 254, 58, 114, 9, 255, 48, 255, 51, 255, 0, 0, 0, 0, 10, 5, 30, 178, 240, 39, 197, 255, 17, 0, 0, 0, 66, 0, 255, 36, 47, 255, 255, 255, 255, 16, 253, 255, 250, 255, 255, 2, 234, 255, 218, 61, 19, 255, 173, 0, 17, 158, 0, 111, 80, 76, 0, 31, 226, 255, 23, 58, 0, 17, 255, 62, 241, 245, 255, 76, 0, 0, 90, 4, 255, 0, 0, 190, 255, 255, 7, 0, 244, 0, 0, 40, 2, 255, 54, 231, 8, 241, 49, 0, 200, 255, 136, 255, 156, 255, 22, 2, 8, 0, 176, 0, 254, 0, 0, 12, 74, 39, 18, 112, 71, 0, 255, 227], scales=[0.017115f], zero_points=[99]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %579 = %578(%577, meta[relay.Constant][478] /* ty=Tensor[(128, 1, 3, 3), uint8] */, meta[relay.Constant][479] /* ty=Tensor[(128), int32] */, groups=128, kernel_size=[3, 3], pad_value=28f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00999407f], lhs_zero_points=[28], rhs_scales=[0.00830941f, 0.002211f, 0.00622576f, 0.00226447f, 0.00115005f, 0.00264312f, 0.00217648f, 0.00136415f, 0.0201979f, 0.00222136f, 0.00940658f, 0.00193425f, 0.00138118f, 0.00619613f, 0.00353764f, 0.011945f, 0.000946285f, 0.00235989f, 0.01531f, 0.00185129f, 0.00197537f, 0.000685522f, 0.000810899f, 0.00532244f, 0.0107684f, 0.00440742f, 0.00103612f, 0.00230101f, 0.00214692f, 0.000977465f, 0.0107521f, 0.00234079f, 0.00113537f, 0.000721995f, 0.00071776f, 0.00128797f, 0.004609f, 0.00106878f, 0.0027507f, 0.00153622f, 0.00420087f, 0.00214301f, 0.0026707f, 0.00163176f, 0.00195148f, 0.00143969f, 0.00566043f, 0.00233811f, 0.00201834f, 0.00291519f, 0.00235284f, 0.00485165f, 0.00226333f, 0.00183508f, 0.00203744f, 0.0185715f, 0.00103572f, 0.00176645f, 0.0119005f, 0.00254393f, 0.00373061f, 0.0132781f, 0.00104159f, 0.00525768f, 0.00172725f, 0.0073402f, 0.0017441f, 0.00104877f, 0.00182328f, 0.00173501f, 0.00100113f, 0.000886643f, 0.000839296f, 0.00249066f, 0.00174031f, 0.00702894f, 0.0045276f, 0.00194471f, 0.00190525f, 0.00155199f, 0.00107188f, 0.000758209f, 0.0248264f, 0.00335795f, 0.00236753f, 0.00101227f, 0.000773674f, 0.00799822f, 0.00180701f, 0.00391827f, 0.00540214f, 0.000870283f, 0.00175536f, 0.00121008f, 0.000932349f, 0.00417345f, 0.000788529f, 0.00185455f, 0.00474204f, 0.00247501f, 0.00258802f, 0.00203089f, 0.000982451f, 0.000725297f, 0.0127399f, 0.00914937f, 0.0036037f, 0.00231124f, 0.0059985f, 0.00299359f, 0.00863069f, 0.000866872f, 0.00119296f, 0.000969959f, 0.00642114f, 0.00444365f, 0.00330391f, 0.000600978f, 0.0092244f, 0.0109734f, 0.00130358f, 0.00084151f, 0.00315279f, 0.0116253f, 0.00645391f, 0.000967579f, 0.00212384f, 0.0122128f], rhs_zero_points=[162, 255, 57, 235, 244, 222, 255, 28, 54, 255, 223, 254, 58, 114, 9, 255, 48, 255, 51, 255, 0, 0, 0, 0, 10, 5, 30, 178, 240, 39, 197, 255, 17, 0, 0, 0, 66, 0, 255, 36, 47, 255, 255, 255, 255, 16, 253, 255, 250, 255, 255, 2, 234, 255, 218, 61, 19, 255, 173, 0, 17, 158, 0, 111, 80, 76, 0, 31, 226, 255, 23, 58, 0, 17, 255, 62, 241, 245, 255, 76, 0, 0, 90, 4, 255, 0, 0, 190, 255, 255, 7, 0, 244, 0, 0, 40, 2, 255, 54, 231, 8, 241, 49, 0, 200, 255, 136, 255, 156, 255, 22, 2, 8, 0, 176, 0, 254, 0, 0, 12, 74, 39, 18, 112, 71, 0, 255, 227], scales=[0.017115f], zero_points=[99], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %580 = dl.dequantize(%579, input_scales=[0.017115f], input_zero_points=[99]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %581 = sigmoid(%580) /* /model.23/cv3.1/cv3.1.1/cv3.1.1.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %582 = multiply(%580, %581) /* /model.23/cv3.1/cv3.1.1/cv3.1.1.0/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %583 = dl.quantize(%582, output_scales=[0.0108786f], output_zero_points=[26]) /* fake_quant_212 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %584 = fn (%FunctionVar_20_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_20_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_20_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab050018)) -> Tensor[(1, 128, 40, 40), uint8] {
    %562 = (%FunctionVar_20_0, %FunctionVar_20_1, %FunctionVar_20_2, meta[relay.Constant][454] /* ty=Tensor[(128), float32] */, meta[relay.Constant][455] /* ty=Tensor[(128), int32] */, meta[relay.Constant][456] /* ty=Tensor[(128), int32] */, meta[relay.Constant][457] /* ty=Tensor[(128), int32] */, meta[relay.Constant][458] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%562, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0108786f], lhs_zero_points=[26], rhs_scales=[0.00910339f, 0.00749711f, 0.0136388f, 0.00541322f, 0.00894806f, 0.00697246f, 0.00841948f, 0.00838471f, 0.0115549f, 0.010917f, 0.0101912f, 0.00788435f, 0.00783123f, 0.0118115f, 0.00770271f, 0.0100385f, 0.00827194f, 0.00772748f, 0.013356f, 0.00771855f, 0.0133852f, 0.00795196f, 0.00876835f, 0.00704421f, 0.0146264f, 0.0106331f, 0.00737325f, 0.00701958f, 0.00720125f, 0.00999556f, 0.00753911f, 0.010157f, 0.00787801f, 0.0184233f, 0.00928562f, 0.00709598f, 0.017571f, 0.00986997f, 0.00868962f, 0.0102748f, 0.00696382f, 0.00742421f, 0.0105733f, 0.0134329f, 0.008669f, 0.0121238f, 0.0102489f, 0.0110162f, 0.0106553f, 0.00756704f, 0.00971129f, 0.0127079f, 0.00837821f, 0.0103885f, 0.0100285f, 0.00948516f, 0.0127253f, 0.00634526f, 0.00790452f, 0.00765606f, 0.00851899f, 0.0073468f, 0.00826043f, 0.00742747f, 0.00855114f, 0.0103199f, 0.0188266f, 0.0067117f, 0.00957982f, 0.00907413f, 0.0091869f, 0.00927372f, 0.00625348f, 0.00910232f, 0.00716823f, 0.0103171f, 0.00776786f, 0.0100521f, 0.00880823f, 0.00745217f, 0.00891938f, 0.0130565f, 0.0201146f, 0.0108652f, 0.0102257f, 0.00981474f, 0.010954f, 0.0115958f, 0.0326466f, 0.0101862f, 0.0081465f, 0.020867f, 0.00849084f, 0.00927194f, 0.0116208f, 0.00696189f, 0.00822184f, 0.00708609f, 0.0101178f, 0.0082027f, 0.0121428f, 0.00521264f, 0.00778615f, 0.00891689f, 0.0100258f, 0.0102002f, 0.0110522f, 0.00662405f, 0.00764295f, 0.00610096f, 0.00903345f, 0.0279373f, 0.00745987f, 0.00906587f, 0.00630021f, 0.00727459f, 0.0074252f, 0.00828434f, 0.011148f, 0.00719105f, 0.00606627f, 0.00691325f, 0.00801803f, 0.00917456f, 0.00597006f, 0.00991212f, 0.0154662f, 0.0094578f], rhs_zero_points=[130, 109, 94, 112, 155, 150, 126, 134, 164, 158, 122, 140, 105, 113, 125, 160, 114, 123, 106, 131, 111, 107, 113, 147, 119, 87, 144, 150, 124, 114, 134, 123, 162, 156, 117, 126, 132, 110, 151, 158, 121, 111, 98, 85, 130, 107, 107, 163, 116, 159, 111, 107, 120, 153, 81, 132, 125, 116, 116, 128, 136, 159, 106, 107, 137, 125, 133, 145, 120, 87, 137, 136, 135, 144, 129, 98, 143, 162, 129, 150, 133, 118, 145, 71, 137, 123, 152, 105, 143, 141, 137, 149, 131, 105, 129, 138, 117, 135, 93, 125, 167, 144, 129, 165, 102, 153, 117, 127, 128, 123, 126, 144, 161, 147, 151, 144, 120, 164, 141, 143, 125, 138, 134, 159, 148, 172, 113, 123], scales=[0.0407189f], zero_points=[74]) /* ty=Tensor[(1, 128, 40, 40), uint8] */
  };
  %585 = %584(%583, meta[relay.Constant][480] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][481] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0108786f], lhs_zero_points=[26], rhs_scales=[0.00910339f, 0.00749711f, 0.0136388f, 0.00541322f, 0.00894806f, 0.00697246f, 0.00841948f, 0.00838471f, 0.0115549f, 0.010917f, 0.0101912f, 0.00788435f, 0.00783123f, 0.0118115f, 0.00770271f, 0.0100385f, 0.00827194f, 0.00772748f, 0.013356f, 0.00771855f, 0.0133852f, 0.00795196f, 0.00876835f, 0.00704421f, 0.0146264f, 0.0106331f, 0.00737325f, 0.00701958f, 0.00720125f, 0.00999556f, 0.00753911f, 0.010157f, 0.00787801f, 0.0184233f, 0.00928562f, 0.00709598f, 0.017571f, 0.00986997f, 0.00868962f, 0.0102748f, 0.00696382f, 0.00742421f, 0.0105733f, 0.0134329f, 0.008669f, 0.0121238f, 0.0102489f, 0.0110162f, 0.0106553f, 0.00756704f, 0.00971129f, 0.0127079f, 0.00837821f, 0.0103885f, 0.0100285f, 0.00948516f, 0.0127253f, 0.00634526f, 0.00790452f, 0.00765606f, 0.00851899f, 0.0073468f, 0.00826043f, 0.00742747f, 0.00855114f, 0.0103199f, 0.0188266f, 0.0067117f, 0.00957982f, 0.00907413f, 0.0091869f, 0.00927372f, 0.00625348f, 0.00910232f, 0.00716823f, 0.0103171f, 0.00776786f, 0.0100521f, 0.00880823f, 0.00745217f, 0.00891938f, 0.0130565f, 0.0201146f, 0.0108652f, 0.0102257f, 0.00981474f, 0.010954f, 0.0115958f, 0.0326466f, 0.0101862f, 0.0081465f, 0.020867f, 0.00849084f, 0.00927194f, 0.0116208f, 0.00696189f, 0.00822184f, 0.00708609f, 0.0101178f, 0.0082027f, 0.0121428f, 0.00521264f, 0.00778615f, 0.00891689f, 0.0100258f, 0.0102002f, 0.0110522f, 0.00662405f, 0.00764295f, 0.00610096f, 0.00903345f, 0.0279373f, 0.00745987f, 0.00906587f, 0.00630021f, 0.00727459f, 0.0074252f, 0.00828434f, 0.011148f, 0.00719105f, 0.00606627f, 0.00691325f, 0.00801803f, 0.00917456f, 0.00597006f, 0.00991212f, 0.0154662f, 0.0094578f], rhs_zero_points=[130, 109, 94, 112, 155, 150, 126, 134, 164, 158, 122, 140, 105, 113, 125, 160, 114, 123, 106, 131, 111, 107, 113, 147, 119, 87, 144, 150, 124, 114, 134, 123, 162, 156, 117, 126, 132, 110, 151, 158, 121, 111, 98, 85, 130, 107, 107, 163, 116, 159, 111, 107, 120, 153, 81, 132, 125, 116, 116, 128, 136, 159, 106, 107, 137, 125, 133, 145, 120, 87, 137, 136, 135, 144, 129, 98, 143, 162, 129, 150, 133, 118, 145, 71, 137, 123, 152, 105, 143, 141, 137, 149, 131, 105, 129, 138, 117, 135, 93, 125, 167, 144, 129, 165, 102, 153, 117, 127, 128, 123, 126, 144, 161, 147, 151, 144, 120, 164, 141, 143, 125, 138, 134, 159, 148, 172, 113, 123], scales=[0.0407189f], zero_points=[74], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %586 = dl.dequantize(%585, input_scales=[0.0407189f], input_zero_points=[74]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %587 = sigmoid(%586) /* /model.23/cv3.1/cv3.1.1/cv3.1.1.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %588 = multiply(%586, %587) /* /model.23/cv3.1/cv3.1.1/cv3.1.1.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %589 = dl.quantize(%588, output_scales=[0.0300208f], output_zero_points=[9]) /* fake_quant_215 */ /* ty=Tensor[(1, 128, 40, 40), uint8] */;
  %590 = fn (%FunctionVar_19_0: Tensor[(1, 128, 40, 40), uint8], %FunctionVar_19_1: Tensor[(80, 128, 1, 1), uint8], %FunctionVar_19_2: Tensor[(80), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adce8a18)) -> Tensor[(1, 80, 40, 40), uint8] {
    %561 = (%FunctionVar_19_0, %FunctionVar_19_1, %FunctionVar_19_2, meta[relay.Constant][449] /* ty=Tensor[(80), float32] */, meta[relay.Constant][450] /* ty=Tensor[(80), int32] */, meta[relay.Constant][451] /* ty=Tensor[(80), int32] */, meta[relay.Constant][452] /* ty=Tensor[(80), int32] */, meta[relay.Constant][453] /* ty=Tensor[(80), int32] */);
    dl.quantized_conv2d(%561, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0300208f], lhs_zero_points=[9], rhs_scales=[0.00125852f, 0.00059982f, 0.000781489f, 0.000676892f, 0.000724763f, 0.000711359f, 0.000787234f, 0.000654393f, 0.000684791f, 0.000613224f, 0.000531844f, 0.000575526f, 0.000590366f, 0.00093683f, 0.000719257f, 0.000719257f, 0.0007925f, 0.00072572f, 0.000640031f, 0.000656068f, 0.000662291f, 0.000579236f, 0.000588331f, 0.00062926f, 0.000856407f, 0.000781968f, 0.000799202f, 0.00070705f, 0.000748937f, 0.000694484f, 0.000663488f, 0.000650563f, 0.000651042f, 0.000681679f, 0.000711837f, 0.000630457f, 0.000618011f, 0.000640271f, 0.000593118f, 0.000738166f, 0.000609873f, 0.000740321f, 0.000590725f, 0.000753246f, 0.000705614f, 0.000837259f, 0.000676413f, 0.000638117f, 0.000636202f, 0.000779096f, 0.000811169f, 0.000795851f, 0.000709205f, 0.000742953f, 0.000663488f, 0.000861194f, 0.000932043f, 0.000737448f, 0.000961723f, 0.000793457f, 0.00110557f, 0.000648409f, 0.000776463f, 0.000667318f, 0.000582467f, 0.000675934f, 0.000550992f, 0.000612506f, 0.000648887f, 0.000717343f, 0.0004963f, 0.000595033f, 0.000627585f, 0.000845397f, 0.000664685f, 0.000691971f, 0.000593836f, 0.000754682f, 0.000557454f, 0.000594076f], rhs_zero_points=[145, 108, 136, 129, 115, 113, 111, 122, 121, 107, 109, 102, 99, 90, 109, 112, 95, 105, 126, 113, 139, 122, 125, 115, 80, 116, 99, 99, 105, 74, 113, 110, 83, 107, 79, 89, 124, 110, 105, 123, 117, 120, 106, 95, 123, 159, 118, 110, 111, 104, 103, 87, 102, 119, 120, 94, 132, 117, 88, 90, 82, 123, 105, 113, 97, 98, 115, 102, 86, 97, 97, 132, 111, 121, 109, 104, 89, 104, 84, 94], scales=[0.0616978f], zero_points=[255]) /* ty=Tensor[(1, 80, 40, 40), uint8] */
  };
  %591 = %590(%589, meta[relay.Constant][482] /* ty=Tensor[(80, 128, 1, 1), uint8] */, meta[relay.Constant][483] /* ty=Tensor[(80), int32] */, kernel_size=[1, 1], lhs_scales=[0.0300208f], lhs_zero_points=[9], rhs_scales=[0.00125852f, 0.00059982f, 0.000781489f, 0.000676892f, 0.000724763f, 0.000711359f, 0.000787234f, 0.000654393f, 0.000684791f, 0.000613224f, 0.000531844f, 0.000575526f, 0.000590366f, 0.00093683f, 0.000719257f, 0.000719257f, 0.0007925f, 0.00072572f, 0.000640031f, 0.000656068f, 0.000662291f, 0.000579236f, 0.000588331f, 0.00062926f, 0.000856407f, 0.000781968f, 0.000799202f, 0.00070705f, 0.000748937f, 0.000694484f, 0.000663488f, 0.000650563f, 0.000651042f, 0.000681679f, 0.000711837f, 0.000630457f, 0.000618011f, 0.000640271f, 0.000593118f, 0.000738166f, 0.000609873f, 0.000740321f, 0.000590725f, 0.000753246f, 0.000705614f, 0.000837259f, 0.000676413f, 0.000638117f, 0.000636202f, 0.000779096f, 0.000811169f, 0.000795851f, 0.000709205f, 0.000742953f, 0.000663488f, 0.000861194f, 0.000932043f, 0.000737448f, 0.000961723f, 0.000793457f, 0.00110557f, 0.000648409f, 0.000776463f, 0.000667318f, 0.000582467f, 0.000675934f, 0.000550992f, 0.000612506f, 0.000648887f, 0.000717343f, 0.0004963f, 0.000595033f, 0.000627585f, 0.000845397f, 0.000664685f, 0.000691971f, 0.000593836f, 0.000754682f, 0.000557454f, 0.000594076f], rhs_zero_points=[145, 108, 136, 129, 115, 113, 111, 122, 121, 107, 109, 102, 99, 90, 109, 112, 95, 105, 126, 113, 139, 122, 125, 115, 80, 116, 99, 99, 105, 74, 113, 110, 83, 107, 79, 89, 124, 110, 105, 123, 117, 120, 106, 95, 123, 159, 118, 110, 111, 104, 103, 87, 102, 119, 120, 94, 132, 117, 88, 90, 82, 123, 105, 113, 97, 98, 115, 102, 86, 97, 97, 132, 111, 121, 109, 104, 89, 104, 84, 94], scales=[0.0616978f], zero_points=[255], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 80, 40, 40), uint8] */;
  %592 = dl.dequantize(%560, input_scales=[0.0331094f], input_zero_points=[41]) /* ty=Tensor[(1, 64, 40, 40), float32] */;
  %593 = dl.dequantize(%591, input_scales=[0.0616978f], input_zero_points=[255]) /* ty=Tensor[(1, 80, 40, 40), float32] */;
  %594 = (%592, %593);
  %595 = concatenate(%594, axis=1) /* /model.23/Concat_1_output_0 */ /* ty=Tensor[(1, 144, 40, 40), float32] */;
  %602 = fn (%FunctionVar_18_0: Tensor[(1, 256, 40, 40), uint8], %FunctionVar_18_1: Tensor[(256, 256, 3, 3), uint8], %FunctionVar_18_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a95e3a98)) -> Tensor[(1, 256, 20, 20), uint8] {
    %601 = (%FunctionVar_18_0, %FunctionVar_18_1, %FunctionVar_18_2, meta[relay.Constant][509] /* ty=Tensor[(256), float32] */, meta[relay.Constant][510] /* ty=Tensor[(256), int32] */, meta[relay.Constant][511] /* ty=Tensor[(256), int32] */, meta[relay.Constant][512] /* ty=Tensor[(256), int32] */, meta[relay.Constant][513] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%601, strides=[2, 2], kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00105105f, 0.000735212f, 0.00142626f, 0.00128532f, 0.00090351f, 0.00080776f, 0.001453f, 0.000968631f, 0.00131184f, 0.001408f, 0.000738661f, 0.000941928f, 0.000942246f, 0.000997811f, 0.00172273f, 0.000785464f, 0.00139338f, 0.00157538f, 0.0015593f, 0.00146816f, 0.000767291f, 0.00161693f, 0.00128154f, 0.00142276f, 0.00138318f, 0.00147679f, 0.000611962f, 0.00102279f, 0.001643f, 0.000825944f, 0.000791887f, 0.00157916f, 0.00240892f, 0.00132257f, 0.00119549f, 0.000865371f, 0.00152461f, 0.00187613f, 0.00134977f, 0.00078164f, 0.00237087f, 0.00113387f, 0.00172137f, 0.000556636f, 0.000735008f, 0.00106676f, 0.000893815f, 0.000668285f, 0.000898356f, 0.00133497f, 0.000720407f, 0.00115309f, 0.00136577f, 0.000575602f, 0.0010099f, 0.00166055f, 0.00186184f, 0.00193323f, 0.00209756f, 0.00147835f, 0.00169772f, 0.000886347f, 0.00150813f, 0.00151731f, 0.00141228f, 0.000929751f, 0.000711128f, 0.00135923f, 0.00155396f, 0.00113576f, 0.00149989f, 0.00160681f, 0.00142964f, 0.00166657f, 0.00314159f, 0.00111159f, 0.00160013f, 0.00158484f, 0.00176987f, 0.00124629f, 0.00137287f, 0.000539422f, 0.00156646f, 0.000701875f, 0.00182509f, 0.00177527f, 0.00115188f, 0.00103686f, 0.000989213f, 0.00136413f, 0.00165405f, 0.000694381f, 0.000756991f, 0.001393f, 0.00105858f, 0.00103089f, 0.0011595f, 0.00146713f, 0.00179799f, 0.00137228f, 0.000807737f, 0.00160001f, 0.00183508f, 0.00100011f, 0.00153351f, 0.00067833f, 0.00101678f, 0.000979274f, 0.00151934f, 0.000905943f, 0.0010545f, 0.000915455f, 0.000950083f, 0.000612518f, 0.00162244f, 0.000663916f, 0.00192341f, 0.00174734f, 0.000843528f, 0.00182124f, 0.00211386f, 0.00124781f, 0.00109784f, 0.00134477f, 0.00189223f, 0.00186901f, 0.00108963f, 0.0016758f, 0.000859423f, 0.00107077f, 0.00101901f, 0.00190053f, 0.00169895f, 0.000987723f, 0.00133414f, 0.000711475f, 0.00107723f, 0.00110251f, 0.00123701f, 0.00110523f, 0.00144356f, 0.00157496f, 0.00242818f, 0.00148421f, 0.00160003f, 0.000815f, 0.000927639f, 0.000678967f, 0.000702479f, 0.00121151f, 0.0012251f, 0.00241128f, 0.000930065f, 0.000809243f, 0.000907598f, 0.00102401f, 0.00121062f, 0.00106203f, 0.0016139f, 0.000717319f, 0.000766833f, 0.000506716f, 0.00141128f, 0.00103093f, 0.00166056f, 0.000941903f, 0.00142311f, 0.00158556f, 0.00196693f, 0.00115318f, 0.000929978f, 0.000598025f, 0.000916973f, 0.000857791f, 0.00145904f, 0.000944965f, 0.000883898f, 0.000852518f, 0.00075347f, 0.000869253f, 0.00149448f, 0.000852875f, 0.00124949f, 0.00099337f, 0.000691226f, 0.000798285f, 0.0018961f, 0.00127656f, 0.00148066f, 0.000777713f, 0.000517613f, 0.00080537f, 0.00163461f, 0.00264391f, 0.00124911f, 0.00134541f, 0.000812196f, 0.00081842f, 0.0017453f, 0.000831578f, 0.00158261f, 0.00125977f, 0.00139064f, 0.000845194f, 0.00278645f, 0.000857781f, 0.00171247f, 0.001351f, 0.000883685f, 0.000852887f, 0.00135101f, 0.000858751f, 0.0011875f, 0.000701219f, 0.000785706f, 0.000853871f, 0.000735138f, 0.000562259f, 0.000671699f, 0.000825873f, 0.00133372f, 0.00106507f, 0.000719943f, 0.00130281f, 0.00155454f, 0.00193617f, 0.000848153f, 0.00140974f, 0.00140484f, 0.00175247f, 0.000449576f, 0.0014355f, 0.00189122f, 0.0008044f, 0.000870018f, 0.00129677f, 0.000920284f, 0.000924595f, 0.000892966f, 0.00128933f, 0.00144483f, 0.000760234f, 0.000950949f, 0.00103348f, 0.00111088f, 0.000798147f, 0.00165153f, 0.000759626f, 0.00138968f, 0.000958778f, 0.00137404f, 0.000696463f, 0.00165335f, 0.00142377f, 0.00182052f, 0.00152843f], rhs_zero_points=[132, 129, 108, 127, 80, 124, 165, 146, 105, 139, 103, 123, 129, 106, 122, 111, 81, 120, 114, 100, 125, 79, 129, 81, 126, 147, 130, 118, 155, 133, 137, 102, 117, 117, 140, 117, 124, 75, 162, 147, 120, 123, 129, 128, 101, 106, 99, 113, 101, 121, 135, 94, 133, 126, 119, 138, 146, 164, 126, 110, 136, 113, 122, 142, 136, 156, 117, 128, 92, 134, 125, 147, 154, 135, 117, 130, 122, 131, 128, 122, 117, 137, 99, 157, 108, 114, 126, 112, 90, 145, 102, 128, 134, 117, 120, 95, 163, 129, 79, 80, 107, 119, 120, 126, 152, 117, 162, 110, 129, 100, 109, 150, 108, 133, 87, 138, 125, 146, 116, 104, 110, 144, 163, 126, 104, 99, 118, 160, 133, 136, 150, 95, 133, 150, 102, 137, 81, 133, 94, 113, 111, 93, 137, 146, 60, 120, 124, 116, 134, 140, 152, 68, 87, 121, 114, 106, 139, 134, 157, 111, 138, 124, 117, 107, 131, 105, 100, 122, 138, 143, 108, 106, 110, 128, 89, 144, 152, 140, 122, 143, 99, 119, 98, 84, 122, 114, 144, 82, 137, 110, 112, 138, 118, 121, 104, 60, 123, 128, 90, 128, 100, 107, 132, 87, 119, 139, 120, 128, 140, 122, 72, 135, 79, 150, 121, 145, 117, 110, 148, 134, 154, 130, 137, 98, 136, 141, 89, 127, 129, 114, 135, 150, 140, 120, 132, 140, 110, 156, 132, 127, 144, 128, 128, 112, 117, 112, 122, 110, 122, 132, 115, 101, 112, 103, 102, 118], scales=[0.0291872f], zero_points=[153]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %603 = %602(%546, meta[relay.Constant][514] /* ty=Tensor[(256, 256, 3, 3), uint8] */, meta[relay.Constant][515] /* ty=Tensor[(256), int32] */, strides=[2, 2], kernel_size=[3, 3], pad_value=18f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0154256f], lhs_zero_points=[18], rhs_scales=[0.00105105f, 0.000735212f, 0.00142626f, 0.00128532f, 0.00090351f, 0.00080776f, 0.001453f, 0.000968631f, 0.00131184f, 0.001408f, 0.000738661f, 0.000941928f, 0.000942246f, 0.000997811f, 0.00172273f, 0.000785464f, 0.00139338f, 0.00157538f, 0.0015593f, 0.00146816f, 0.000767291f, 0.00161693f, 0.00128154f, 0.00142276f, 0.00138318f, 0.00147679f, 0.000611962f, 0.00102279f, 0.001643f, 0.000825944f, 0.000791887f, 0.00157916f, 0.00240892f, 0.00132257f, 0.00119549f, 0.000865371f, 0.00152461f, 0.00187613f, 0.00134977f, 0.00078164f, 0.00237087f, 0.00113387f, 0.00172137f, 0.000556636f, 0.000735008f, 0.00106676f, 0.000893815f, 0.000668285f, 0.000898356f, 0.00133497f, 0.000720407f, 0.00115309f, 0.00136577f, 0.000575602f, 0.0010099f, 0.00166055f, 0.00186184f, 0.00193323f, 0.00209756f, 0.00147835f, 0.00169772f, 0.000886347f, 0.00150813f, 0.00151731f, 0.00141228f, 0.000929751f, 0.000711128f, 0.00135923f, 0.00155396f, 0.00113576f, 0.00149989f, 0.00160681f, 0.00142964f, 0.00166657f, 0.00314159f, 0.00111159f, 0.00160013f, 0.00158484f, 0.00176987f, 0.00124629f, 0.00137287f, 0.000539422f, 0.00156646f, 0.000701875f, 0.00182509f, 0.00177527f, 0.00115188f, 0.00103686f, 0.000989213f, 0.00136413f, 0.00165405f, 0.000694381f, 0.000756991f, 0.001393f, 0.00105858f, 0.00103089f, 0.0011595f, 0.00146713f, 0.00179799f, 0.00137228f, 0.000807737f, 0.00160001f, 0.00183508f, 0.00100011f, 0.00153351f, 0.00067833f, 0.00101678f, 0.000979274f, 0.00151934f, 0.000905943f, 0.0010545f, 0.000915455f, 0.000950083f, 0.000612518f, 0.00162244f, 0.000663916f, 0.00192341f, 0.00174734f, 0.000843528f, 0.00182124f, 0.00211386f, 0.00124781f, 0.00109784f, 0.00134477f, 0.00189223f, 0.00186901f, 0.00108963f, 0.0016758f, 0.000859423f, 0.00107077f, 0.00101901f, 0.00190053f, 0.00169895f, 0.000987723f, 0.00133414f, 0.000711475f, 0.00107723f, 0.00110251f, 0.00123701f, 0.00110523f, 0.00144356f, 0.00157496f, 0.00242818f, 0.00148421f, 0.00160003f, 0.000815f, 0.000927639f, 0.000678967f, 0.000702479f, 0.00121151f, 0.0012251f, 0.00241128f, 0.000930065f, 0.000809243f, 0.000907598f, 0.00102401f, 0.00121062f, 0.00106203f, 0.0016139f, 0.000717319f, 0.000766833f, 0.000506716f, 0.00141128f, 0.00103093f, 0.00166056f, 0.000941903f, 0.00142311f, 0.00158556f, 0.00196693f, 0.00115318f, 0.000929978f, 0.000598025f, 0.000916973f, 0.000857791f, 0.00145904f, 0.000944965f, 0.000883898f, 0.000852518f, 0.00075347f, 0.000869253f, 0.00149448f, 0.000852875f, 0.00124949f, 0.00099337f, 0.000691226f, 0.000798285f, 0.0018961f, 0.00127656f, 0.00148066f, 0.000777713f, 0.000517613f, 0.00080537f, 0.00163461f, 0.00264391f, 0.00124911f, 0.00134541f, 0.000812196f, 0.00081842f, 0.0017453f, 0.000831578f, 0.00158261f, 0.00125977f, 0.00139064f, 0.000845194f, 0.00278645f, 0.000857781f, 0.00171247f, 0.001351f, 0.000883685f, 0.000852887f, 0.00135101f, 0.000858751f, 0.0011875f, 0.000701219f, 0.000785706f, 0.000853871f, 0.000735138f, 0.000562259f, 0.000671699f, 0.000825873f, 0.00133372f, 0.00106507f, 0.000719943f, 0.00130281f, 0.00155454f, 0.00193617f, 0.000848153f, 0.00140974f, 0.00140484f, 0.00175247f, 0.000449576f, 0.0014355f, 0.00189122f, 0.0008044f, 0.000870018f, 0.00129677f, 0.000920284f, 0.000924595f, 0.000892966f, 0.00128933f, 0.00144483f, 0.000760234f, 0.000950949f, 0.00103348f, 0.00111088f, 0.000798147f, 0.00165153f, 0.000759626f, 0.00138968f, 0.000958778f, 0.00137404f, 0.000696463f, 0.00165335f, 0.00142377f, 0.00182052f, 0.00152843f], rhs_zero_points=[132, 129, 108, 127, 80, 124, 165, 146, 105, 139, 103, 123, 129, 106, 122, 111, 81, 120, 114, 100, 125, 79, 129, 81, 126, 147, 130, 118, 155, 133, 137, 102, 117, 117, 140, 117, 124, 75, 162, 147, 120, 123, 129, 128, 101, 106, 99, 113, 101, 121, 135, 94, 133, 126, 119, 138, 146, 164, 126, 110, 136, 113, 122, 142, 136, 156, 117, 128, 92, 134, 125, 147, 154, 135, 117, 130, 122, 131, 128, 122, 117, 137, 99, 157, 108, 114, 126, 112, 90, 145, 102, 128, 134, 117, 120, 95, 163, 129, 79, 80, 107, 119, 120, 126, 152, 117, 162, 110, 129, 100, 109, 150, 108, 133, 87, 138, 125, 146, 116, 104, 110, 144, 163, 126, 104, 99, 118, 160, 133, 136, 150, 95, 133, 150, 102, 137, 81, 133, 94, 113, 111, 93, 137, 146, 60, 120, 124, 116, 134, 140, 152, 68, 87, 121, 114, 106, 139, 134, 157, 111, 138, 124, 117, 107, 131, 105, 100, 122, 138, 143, 108, 106, 110, 128, 89, 144, 152, 140, 122, 143, 99, 119, 98, 84, 122, 114, 144, 82, 137, 110, 112, 138, 118, 121, 104, 60, 123, 128, 90, 128, 100, 107, 132, 87, 119, 139, 120, 128, 140, 122, 72, 135, 79, 150, 121, 145, 117, 110, 148, 134, 154, 130, 137, 98, 136, 141, 89, 127, 129, 114, 135, 150, 140, 120, 132, 140, 110, 156, 132, 127, 144, 128, 128, 112, 117, 112, 122, 110, 122, 132, 115, 101, 112, 103, 102, 118], scales=[0.0291872f], zero_points=[153], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %604 = dl.dequantize(%603, input_scales=[0.0291872f], input_zero_points=[153]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %605 = sigmoid(%604) /* /model.20/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %606 = multiply(%604, %605) /* /model.20/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %607 = (%606, %375);
  %608 = concatenate(%607, axis=1) /* /model.21/Concat_output_0 */ /* ty=Tensor[(1, 768, 20, 20), float32] */;
  %609 = dl.quantize(%608, output_scales=[0.0169053f], output_zero_points=[16]) /* fake_quant_221 */ /* ty=Tensor[(1, 768, 20, 20), uint8] */;
  %610 = fn (%FunctionVar_17_0: Tensor[(1, 768, 20, 20), uint8], %FunctionVar_17_1: Tensor[(512, 768, 1, 1), uint8], %FunctionVar_17_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a96abf88)) -> Tensor[(1, 512, 20, 20), uint8] {
    %600 = (%FunctionVar_17_0, %FunctionVar_17_1, %FunctionVar_17_2, meta[relay.Constant][504] /* ty=Tensor[(512), float32] */, meta[relay.Constant][505] /* ty=Tensor[(512), int32] */, meta[relay.Constant][506] /* ty=Tensor[(512), int32] */, meta[relay.Constant][507] /* ty=Tensor[(512), int32] */, meta[relay.Constant][508] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%600, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0169053f], lhs_zero_points=[16], rhs_scales=[0.00268022f, 0.00264457f, 0.00348275f, 0.00232957f, 0.00280255f, 0.0025826f, 0.00226126f, 0.00236112f, 0.00360535f, 0.00251193f, 0.00313507f, 0.00301562f, 0.00261471f, 0.0026853f, 0.00290986f, 0.00315133f, 0.00245982f, 0.00413456f, 0.0034748f, 0.00253975f, 0.003451f, 0.0038957f, 0.00323013f, 0.00273538f, 0.00336492f, 0.00236893f, 0.00238071f, 0.00237757f, 0.00232581f, 0.00306943f, 0.00336596f, 0.00283347f, 0.00546291f, 0.00316467f, 0.00267426f, 0.00319276f, 0.00271617f, 0.00223735f, 0.00329297f, 0.00278566f, 0.0025947f, 0.00714615f, 0.00262131f, 0.00307143f, 0.00509034f, 0.00270432f, 0.00400932f, 0.00296303f, 0.00248779f, 0.00293852f, 0.00459629f, 0.00323299f, 0.00345603f, 0.00316529f, 0.00366715f, 0.00295394f, 0.00293067f, 0.00269096f, 0.00298026f, 0.00260609f, 0.00283768f, 0.00261604f, 0.00440899f, 0.00378717f, 0.00300619f, 0.00271028f, 0.00275573f, 0.00249032f, 0.00250616f, 0.00319704f, 0.00362016f, 0.00320689f, 0.0034242f, 0.00337789f, 0.00287399f, 0.00241328f, 0.00240473f, 0.00322934f, 0.00314303f, 0.00285261f, 0.00254829f, 0.00323704f, 0.00451438f, 0.00285353f, 0.00285495f, 0.0033155f, 0.00305181f, 0.00448801f, 0.00314684f, 0.00241649f, 0.00345463f, 0.00278394f, 0.00322437f, 0.00269612f, 0.00267764f, 0.00266966f, 0.00343654f, 0.00263997f, 0.00289853f, 0.003128f, 0.00297029f, 0.00329825f, 0.00291829f, 0.0028751f, 0.00257943f, 0.00242356f, 0.00337307f, 0.00253273f, 0.00265704f, 0.00278811f, 0.00358934f, 0.00434842f, 0.00284264f, 0.00278592f, 0.00348746f, 0.00299413f, 0.00224954f, 0.00253924f, 0.00603818f, 0.00381235f, 0.00285437f, 0.00349076f, 0.00309368f, 0.0034238f, 0.00314189f, 0.00386456f, 0.00282062f, 0.00277295f, 0.00262052f, 0.00276471f, 0.00309221f, 0.0027981f, 0.00365565f, 0.0068224f, 0.00246964f, 0.00329656f, 0.00298914f, 0.00371037f, 0.00340648f, 0.00345673f, 0.00294667f, 0.00327144f, 0.00310133f, 0.00257881f, 0.00264717f, 0.00300934f, 0.00290593f, 0.00398175f, 0.00281895f, 0.00282148f, 0.00302795f, 0.00294969f, 0.00398161f, 0.00242523f, 0.00243096f, 0.00327921f, 0.00282341f, 0.00327651f, 0.00290222f, 0.0035748f, 0.00306259f, 0.00336269f, 0.00225381f, 0.00250177f, 0.00257944f, 0.00274867f, 0.00340438f, 0.00431876f, 0.00290287f, 0.00333999f, 0.00259941f, 0.00261161f, 0.00230882f, 0.00337862f, 0.00459509f, 0.00555459f, 0.0030146f, 0.00270091f, 0.00310337f, 0.00225883f, 0.0030415f, 0.00359216f, 0.00261175f, 0.00248328f, 0.00324464f, 0.0032615f, 0.0032527f, 0.00406737f, 0.0040079f, 0.00271975f, 0.00546622f, 0.00253995f, 0.00367239f, 0.002374f, 0.00318432f, 0.00243586f, 0.00424513f, 0.00311319f, 0.00240263f, 0.00283894f, 0.00374619f, 0.00267731f, 0.00264169f, 0.0026898f, 0.00318703f, 0.00311912f, 0.0024224f, 0.00251594f, 0.00271981f, 0.00294188f, 0.00227179f, 0.00320869f, 0.00251155f, 0.00251081f, 0.00347247f, 0.00283632f, 0.00502733f, 0.0031137f, 0.00323936f, 0.00308914f, 0.00408144f, 0.0029319f, 0.00273295f, 0.00310526f, 0.00323837f, 0.0038942f, 0.00246999f, 0.00237637f, 0.00229984f, 0.00263793f, 0.00284901f, 0.00282618f, 0.00250682f, 0.00351018f, 0.00282423f, 0.00299629f, 0.00308937f, 0.00421895f, 0.00246623f, 0.00347782f, 0.00389483f, 0.00252153f, 0.00294141f, 0.00303798f, 0.004346f, 0.00199829f, 0.00301957f, 0.00315142f, 0.00263862f, 0.0027851f, 0.00230471f, 0.00278596f, 0.00383318f, 0.00304506f, 0.00315089f, 0.00252146f, 0.00343029f, 0.00264387f, 0.00455384f, 0.00316472f, 0.00462454f, 0.00252908f, 0.0019979f, 0.00330928f, 0.00222524f, 0.00480846f, 0.00217446f, 0.00376898f, 0.00337642f, 0.00316227f, 0.00294989f, 0.0023247f, 0.00343395f, 0.0033676f, 0.00354676f, 0.00303935f, 0.00191702f, 0.00370648f, 0.00282635f, 0.00294402f, 0.00273588f, 0.00273842f, 0.00183534f, 0.00455296f, 0.00257526f, 0.00436897f, 0.00210789f, 0.00371009f, 0.00270364f, 0.00305698f, 0.00184653f, 0.00307899f, 0.00267627f, 0.00333944f, 0.00233226f, 0.00244942f, 0.00269532f, 0.00203606f, 0.00444314f, 0.00514836f, 0.00409876f, 0.00319261f, 0.00260774f, 0.00329052f, 0.0032071f, 0.00233723f, 0.00256813f, 0.00188663f, 0.00252582f, 0.00351524f, 0.00418184f, 0.00163665f, 0.00292899f, 0.00218399f, 0.00206384f, 0.00311626f, 0.00241736f, 0.00310702f, 0.00489896f, 0.00358832f, 0.00301027f, 0.00294921f, 0.0051806f, 0.00420254f, 0.0025975f, 0.0024393f, 0.00132634f, 0.00419578f, 0.00469742f, 0.00514778f, 0.00217913f, 0.00409589f, 0.00206649f, 0.00479784f, 0.00291845f, 0.00684826f, 0.00213998f, 0.00307374f, 0.00383708f, 0.00294855f, 0.0030562f, 0.00246346f, 0.00234672f, 0.0025593f, 0.00379108f, 0.0022242f, 0.00277545f, 0.00288267f, 0.00251649f, 0.00294842f, 0.00292701f, 0.00541073f, 0.00420734f, 0.00286824f, 0.00264917f, 0.00316763f, 0.00283156f, 0.00292073f, 0.00236469f, 0.00482471f, 0.00219158f, 0.00336309f, 0.00329975f, 0.00320507f, 0.00232418f, 0.00213942f, 0.00532797f, 0.00159392f, 0.00295401f, 0.00331498f, 0.00268342f, 0.00150916f, 0.00249067f, 0.00191994f, 0.00305538f, 0.00198299f, 0.00228165f, 0.00569961f, 0.00447074f, 0.00320584f, 0.00338393f, 0.00277526f, 0.00170751f, 0.00210918f, 0.00200504f, 0.00338273f, 0.00296406f, 0.00483309f, 0.00243572f, 0.00304772f, 0.00224532f, 0.0045864f, 0.00220693f, 0.00346423f, 0.00185632f, 0.00251731f, 0.00335448f, 0.00238159f, 0.00227708f, 0.00203541f, 0.0027189f, 0.00229133f, 0.00303809f, 0.00174215f, 0.00215555f, 0.00279588f, 0.00300891f, 0.00357331f, 0.00270416f, 0.00434723f, 0.00196173f, 0.00256662f, 0.002115f, 0.00356698f, 0.00511057f, 0.00357263f, 0.00584621f, 0.0024512f, 0.00212259f, 0.00248076f, 0.00319046f, 0.00243201f, 0.00353438f, 0.00328249f, 0.00288317f, 0.00217709f, 0.00281392f, 0.00305836f, 0.00231774f, 0.00531549f, 0.00273152f, 0.00293824f, 0.00243527f, 0.00207889f, 0.00243118f, 0.0020385f, 0.00369753f, 0.00377602f, 0.00237727f, 0.00233116f, 0.00219936f, 0.00285126f, 0.00461677f, 0.00266847f, 0.00251877f, 0.00228004f, 0.00235901f, 0.00223147f, 0.00266656f, 0.00186372f, 0.00395705f, 0.00185698f, 0.00439586f, 0.00301402f, 0.00488657f, 0.00224174f, 0.00186914f, 0.00311469f, 0.00242254f, 0.00197027f, 0.00524984f, 0.00269776f, 0.00288696f, 0.00354441f, 0.00321421f, 0.00322875f, 0.00451106f, 0.00336482f, 0.00249554f, 0.00210265f, 0.0046186f, 0.00223538f, 0.00334631f, 0.00279629f, 0.00285226f, 0.0045603f, 0.00310353f, 0.00178935f, 0.00175069f, 0.0074928f, 0.00260554f, 0.00213864f, 0.00385843f, 0.00316544f, 0.00244362f, 0.00180137f, 0.00231867f, 0.00221564f, 0.00282082f, 0.00301087f, 0.00508942f, 0.00235516f, 0.00188653f, 0.00227215f, 0.00216955f, 0.00333562f, 0.00377001f, 0.0043557f, 0.0028522f, 0.00303524f, 0.00216228f, 0.00281499f, 0.00220639f, 0.0023762f, 0.00250993f, 0.00406805f, 0.00186841f, 0.00247802f, 0.00455578f, 0.00197011f, 0.00169491f, 0.00257859f], rhs_zero_points=[137, 133, 92, 113, 136, 132, 116, 148, 130, 130, 116, 108, 144, 120, 129, 120, 115, 125, 106, 147, 123, 122, 130, 111, 123, 126, 124, 127, 138, 130, 110, 138, 103, 146, 127, 98, 126, 137, 110, 129, 126, 100, 123, 106, 116, 138, 97, 149, 142, 141, 94, 116, 105, 121, 99, 125, 113, 138, 108, 118, 117, 117, 97, 108, 133, 154, 126, 108, 118, 130, 104, 118, 119, 129, 106, 141, 114, 108, 125, 115, 137, 134, 125, 135, 129, 108, 157, 108, 123, 141, 104, 127, 83, 130, 158, 112, 138, 102, 127, 145, 145, 133, 124, 117, 122, 97, 149, 121, 120, 150, 104, 94, 134, 123, 135, 147, 144, 131, 111, 154, 137, 145, 134, 116, 134, 142, 107, 132, 128, 113, 120, 139, 117, 116, 150, 157, 114, 107, 119, 116, 131, 100, 103, 110, 128, 139, 134, 123, 122, 136, 92, 132, 123, 148, 121, 130, 141, 70, 117, 141, 97, 114, 131, 139, 117, 133, 125, 154, 136, 138, 125, 115, 131, 115, 110, 116, 96, 133, 126, 145, 126, 109, 126, 109, 124, 128, 140, 128, 108, 126, 117, 127, 122, 108, 134, 117, 101, 123, 119, 130, 123, 122, 119, 128, 143, 156, 117, 120, 123, 133, 133, 107, 120, 130, 124, 109, 134, 92, 129, 137, 134, 133, 96, 121, 94, 133, 137, 113, 128, 126, 129, 119, 126, 123, 103, 128, 133, 123, 129, 118, 112, 108, 135, 117, 98, 136, 117, 154, 125, 134, 117, 120, 105, 133, 142, 120, 108, 148, 103, 137, 134, 110, 132, 119, 121, 93, 102, 128, 77, 125, 115, 100, 132, 145, 105, 129, 107, 128, 145, 142, 118, 137, 110, 165, 117, 88, 112, 110, 142, 119, 115, 140, 123, 144, 133, 121, 114, 106, 96, 108, 89, 127, 163, 123, 120, 139, 104, 133, 108, 105, 102, 99, 121, 112, 152, 137, 124, 105, 105, 96, 102, 121, 142, 94, 140, 106, 127, 103, 92, 67, 161, 123, 127, 93, 90, 141, 140, 100, 114, 129, 113, 143, 104, 131, 138, 118, 135, 107, 109, 115, 117, 146, 87, 160, 122, 107, 131, 104, 107, 130, 114, 128, 111, 127, 125, 111, 119, 117, 104, 165, 101, 136, 114, 110, 117, 123, 123, 174, 129, 101, 143, 122, 107, 145, 110, 112, 129, 86, 126, 140, 90, 112, 108, 116, 115, 117, 110, 169, 122, 130, 95, 115, 118, 112, 147, 119, 149, 120, 103, 114, 115, 120, 108, 134, 90, 120, 91, 128, 152, 133, 94, 144, 87, 124, 117, 133, 156, 117, 114, 130, 142, 143, 109, 109, 104, 119, 71, 91, 127, 124, 161, 100, 96, 132, 105, 112, 128, 149, 142, 107, 150, 136, 112, 124, 119, 107, 137, 114, 145, 124, 108, 94, 100, 173, 79, 101, 117, 100, 116, 110, 165, 123, 71, 96, 130, 59, 120, 119, 109, 118, 109, 99, 90, 153, 109, 121, 146, 121, 150, 137, 122, 123, 129, 119, 71, 110, 100, 95, 111, 106, 112, 115, 135, 133, 95, 121, 127, 114, 121, 122, 126, 141], scales=[0.0350944f], zero_points=[136]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %611 = %610(%609, meta[relay.Constant][516] /* ty=Tensor[(512, 768, 1, 1), uint8] */, meta[relay.Constant][517] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0169053f], lhs_zero_points=[16], rhs_scales=[0.00268022f, 0.00264457f, 0.00348275f, 0.00232957f, 0.00280255f, 0.0025826f, 0.00226126f, 0.00236112f, 0.00360535f, 0.00251193f, 0.00313507f, 0.00301562f, 0.00261471f, 0.0026853f, 0.00290986f, 0.00315133f, 0.00245982f, 0.00413456f, 0.0034748f, 0.00253975f, 0.003451f, 0.0038957f, 0.00323013f, 0.00273538f, 0.00336492f, 0.00236893f, 0.00238071f, 0.00237757f, 0.00232581f, 0.00306943f, 0.00336596f, 0.00283347f, 0.00546291f, 0.00316467f, 0.00267426f, 0.00319276f, 0.00271617f, 0.00223735f, 0.00329297f, 0.00278566f, 0.0025947f, 0.00714615f, 0.00262131f, 0.00307143f, 0.00509034f, 0.00270432f, 0.00400932f, 0.00296303f, 0.00248779f, 0.00293852f, 0.00459629f, 0.00323299f, 0.00345603f, 0.00316529f, 0.00366715f, 0.00295394f, 0.00293067f, 0.00269096f, 0.00298026f, 0.00260609f, 0.00283768f, 0.00261604f, 0.00440899f, 0.00378717f, 0.00300619f, 0.00271028f, 0.00275573f, 0.00249032f, 0.00250616f, 0.00319704f, 0.00362016f, 0.00320689f, 0.0034242f, 0.00337789f, 0.00287399f, 0.00241328f, 0.00240473f, 0.00322934f, 0.00314303f, 0.00285261f, 0.00254829f, 0.00323704f, 0.00451438f, 0.00285353f, 0.00285495f, 0.0033155f, 0.00305181f, 0.00448801f, 0.00314684f, 0.00241649f, 0.00345463f, 0.00278394f, 0.00322437f, 0.00269612f, 0.00267764f, 0.00266966f, 0.00343654f, 0.00263997f, 0.00289853f, 0.003128f, 0.00297029f, 0.00329825f, 0.00291829f, 0.0028751f, 0.00257943f, 0.00242356f, 0.00337307f, 0.00253273f, 0.00265704f, 0.00278811f, 0.00358934f, 0.00434842f, 0.00284264f, 0.00278592f, 0.00348746f, 0.00299413f, 0.00224954f, 0.00253924f, 0.00603818f, 0.00381235f, 0.00285437f, 0.00349076f, 0.00309368f, 0.0034238f, 0.00314189f, 0.00386456f, 0.00282062f, 0.00277295f, 0.00262052f, 0.00276471f, 0.00309221f, 0.0027981f, 0.00365565f, 0.0068224f, 0.00246964f, 0.00329656f, 0.00298914f, 0.00371037f, 0.00340648f, 0.00345673f, 0.00294667f, 0.00327144f, 0.00310133f, 0.00257881f, 0.00264717f, 0.00300934f, 0.00290593f, 0.00398175f, 0.00281895f, 0.00282148f, 0.00302795f, 0.00294969f, 0.00398161f, 0.00242523f, 0.00243096f, 0.00327921f, 0.00282341f, 0.00327651f, 0.00290222f, 0.0035748f, 0.00306259f, 0.00336269f, 0.00225381f, 0.00250177f, 0.00257944f, 0.00274867f, 0.00340438f, 0.00431876f, 0.00290287f, 0.00333999f, 0.00259941f, 0.00261161f, 0.00230882f, 0.00337862f, 0.00459509f, 0.00555459f, 0.0030146f, 0.00270091f, 0.00310337f, 0.00225883f, 0.0030415f, 0.00359216f, 0.00261175f, 0.00248328f, 0.00324464f, 0.0032615f, 0.0032527f, 0.00406737f, 0.0040079f, 0.00271975f, 0.00546622f, 0.00253995f, 0.00367239f, 0.002374f, 0.00318432f, 0.00243586f, 0.00424513f, 0.00311319f, 0.00240263f, 0.00283894f, 0.00374619f, 0.00267731f, 0.00264169f, 0.0026898f, 0.00318703f, 0.00311912f, 0.0024224f, 0.00251594f, 0.00271981f, 0.00294188f, 0.00227179f, 0.00320869f, 0.00251155f, 0.00251081f, 0.00347247f, 0.00283632f, 0.00502733f, 0.0031137f, 0.00323936f, 0.00308914f, 0.00408144f, 0.0029319f, 0.00273295f, 0.00310526f, 0.00323837f, 0.0038942f, 0.00246999f, 0.00237637f, 0.00229984f, 0.00263793f, 0.00284901f, 0.00282618f, 0.00250682f, 0.00351018f, 0.00282423f, 0.00299629f, 0.00308937f, 0.00421895f, 0.00246623f, 0.00347782f, 0.00389483f, 0.00252153f, 0.00294141f, 0.00303798f, 0.004346f, 0.00199829f, 0.00301957f, 0.00315142f, 0.00263862f, 0.0027851f, 0.00230471f, 0.00278596f, 0.00383318f, 0.00304506f, 0.00315089f, 0.00252146f, 0.00343029f, 0.00264387f, 0.00455384f, 0.00316472f, 0.00462454f, 0.00252908f, 0.0019979f, 0.00330928f, 0.00222524f, 0.00480846f, 0.00217446f, 0.00376898f, 0.00337642f, 0.00316227f, 0.00294989f, 0.0023247f, 0.00343395f, 0.0033676f, 0.00354676f, 0.00303935f, 0.00191702f, 0.00370648f, 0.00282635f, 0.00294402f, 0.00273588f, 0.00273842f, 0.00183534f, 0.00455296f, 0.00257526f, 0.00436897f, 0.00210789f, 0.00371009f, 0.00270364f, 0.00305698f, 0.00184653f, 0.00307899f, 0.00267627f, 0.00333944f, 0.00233226f, 0.00244942f, 0.00269532f, 0.00203606f, 0.00444314f, 0.00514836f, 0.00409876f, 0.00319261f, 0.00260774f, 0.00329052f, 0.0032071f, 0.00233723f, 0.00256813f, 0.00188663f, 0.00252582f, 0.00351524f, 0.00418184f, 0.00163665f, 0.00292899f, 0.00218399f, 0.00206384f, 0.00311626f, 0.00241736f, 0.00310702f, 0.00489896f, 0.00358832f, 0.00301027f, 0.00294921f, 0.0051806f, 0.00420254f, 0.0025975f, 0.0024393f, 0.00132634f, 0.00419578f, 0.00469742f, 0.00514778f, 0.00217913f, 0.00409589f, 0.00206649f, 0.00479784f, 0.00291845f, 0.00684826f, 0.00213998f, 0.00307374f, 0.00383708f, 0.00294855f, 0.0030562f, 0.00246346f, 0.00234672f, 0.0025593f, 0.00379108f, 0.0022242f, 0.00277545f, 0.00288267f, 0.00251649f, 0.00294842f, 0.00292701f, 0.00541073f, 0.00420734f, 0.00286824f, 0.00264917f, 0.00316763f, 0.00283156f, 0.00292073f, 0.00236469f, 0.00482471f, 0.00219158f, 0.00336309f, 0.00329975f, 0.00320507f, 0.00232418f, 0.00213942f, 0.00532797f, 0.00159392f, 0.00295401f, 0.00331498f, 0.00268342f, 0.00150916f, 0.00249067f, 0.00191994f, 0.00305538f, 0.00198299f, 0.00228165f, 0.00569961f, 0.00447074f, 0.00320584f, 0.00338393f, 0.00277526f, 0.00170751f, 0.00210918f, 0.00200504f, 0.00338273f, 0.00296406f, 0.00483309f, 0.00243572f, 0.00304772f, 0.00224532f, 0.0045864f, 0.00220693f, 0.00346423f, 0.00185632f, 0.00251731f, 0.00335448f, 0.00238159f, 0.00227708f, 0.00203541f, 0.0027189f, 0.00229133f, 0.00303809f, 0.00174215f, 0.00215555f, 0.00279588f, 0.00300891f, 0.00357331f, 0.00270416f, 0.00434723f, 0.00196173f, 0.00256662f, 0.002115f, 0.00356698f, 0.00511057f, 0.00357263f, 0.00584621f, 0.0024512f, 0.00212259f, 0.00248076f, 0.00319046f, 0.00243201f, 0.00353438f, 0.00328249f, 0.00288317f, 0.00217709f, 0.00281392f, 0.00305836f, 0.00231774f, 0.00531549f, 0.00273152f, 0.00293824f, 0.00243527f, 0.00207889f, 0.00243118f, 0.0020385f, 0.00369753f, 0.00377602f, 0.00237727f, 0.00233116f, 0.00219936f, 0.00285126f, 0.00461677f, 0.00266847f, 0.00251877f, 0.00228004f, 0.00235901f, 0.00223147f, 0.00266656f, 0.00186372f, 0.00395705f, 0.00185698f, 0.00439586f, 0.00301402f, 0.00488657f, 0.00224174f, 0.00186914f, 0.00311469f, 0.00242254f, 0.00197027f, 0.00524984f, 0.00269776f, 0.00288696f, 0.00354441f, 0.00321421f, 0.00322875f, 0.00451106f, 0.00336482f, 0.00249554f, 0.00210265f, 0.0046186f, 0.00223538f, 0.00334631f, 0.00279629f, 0.00285226f, 0.0045603f, 0.00310353f, 0.00178935f, 0.00175069f, 0.0074928f, 0.00260554f, 0.00213864f, 0.00385843f, 0.00316544f, 0.00244362f, 0.00180137f, 0.00231867f, 0.00221564f, 0.00282082f, 0.00301087f, 0.00508942f, 0.00235516f, 0.00188653f, 0.00227215f, 0.00216955f, 0.00333562f, 0.00377001f, 0.0043557f, 0.0028522f, 0.00303524f, 0.00216228f, 0.00281499f, 0.00220639f, 0.0023762f, 0.00250993f, 0.00406805f, 0.00186841f, 0.00247802f, 0.00455578f, 0.00197011f, 0.00169491f, 0.00257859f], rhs_zero_points=[137, 133, 92, 113, 136, 132, 116, 148, 130, 130, 116, 108, 144, 120, 129, 120, 115, 125, 106, 147, 123, 122, 130, 111, 123, 126, 124, 127, 138, 130, 110, 138, 103, 146, 127, 98, 126, 137, 110, 129, 126, 100, 123, 106, 116, 138, 97, 149, 142, 141, 94, 116, 105, 121, 99, 125, 113, 138, 108, 118, 117, 117, 97, 108, 133, 154, 126, 108, 118, 130, 104, 118, 119, 129, 106, 141, 114, 108, 125, 115, 137, 134, 125, 135, 129, 108, 157, 108, 123, 141, 104, 127, 83, 130, 158, 112, 138, 102, 127, 145, 145, 133, 124, 117, 122, 97, 149, 121, 120, 150, 104, 94, 134, 123, 135, 147, 144, 131, 111, 154, 137, 145, 134, 116, 134, 142, 107, 132, 128, 113, 120, 139, 117, 116, 150, 157, 114, 107, 119, 116, 131, 100, 103, 110, 128, 139, 134, 123, 122, 136, 92, 132, 123, 148, 121, 130, 141, 70, 117, 141, 97, 114, 131, 139, 117, 133, 125, 154, 136, 138, 125, 115, 131, 115, 110, 116, 96, 133, 126, 145, 126, 109, 126, 109, 124, 128, 140, 128, 108, 126, 117, 127, 122, 108, 134, 117, 101, 123, 119, 130, 123, 122, 119, 128, 143, 156, 117, 120, 123, 133, 133, 107, 120, 130, 124, 109, 134, 92, 129, 137, 134, 133, 96, 121, 94, 133, 137, 113, 128, 126, 129, 119, 126, 123, 103, 128, 133, 123, 129, 118, 112, 108, 135, 117, 98, 136, 117, 154, 125, 134, 117, 120, 105, 133, 142, 120, 108, 148, 103, 137, 134, 110, 132, 119, 121, 93, 102, 128, 77, 125, 115, 100, 132, 145, 105, 129, 107, 128, 145, 142, 118, 137, 110, 165, 117, 88, 112, 110, 142, 119, 115, 140, 123, 144, 133, 121, 114, 106, 96, 108, 89, 127, 163, 123, 120, 139, 104, 133, 108, 105, 102, 99, 121, 112, 152, 137, 124, 105, 105, 96, 102, 121, 142, 94, 140, 106, 127, 103, 92, 67, 161, 123, 127, 93, 90, 141, 140, 100, 114, 129, 113, 143, 104, 131, 138, 118, 135, 107, 109, 115, 117, 146, 87, 160, 122, 107, 131, 104, 107, 130, 114, 128, 111, 127, 125, 111, 119, 117, 104, 165, 101, 136, 114, 110, 117, 123, 123, 174, 129, 101, 143, 122, 107, 145, 110, 112, 129, 86, 126, 140, 90, 112, 108, 116, 115, 117, 110, 169, 122, 130, 95, 115, 118, 112, 147, 119, 149, 120, 103, 114, 115, 120, 108, 134, 90, 120, 91, 128, 152, 133, 94, 144, 87, 124, 117, 133, 156, 117, 114, 130, 142, 143, 109, 109, 104, 119, 71, 91, 127, 124, 161, 100, 96, 132, 105, 112, 128, 149, 142, 107, 150, 136, 112, 124, 119, 107, 137, 114, 145, 124, 108, 94, 100, 173, 79, 101, 117, 100, 116, 110, 165, 123, 71, 96, 130, 59, 120, 119, 109, 118, 109, 99, 90, 153, 109, 121, 146, 121, 150, 137, 122, 123, 129, 119, 71, 110, 100, 95, 111, 106, 112, 115, 135, 133, 95, 121, 127, 114, 121, 122, 126, 141], scales=[0.0350944f], zero_points=[136], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %612 = dl.dequantize(%611, input_scales=[0.0350944f], input_zero_points=[136]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %613 = sigmoid(%612) /* /model.22/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %614 = multiply(%612, %613) /* /model.22/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %615 = fn (%FunctionVar_1_04: Tensor[(1, 512, 20, 20), float32], PartitionedFromPattern="split_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ad9aec68)) -> (Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) {
    split(%FunctionVar_1_04, indices_or_sections=[256], axis=1) /* /model.22/Split_output_0 */ /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */
  };
  %616 = %615(%614, indices_or_sections=[256], axis=1, stage5=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=(Tensor[(1, 256, 20, 20), float32], Tensor[(1, 256, 20, 20), float32]) */;
  %619 = %616.1;
  %620 = dl.quantize(%619, output_scales=[0.0171635f], output_zero_points=[16]) /* fake_quant_224 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %621 = fn (%FunctionVar_16_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_16_1: Tensor[(128, 256, 1, 1), uint8], %FunctionVar_16_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adcde348)) -> Tensor[(1, 128, 20, 20), uint8] {
    %618 = (%FunctionVar_16_0, %FunctionVar_16_1, %FunctionVar_16_2, meta[relay.Constant][523] /* ty=Tensor[(128), float32] */, meta[relay.Constant][524] /* ty=Tensor[(128), int32] */, meta[relay.Constant][525] /* ty=Tensor[(128), int32] */, meta[relay.Constant][526] /* ty=Tensor[(128), int32] */, meta[relay.Constant][527] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%618, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00110474f, 0.00202393f, 0.00177859f, 0.00206446f, 0.001526f, 0.00128749f, 0.00171589f, 0.00139693f, 0.00145461f, 0.000815317f, 0.00161979f, 0.00191564f, 0.00153997f, 0.00105719f, 0.000872591f, 0.00105262f, 0.00144934f, 0.00141093f, 0.0014577f, 0.00159043f, 0.00180218f, 0.00139847f, 0.00156094f, 0.00178764f, 0.00159254f, 0.00204537f, 0.000906367f, 0.00161302f, 0.00131147f, 0.00101811f, 0.0015256f, 0.00267283f, 0.00157326f, 0.000985629f, 0.0013604f, 0.00161444f, 0.00141381f, 0.00169533f, 0.00149432f, 0.00168272f, 0.00151041f, 0.000936064f, 0.00161742f, 0.00166492f, 0.00229287f, 0.000792437f, 0.00219813f, 0.000943904f, 0.00147685f, 0.00109597f, 0.00100504f, 0.00136377f, 0.0011972f, 0.00195424f, 0.00149377f, 0.000981958f, 0.00149921f, 0.000944201f, 0.00167828f, 0.00116109f, 0.00182324f, 0.00177638f, 0.00148163f, 0.00136722f, 0.00130589f, 0.00161128f, 0.00120755f, 0.00137297f, 0.00138897f, 0.00153729f, 0.00145134f, 0.00129955f, 0.0017031f, 0.00164545f, 0.00107681f, 0.00196915f, 0.000814338f, 0.00189076f, 0.0014402f, 0.00124245f, 0.00146175f, 0.00139026f, 0.00111922f, 0.00142948f, 0.00143603f, 0.000968824f, 0.0018913f, 0.00188525f, 0.00190846f, 0.00183026f, 0.00125108f, 0.00125514f, 0.00117529f, 0.00119224f, 0.00145904f, 0.000760344f, 0.00168209f, 0.00133509f, 0.000941954f, 0.00167488f, 0.00144998f, 0.00111235f, 0.000641365f, 0.00118022f, 0.00132164f, 0.00152074f, 0.00155634f, 0.00150928f, 0.00115767f, 0.0016915f, 0.00223773f, 0.00104606f, 0.00151199f, 0.00110597f, 0.00159455f, 0.001622f, 0.00115049f, 0.00106353f, 0.00147034f, 0.00181983f, 0.000895857f, 0.00179132f, 0.00146311f, 0.00185533f, 0.00151017f, 0.00115838f, 0.00138015f, 0.00262807f], rhs_zero_points=[143, 113, 149, 140, 122, 115, 154, 127, 131, 116, 146, 131, 129, 165, 136, 138, 143, 148, 136, 153, 169, 110, 152, 157, 115, 132, 116, 150, 143, 166, 162, 100, 124, 135, 143, 112, 140, 121, 152, 131, 132, 120, 128, 172, 149, 124, 130, 149, 116, 174, 138, 155, 135, 120, 157, 119, 88, 141, 139, 136, 153, 163, 128, 111, 149, 149, 126, 142, 142, 143, 117, 116, 164, 108, 112, 138, 143, 158, 109, 122, 157, 149, 137, 135, 105, 112, 153, 152, 126, 77, 129, 97, 109, 147, 175, 139, 107, 139, 110, 145, 127, 150, 132, 126, 153, 131, 126, 126, 129, 114, 132, 153, 130, 120, 165, 164, 134, 131, 127, 144, 134, 136, 128, 147, 154, 126, 139, 154], scales=[0.0219459f], zero_points=[165]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %622 = %621(%620, meta[relay.Constant][528] /* ty=Tensor[(128, 256, 1, 1), uint8] */, meta[relay.Constant][529] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00110474f, 0.00202393f, 0.00177859f, 0.00206446f, 0.001526f, 0.00128749f, 0.00171589f, 0.00139693f, 0.00145461f, 0.000815317f, 0.00161979f, 0.00191564f, 0.00153997f, 0.00105719f, 0.000872591f, 0.00105262f, 0.00144934f, 0.00141093f, 0.0014577f, 0.00159043f, 0.00180218f, 0.00139847f, 0.00156094f, 0.00178764f, 0.00159254f, 0.00204537f, 0.000906367f, 0.00161302f, 0.00131147f, 0.00101811f, 0.0015256f, 0.00267283f, 0.00157326f, 0.000985629f, 0.0013604f, 0.00161444f, 0.00141381f, 0.00169533f, 0.00149432f, 0.00168272f, 0.00151041f, 0.000936064f, 0.00161742f, 0.00166492f, 0.00229287f, 0.000792437f, 0.00219813f, 0.000943904f, 0.00147685f, 0.00109597f, 0.00100504f, 0.00136377f, 0.0011972f, 0.00195424f, 0.00149377f, 0.000981958f, 0.00149921f, 0.000944201f, 0.00167828f, 0.00116109f, 0.00182324f, 0.00177638f, 0.00148163f, 0.00136722f, 0.00130589f, 0.00161128f, 0.00120755f, 0.00137297f, 0.00138897f, 0.00153729f, 0.00145134f, 0.00129955f, 0.0017031f, 0.00164545f, 0.00107681f, 0.00196915f, 0.000814338f, 0.00189076f, 0.0014402f, 0.00124245f, 0.00146175f, 0.00139026f, 0.00111922f, 0.00142948f, 0.00143603f, 0.000968824f, 0.0018913f, 0.00188525f, 0.00190846f, 0.00183026f, 0.00125108f, 0.00125514f, 0.00117529f, 0.00119224f, 0.00145904f, 0.000760344f, 0.00168209f, 0.00133509f, 0.000941954f, 0.00167488f, 0.00144998f, 0.00111235f, 0.000641365f, 0.00118022f, 0.00132164f, 0.00152074f, 0.00155634f, 0.00150928f, 0.00115767f, 0.0016915f, 0.00223773f, 0.00104606f, 0.00151199f, 0.00110597f, 0.00159455f, 0.001622f, 0.00115049f, 0.00106353f, 0.00147034f, 0.00181983f, 0.000895857f, 0.00179132f, 0.00146311f, 0.00185533f, 0.00151017f, 0.00115838f, 0.00138015f, 0.00262807f], rhs_zero_points=[143, 113, 149, 140, 122, 115, 154, 127, 131, 116, 146, 131, 129, 165, 136, 138, 143, 148, 136, 153, 169, 110, 152, 157, 115, 132, 116, 150, 143, 166, 162, 100, 124, 135, 143, 112, 140, 121, 152, 131, 132, 120, 128, 172, 149, 124, 130, 149, 116, 174, 138, 155, 135, 120, 157, 119, 88, 141, 139, 136, 153, 163, 128, 111, 149, 149, 126, 142, 142, 143, 117, 116, 164, 108, 112, 138, 143, 158, 109, 122, 157, 149, 137, 135, 105, 112, 153, 152, 126, 77, 129, 97, 109, 147, 175, 139, 107, 139, 110, 145, 127, 150, 132, 126, 153, 131, 126, 126, 129, 114, 132, 153, 130, 120, 165, 164, 134, 131, 127, 144, 134, 136, 128, 147, 154, 126, 139, 154], scales=[0.0219459f], zero_points=[165], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %623 = dl.dequantize(%622, input_scales=[0.0219459f], input_zero_points=[165]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %624 = sigmoid(%623) /* /model.22/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %627 = multiply(%623, %624) /* /model.22/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %628 = dl.quantize(%627, output_scales=[0.00784824f], output_zero_points=[35]) /* fake_quant_227 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %629 = fn (%FunctionVar_15_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_15_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_15_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf5f838)) -> Tensor[(1, 128, 20, 20), uint8] {
    %626 = (%FunctionVar_15_0, %FunctionVar_15_1, %FunctionVar_15_2, meta[relay.Constant][535] /* ty=Tensor[(128), float32] */, meta[relay.Constant][536] /* ty=Tensor[(128), int32] */, meta[relay.Constant][537] /* ty=Tensor[(128), int32] */, meta[relay.Constant][538] /* ty=Tensor[(128), int32] */, meta[relay.Constant][539] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%626, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00784824f], lhs_zero_points=[35], rhs_scales=[0.00679283f, 0.00345682f, 0.0054074f, 0.00587927f, 0.00265123f, 0.00251436f, 0.00486363f, 0.00170648f, 0.00429598f, 0.00448925f, 0.00308156f, 0.0032927f, 0.00444979f, 0.00806698f, 0.00789287f, 0.0035462f, 0.00277668f, 0.00351722f, 0.00467083f, 0.00625324f, 0.00782067f, 0.00421509f, 0.00411494f, 0.00548036f, 0.0085435f, 0.00387426f, 0.00410327f, 0.00723382f, 0.00698396f, 0.0060219f, 0.00401752f, 0.00529707f, 0.00577376f, 0.00381605f, 0.00449624f, 0.00703496f, 0.00370211f, 0.00517401f, 0.00252804f, 0.00437778f, 0.00611834f, 0.00330065f, 0.00600583f, 0.00520637f, 0.00568957f, 0.00473409f, 0.00658004f, 0.00282076f, 0.00317781f, 0.00664335f, 0.00458416f, 0.00452981f, 0.00518421f, 0.00364338f, 0.00514875f, 0.00573282f, 0.00614663f, 0.00508279f, 0.00601128f, 0.0063845f, 0.00499219f, 0.00326322f, 0.00398991f, 0.00643541f, 0.00642432f, 0.00723263f, 0.00379909f, 0.00315806f, 0.00465103f, 0.00488053f, 0.00145796f, 0.0042894f, 0.00300441f, 0.00222829f, 0.00306367f, 0.005035f, 0.00570875f, 0.00261589f, 0.00316851f, 0.00246413f, 0.0072122f, 0.00562657f, 0.00465172f, 0.00412007f, 0.00434902f, 0.00358684f, 0.00539761f, 0.00494927f, 0.00622682f, 0.00722745f, 0.00222297f, 0.00709453f, 0.00432675f, 0.00450434f, 0.00220241f, 0.00429577f, 0.00573741f, 0.00384949f, 0.00484875f, 0.00310118f, 0.00456751f, 0.00351911f, 0.00404473f, 0.0029105f, 0.00453493f, 0.00416354f, 0.00391673f, 0.00494055f, 0.00420821f, 0.00539838f, 0.00592138f, 0.00629159f, 0.00844889f, 0.00426834f, 0.00589287f, 0.00362492f, 0.00202024f, 0.00356206f, 0.00341036f, 0.0040994f, 0.00312753f, 0.00353271f, 0.00262645f, 0.00728603f, 0.00732254f, 0.00627045f, 0.00593539f, 0.00529996f], rhs_zero_points=[150, 136, 101, 166, 139, 128, 110, 134, 151, 115, 112, 146, 183, 143, 110, 131, 127, 125, 125, 164, 137, 144, 119, 160, 101, 140, 144, 120, 141, 118, 111, 128, 134, 136, 106, 149, 112, 130, 99, 105, 99, 139, 125, 101, 98, 132, 162, 132, 131, 102, 100, 91, 111, 177, 154, 85, 150, 154, 165, 135, 113, 115, 94, 147, 106, 137, 123, 127, 137, 147, 125, 146, 138, 132, 165, 141, 120, 131, 146, 100, 167, 114, 133, 143, 137, 119, 153, 149, 152, 143, 129, 138, 120, 101, 175, 136, 101, 154, 122, 130, 125, 111, 128, 121, 128, 137, 136, 159, 136, 102, 153, 131, 133, 136, 92, 135, 134, 119, 117, 117, 132, 142, 128, 130, 127, 144, 145, 108], scales=[0.0291839f], zero_points=[154]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %630 = %629(%628, meta[relay.Constant][540] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][541] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=35f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00784824f], lhs_zero_points=[35], rhs_scales=[0.00679283f, 0.00345682f, 0.0054074f, 0.00587927f, 0.00265123f, 0.00251436f, 0.00486363f, 0.00170648f, 0.00429598f, 0.00448925f, 0.00308156f, 0.0032927f, 0.00444979f, 0.00806698f, 0.00789287f, 0.0035462f, 0.00277668f, 0.00351722f, 0.00467083f, 0.00625324f, 0.00782067f, 0.00421509f, 0.00411494f, 0.00548036f, 0.0085435f, 0.00387426f, 0.00410327f, 0.00723382f, 0.00698396f, 0.0060219f, 0.00401752f, 0.00529707f, 0.00577376f, 0.00381605f, 0.00449624f, 0.00703496f, 0.00370211f, 0.00517401f, 0.00252804f, 0.00437778f, 0.00611834f, 0.00330065f, 0.00600583f, 0.00520637f, 0.00568957f, 0.00473409f, 0.00658004f, 0.00282076f, 0.00317781f, 0.00664335f, 0.00458416f, 0.00452981f, 0.00518421f, 0.00364338f, 0.00514875f, 0.00573282f, 0.00614663f, 0.00508279f, 0.00601128f, 0.0063845f, 0.00499219f, 0.00326322f, 0.00398991f, 0.00643541f, 0.00642432f, 0.00723263f, 0.00379909f, 0.00315806f, 0.00465103f, 0.00488053f, 0.00145796f, 0.0042894f, 0.00300441f, 0.00222829f, 0.00306367f, 0.005035f, 0.00570875f, 0.00261589f, 0.00316851f, 0.00246413f, 0.0072122f, 0.00562657f, 0.00465172f, 0.00412007f, 0.00434902f, 0.00358684f, 0.00539761f, 0.00494927f, 0.00622682f, 0.00722745f, 0.00222297f, 0.00709453f, 0.00432675f, 0.00450434f, 0.00220241f, 0.00429577f, 0.00573741f, 0.00384949f, 0.00484875f, 0.00310118f, 0.00456751f, 0.00351911f, 0.00404473f, 0.0029105f, 0.00453493f, 0.00416354f, 0.00391673f, 0.00494055f, 0.00420821f, 0.00539838f, 0.00592138f, 0.00629159f, 0.00844889f, 0.00426834f, 0.00589287f, 0.00362492f, 0.00202024f, 0.00356206f, 0.00341036f, 0.0040994f, 0.00312753f, 0.00353271f, 0.00262645f, 0.00728603f, 0.00732254f, 0.00627045f, 0.00593539f, 0.00529996f], rhs_zero_points=[150, 136, 101, 166, 139, 128, 110, 134, 151, 115, 112, 146, 183, 143, 110, 131, 127, 125, 125, 164, 137, 144, 119, 160, 101, 140, 144, 120, 141, 118, 111, 128, 134, 136, 106, 149, 112, 130, 99, 105, 99, 139, 125, 101, 98, 132, 162, 132, 131, 102, 100, 91, 111, 177, 154, 85, 150, 154, 165, 135, 113, 115, 94, 147, 106, 137, 123, 127, 137, 147, 125, 146, 138, 132, 165, 141, 120, 131, 146, 100, 167, 114, 133, 143, 137, 119, 153, 149, 152, 143, 129, 138, 120, 101, 175, 136, 101, 154, 122, 130, 125, 111, 128, 121, 128, 137, 136, 159, 136, 102, 153, 131, 133, 136, 92, 135, 134, 119, 117, 117, 132, 142, 128, 130, 127, 144, 145, 108], scales=[0.0291839f], zero_points=[154], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %631 = dl.dequantize(%630, input_scales=[0.0291839f], input_zero_points=[154]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %632 = sigmoid(%631) /* /model.22/m.0/m/m.0/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %633 = multiply(%631, %632) /* /model.22/m.0/m/m.0/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %634 = dl.quantize(%633, output_scales=[0.0120498f], output_zero_points=[23]) /* fake_quant_230 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %635 = fn (%FunctionVar_14_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_14_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_14_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaea8208)) -> Tensor[(1, 128, 20, 20), uint8] {
    %625 = (%FunctionVar_14_0, %FunctionVar_14_1, %FunctionVar_14_2, meta[relay.Constant][530] /* ty=Tensor[(128), float32] */, meta[relay.Constant][531] /* ty=Tensor[(128), int32] */, meta[relay.Constant][532] /* ty=Tensor[(128), int32] */, meta[relay.Constant][533] /* ty=Tensor[(128), int32] */, meta[relay.Constant][534] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%625, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0120498f], lhs_zero_points=[23], rhs_scales=[0.00229491f, 0.00393495f, 0.00142152f, 0.00144586f, 0.00181319f, 0.00258903f, 0.0027581f, 0.0039299f, 0.00467538f, 0.00218596f, 0.00215466f, 0.00301251f, 0.00513491f, 0.00385139f, 0.00340997f, 0.00376371f, 0.00426269f, 0.00318459f, 0.00145668f, 0.00420597f, 0.00332682f, 0.00215079f, 0.00328235f, 0.00324074f, 0.00159871f, 0.00285107f, 0.00173844f, 0.00625859f, 0.00166975f, 0.00243779f, 0.00336122f, 0.0047531f, 0.0026199f, 0.00244022f, 0.00347317f, 0.00397808f, 0.00312148f, 0.00124176f, 0.00153386f, 0.0022163f, 0.00341383f, 0.00379467f, 0.00339668f, 0.00121838f, 0.00368734f, 0.0030948f, 0.00181487f, 0.00295705f, 0.00157458f, 0.0016984f, 0.00362406f, 0.00378031f, 0.00315034f, 0.00283292f, 0.00272945f, 0.00265366f, 0.00202326f, 0.00377389f, 0.00453177f, 0.00169948f, 0.00250231f, 0.00355341f, 0.00217283f, 0.0019487f, 0.00639529f, 0.00413393f, 0.00225786f, 0.00276129f, 0.0040158f, 0.00330362f, 0.00180369f, 0.00261648f, 0.00455932f, 0.00571053f, 0.00187006f, 0.00207938f, 0.00222605f, 0.00141962f, 0.00317638f, 0.00220127f, 0.00378856f, 0.00338778f, 0.00258057f, 0.00482492f, 0.00264377f, 0.00324029f, 0.00528841f, 0.00358544f, 0.00252021f, 0.00205411f, 0.00218504f, 0.00176545f, 0.00344504f, 0.00218112f, 0.00204612f, 0.0020869f, 0.00516796f, 0.00208724f, 0.00183329f, 0.00192453f, 0.0014103f, 0.00283075f, 0.00224997f, 0.00247698f, 0.00177806f, 0.00244645f, 0.00394573f, 0.00125449f, 0.00407173f, 0.00280715f, 0.00255522f, 0.00213095f, 0.00201519f, 0.00309531f, 0.00465532f, 0.00218014f, 0.00305693f, 0.00179644f, 0.00284994f, 0.00236981f, 0.00314579f, 0.00155776f, 0.00471614f, 0.0012862f, 0.00169758f, 0.00440647f, 0.00333079f, 0.00158911f], rhs_zero_points=[169, 152, 125, 153, 140, 104, 80, 155, 121, 129, 133, 124, 150, 140, 132, 108, 145, 105, 113, 119, 98, 78, 139, 99, 136, 140, 140, 147, 123, 113, 99, 102, 142, 117, 151, 142, 100, 135, 138, 118, 84, 136, 140, 136, 146, 86, 157, 131, 128, 152, 118, 134, 135, 120, 123, 105, 98, 135, 127, 142, 81, 128, 91, 135, 140, 118, 185, 104, 168, 136, 110, 134, 137, 132, 127, 117, 123, 108, 158, 129, 142, 98, 137, 122, 154, 111, 140, 97, 116, 103, 147, 145, 110, 118, 129, 159, 129, 140, 112, 130, 131, 98, 96, 147, 130, 130, 134, 159, 107, 110, 136, 128, 110, 111, 124, 114, 131, 108, 131, 129, 120, 154, 127, 123, 139, 112, 123, 108], scales=[0.0242518f], zero_points=[138]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %636 = %635(%634, meta[relay.Constant][542] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][543] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=23f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0120498f], lhs_zero_points=[23], rhs_scales=[0.00229491f, 0.00393495f, 0.00142152f, 0.00144586f, 0.00181319f, 0.00258903f, 0.0027581f, 0.0039299f, 0.00467538f, 0.00218596f, 0.00215466f, 0.00301251f, 0.00513491f, 0.00385139f, 0.00340997f, 0.00376371f, 0.00426269f, 0.00318459f, 0.00145668f, 0.00420597f, 0.00332682f, 0.00215079f, 0.00328235f, 0.00324074f, 0.00159871f, 0.00285107f, 0.00173844f, 0.00625859f, 0.00166975f, 0.00243779f, 0.00336122f, 0.0047531f, 0.0026199f, 0.00244022f, 0.00347317f, 0.00397808f, 0.00312148f, 0.00124176f, 0.00153386f, 0.0022163f, 0.00341383f, 0.00379467f, 0.00339668f, 0.00121838f, 0.00368734f, 0.0030948f, 0.00181487f, 0.00295705f, 0.00157458f, 0.0016984f, 0.00362406f, 0.00378031f, 0.00315034f, 0.00283292f, 0.00272945f, 0.00265366f, 0.00202326f, 0.00377389f, 0.00453177f, 0.00169948f, 0.00250231f, 0.00355341f, 0.00217283f, 0.0019487f, 0.00639529f, 0.00413393f, 0.00225786f, 0.00276129f, 0.0040158f, 0.00330362f, 0.00180369f, 0.00261648f, 0.00455932f, 0.00571053f, 0.00187006f, 0.00207938f, 0.00222605f, 0.00141962f, 0.00317638f, 0.00220127f, 0.00378856f, 0.00338778f, 0.00258057f, 0.00482492f, 0.00264377f, 0.00324029f, 0.00528841f, 0.00358544f, 0.00252021f, 0.00205411f, 0.00218504f, 0.00176545f, 0.00344504f, 0.00218112f, 0.00204612f, 0.0020869f, 0.00516796f, 0.00208724f, 0.00183329f, 0.00192453f, 0.0014103f, 0.00283075f, 0.00224997f, 0.00247698f, 0.00177806f, 0.00244645f, 0.00394573f, 0.00125449f, 0.00407173f, 0.00280715f, 0.00255522f, 0.00213095f, 0.00201519f, 0.00309531f, 0.00465532f, 0.00218014f, 0.00305693f, 0.00179644f, 0.00284994f, 0.00236981f, 0.00314579f, 0.00155776f, 0.00471614f, 0.0012862f, 0.00169758f, 0.00440647f, 0.00333079f, 0.00158911f], rhs_zero_points=[169, 152, 125, 153, 140, 104, 80, 155, 121, 129, 133, 124, 150, 140, 132, 108, 145, 105, 113, 119, 98, 78, 139, 99, 136, 140, 140, 147, 123, 113, 99, 102, 142, 117, 151, 142, 100, 135, 138, 118, 84, 136, 140, 136, 146, 86, 157, 131, 128, 152, 118, 134, 135, 120, 123, 105, 98, 135, 127, 142, 81, 128, 91, 135, 140, 118, 185, 104, 168, 136, 110, 134, 137, 132, 127, 117, 123, 108, 158, 129, 142, 98, 137, 122, 154, 111, 140, 97, 116, 103, 147, 145, 110, 118, 129, 159, 129, 140, 112, 130, 131, 98, 96, 147, 130, 130, 134, 159, 107, 110, 136, 128, 110, 111, 124, 114, 131, 108, 131, 129, 120, 154, 127, 123, 139, 112, 123, 108], scales=[0.0242518f], zero_points=[138], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %637 = dl.dequantize(%636, input_scales=[0.0242518f], input_zero_points=[138]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %638 = sigmoid(%637) /* /model.22/m.0/m/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %639 = multiply(%637, %638) /* /model.22/m.0/m/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %642 = add(%627, %639) /* /model.22/m.0/m/m.0/Add_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %643 = dl.quantize(%642, output_scales=[0.0136222f], output_zero_points=[41]) /* fake_quant_233 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %644 = fn (%FunctionVar_13_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_13_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_13_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae0c978)) -> Tensor[(1, 128, 20, 20), uint8] {
    %641 = (%FunctionVar_13_0, %FunctionVar_13_1, %FunctionVar_13_2, meta[relay.Constant][549] /* ty=Tensor[(128), float32] */, meta[relay.Constant][550] /* ty=Tensor[(128), int32] */, meta[relay.Constant][551] /* ty=Tensor[(128), int32] */, meta[relay.Constant][552] /* ty=Tensor[(128), int32] */, meta[relay.Constant][553] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%641, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0136222f], lhs_zero_points=[41], rhs_scales=[0.00149996f, 0.00126464f, 0.00112353f, 0.000950512f, 0.00465047f, 0.0040435f, 0.00111782f, 0.00373411f, 0.00239463f, 0.00145455f, 0.00160068f, 0.00383049f, 0.00123669f, 0.0014454f, 0.00242662f, 0.00117621f, 0.00226852f, 0.000855671f, 0.00208373f, 0.00237792f, 0.00174651f, 0.00286432f, 0.00361908f, 0.00093326f, 0.00152991f, 0.0065645f, 0.00145064f, 0.00218729f, 0.00233113f, 0.00331407f, 0.00322799f, 0.00313236f, 0.00237667f, 0.0025894f, 0.00260479f, 0.00276596f, 0.00152824f, 0.00319665f, 0.00415494f, 0.00432518f, 0.00185129f, 0.000981889f, 0.00160356f, 0.00206668f, 0.00143222f, 0.00210417f, 0.00141655f, 0.00173373f, 0.00358164f, 0.00169017f, 0.0015421f, 0.00154377f, 0.00206287f, 0.00228153f, 0.00214803f, 0.00206604f, 0.0024985f, 0.00262794f, 0.00125171f, 0.000996729f, 0.00270455f, 0.00229676f, 0.00436309f, 0.00141599f, 0.00156619f, 0.00326901f, 0.00147462f, 0.00204999f, 0.0015874f, 0.00175274f, 0.00206662f, 0.00294731f, 0.00161149f, 0.0027538f, 0.00167934f, 0.00182512f, 0.00219772f, 0.00147757f, 0.00216432f, 0.00117582f, 0.00110603f, 0.00232552f, 0.00188282f, 0.00296402f, 0.00185991f, 0.00113526f, 0.00195369f, 0.00142915f, 0.0020555f, 0.00173366f, 0.00258908f, 0.00123704f, 0.00231549f, 0.00152506f, 0.00212968f, 0.00211362f, 0.00156574f, 0.00243583f, 0.00332394f, 0.00218233f, 0.00117313f, 0.00152425f, 0.00242774f, 0.00221401f, 0.00427198f, 0.0014283f, 0.00180533f, 0.00127317f, 0.00270613f, 0.00192465f, 0.00146237f, 0.0022722f, 0.00166844f, 0.00355016f, 0.00481759f, 0.00242599f, 0.00318103f, 0.000980281f, 0.000602253f, 0.000922967f, 0.00146019f, 0.00237152f, 0.00159133f, 0.00235516f, 0.0012029f, 0.00196772f, 0.00132455f, 0.00270708f], rhs_zero_points=[160, 101, 166, 133, 84, 69, 153, 148, 97, 159, 142, 114, 112, 166, 113, 155, 125, 134, 171, 183, 133, 109, 71, 135, 158, 110, 160, 139, 139, 90, 110, 132, 113, 137, 180, 101, 141, 119, 115, 105, 150, 147, 118, 177, 106, 136, 134, 181, 79, 111, 97, 143, 168, 156, 185, 77, 79, 135, 139, 162, 133, 108, 109, 142, 85, 128, 107, 180, 158, 143, 103, 104, 144, 173, 162, 98, 144, 184, 116, 132, 134, 160, 92, 132, 95, 121, 103, 142, 116, 112, 87, 148, 132, 115, 142, 98, 159, 129, 129, 120, 119, 147, 130, 157, 114, 162, 109, 170, 128, 98, 171, 125, 152, 101, 107, 167, 121, 169, 142, 142, 101, 128, 104, 191, 153, 129, 125, 106], scales=[0.0244507f], zero_points=[159]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %645 = %644(%643, meta[relay.Constant][554] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][555] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=41f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0136222f], lhs_zero_points=[41], rhs_scales=[0.00149996f, 0.00126464f, 0.00112353f, 0.000950512f, 0.00465047f, 0.0040435f, 0.00111782f, 0.00373411f, 0.00239463f, 0.00145455f, 0.00160068f, 0.00383049f, 0.00123669f, 0.0014454f, 0.00242662f, 0.00117621f, 0.00226852f, 0.000855671f, 0.00208373f, 0.00237792f, 0.00174651f, 0.00286432f, 0.00361908f, 0.00093326f, 0.00152991f, 0.0065645f, 0.00145064f, 0.00218729f, 0.00233113f, 0.00331407f, 0.00322799f, 0.00313236f, 0.00237667f, 0.0025894f, 0.00260479f, 0.00276596f, 0.00152824f, 0.00319665f, 0.00415494f, 0.00432518f, 0.00185129f, 0.000981889f, 0.00160356f, 0.00206668f, 0.00143222f, 0.00210417f, 0.00141655f, 0.00173373f, 0.00358164f, 0.00169017f, 0.0015421f, 0.00154377f, 0.00206287f, 0.00228153f, 0.00214803f, 0.00206604f, 0.0024985f, 0.00262794f, 0.00125171f, 0.000996729f, 0.00270455f, 0.00229676f, 0.00436309f, 0.00141599f, 0.00156619f, 0.00326901f, 0.00147462f, 0.00204999f, 0.0015874f, 0.00175274f, 0.00206662f, 0.00294731f, 0.00161149f, 0.0027538f, 0.00167934f, 0.00182512f, 0.00219772f, 0.00147757f, 0.00216432f, 0.00117582f, 0.00110603f, 0.00232552f, 0.00188282f, 0.00296402f, 0.00185991f, 0.00113526f, 0.00195369f, 0.00142915f, 0.0020555f, 0.00173366f, 0.00258908f, 0.00123704f, 0.00231549f, 0.00152506f, 0.00212968f, 0.00211362f, 0.00156574f, 0.00243583f, 0.00332394f, 0.00218233f, 0.00117313f, 0.00152425f, 0.00242774f, 0.00221401f, 0.00427198f, 0.0014283f, 0.00180533f, 0.00127317f, 0.00270613f, 0.00192465f, 0.00146237f, 0.0022722f, 0.00166844f, 0.00355016f, 0.00481759f, 0.00242599f, 0.00318103f, 0.000980281f, 0.000602253f, 0.000922967f, 0.00146019f, 0.00237152f, 0.00159133f, 0.00235516f, 0.0012029f, 0.00196772f, 0.00132455f, 0.00270708f], rhs_zero_points=[160, 101, 166, 133, 84, 69, 153, 148, 97, 159, 142, 114, 112, 166, 113, 155, 125, 134, 171, 183, 133, 109, 71, 135, 158, 110, 160, 139, 139, 90, 110, 132, 113, 137, 180, 101, 141, 119, 115, 105, 150, 147, 118, 177, 106, 136, 134, 181, 79, 111, 97, 143, 168, 156, 185, 77, 79, 135, 139, 162, 133, 108, 109, 142, 85, 128, 107, 180, 158, 143, 103, 104, 144, 173, 162, 98, 144, 184, 116, 132, 134, 160, 92, 132, 95, 121, 103, 142, 116, 112, 87, 148, 132, 115, 142, 98, 159, 129, 129, 120, 119, 147, 130, 157, 114, 162, 109, 170, 128, 98, 171, 125, 152, 101, 107, 167, 121, 169, 142, 142, 101, 128, 104, 191, 153, 129, 125, 106], scales=[0.0244507f], zero_points=[159], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %646 = dl.dequantize(%645, input_scales=[0.0244507f], input_zero_points=[159]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %647 = sigmoid(%646) /* /model.22/m.0/m/m.1/cv1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %648 = multiply(%646, %647) /* /model.22/m.0/m/m.1/cv1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %649 = dl.quantize(%648, output_scales=[0.00945686f], output_zero_points=[29]) /* fake_quant_236 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %650 = fn (%FunctionVar_12_0: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_12_1: Tensor[(128, 128, 3, 3), uint8], %FunctionVar_12_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab09bc38)) -> Tensor[(1, 128, 20, 20), uint8] {
    %640 = (%FunctionVar_12_0, %FunctionVar_12_1, %FunctionVar_12_2, meta[relay.Constant][544] /* ty=Tensor[(128), float32] */, meta[relay.Constant][545] /* ty=Tensor[(128), int32] */, meta[relay.Constant][546] /* ty=Tensor[(128), int32] */, meta[relay.Constant][547] /* ty=Tensor[(128), int32] */, meta[relay.Constant][548] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%640, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00945686f], lhs_zero_points=[29], rhs_scales=[0.00449995f, 0.00480318f, 0.00349966f, 0.00423563f, 0.0031246f, 0.00740223f, 0.00691197f, 0.00307771f, 0.00410602f, 0.00242561f, 0.00336079f, 0.00598245f, 0.00554519f, 0.00434673f, 0.00454451f, 0.00357705f, 0.00426301f, 0.00460182f, 0.00376167f, 0.00520721f, 0.00338353f, 0.00291121f, 0.00469247f, 0.00313301f, 0.00281083f, 0.00387711f, 0.00258188f, 0.0065002f, 0.00390991f, 0.00539297f, 0.00298601f, 0.00393261f, 0.00548385f, 0.00441868f, 0.00354545f, 0.00636478f, 0.00296817f, 0.0041012f, 0.00401887f, 0.0072986f, 0.00426517f, 0.00583118f, 0.00443587f, 0.00383656f, 0.00325721f, 0.00589552f, 0.00288388f, 0.00259749f, 0.00272022f, 0.00405801f, 0.00529466f, 0.0047957f, 0.00218986f, 0.00419893f, 0.00364785f, 0.00495238f, 0.00238502f, 0.00548821f, 0.00444375f, 0.00299089f, 0.00646651f, 0.00423188f, 0.00300929f, 0.00279636f, 0.00547158f, 0.00458037f, 0.00224356f, 0.00460003f, 0.00535767f, 0.00727519f, 0.00217341f, 0.00471553f, 0.00448732f, 0.00506277f, 0.00345849f, 0.00363797f, 0.00182649f, 0.00285559f, 0.00307534f, 0.00395299f, 0.00667099f, 0.00485843f, 0.00384573f, 0.00335752f, 0.00384067f, 0.00743975f, 0.00261608f, 0.00697501f, 0.00764796f, 0.00333747f, 0.00341572f, 0.00235391f, 0.00434182f, 0.0027252f, 0.00217259f, 0.00305012f, 0.00571742f, 0.00291673f, 0.00541824f, 0.00182048f, 0.00413857f, 0.00427721f, 0.00307479f, 0.00426426f, 0.00579596f, 0.00428687f, 0.00373979f, 0.00586244f, 0.00403188f, 0.00235735f, 0.00559468f, 0.00549014f, 0.00378676f, 0.00379766f, 0.00539554f, 0.0023053f, 0.00234302f, 0.0025895f, 0.00400199f, 0.00315132f, 0.0059941f, 0.0057634f, 0.00565998f, 0.00497629f, 0.00261096f, 0.00296105f, 0.00388991f, 0.00513545f], rhs_zero_points=[148, 110, 139, 101, 122, 73, 138, 73, 132, 130, 123, 100, 79, 148, 125, 150, 100, 164, 126, 135, 156, 121, 129, 121, 102, 115, 127, 151, 110, 111, 133, 149, 158, 116, 98, 118, 119, 128, 83, 109, 116, 101, 122, 158, 117, 100, 93, 126, 124, 122, 109, 108, 130, 156, 154, 88, 115, 141, 142, 163, 117, 95, 92, 129, 87, 143, 143, 97, 114, 112, 168, 119, 112, 140, 129, 91, 140, 153, 130, 118, 112, 114, 138, 153, 129, 132, 97, 99, 107, 92, 104, 156, 150, 141, 117, 111, 94, 135, 139, 156, 112, 124, 123, 112, 96, 91, 103, 109, 147, 136, 87, 104, 94, 144, 101, 133, 147, 97, 157, 94, 157, 124, 92, 156, 103, 115, 119, 104], scales=[0.0437724f], zero_points=[135]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %651 = %650(%649, meta[relay.Constant][556] /* ty=Tensor[(128, 128, 3, 3), uint8] */, meta[relay.Constant][557] /* ty=Tensor[(128), int32] */, kernel_size=[3, 3], pad_value=29f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00945686f], lhs_zero_points=[29], rhs_scales=[0.00449995f, 0.00480318f, 0.00349966f, 0.00423563f, 0.0031246f, 0.00740223f, 0.00691197f, 0.00307771f, 0.00410602f, 0.00242561f, 0.00336079f, 0.00598245f, 0.00554519f, 0.00434673f, 0.00454451f, 0.00357705f, 0.00426301f, 0.00460182f, 0.00376167f, 0.00520721f, 0.00338353f, 0.00291121f, 0.00469247f, 0.00313301f, 0.00281083f, 0.00387711f, 0.00258188f, 0.0065002f, 0.00390991f, 0.00539297f, 0.00298601f, 0.00393261f, 0.00548385f, 0.00441868f, 0.00354545f, 0.00636478f, 0.00296817f, 0.0041012f, 0.00401887f, 0.0072986f, 0.00426517f, 0.00583118f, 0.00443587f, 0.00383656f, 0.00325721f, 0.00589552f, 0.00288388f, 0.00259749f, 0.00272022f, 0.00405801f, 0.00529466f, 0.0047957f, 0.00218986f, 0.00419893f, 0.00364785f, 0.00495238f, 0.00238502f, 0.00548821f, 0.00444375f, 0.00299089f, 0.00646651f, 0.00423188f, 0.00300929f, 0.00279636f, 0.00547158f, 0.00458037f, 0.00224356f, 0.00460003f, 0.00535767f, 0.00727519f, 0.00217341f, 0.00471553f, 0.00448732f, 0.00506277f, 0.00345849f, 0.00363797f, 0.00182649f, 0.00285559f, 0.00307534f, 0.00395299f, 0.00667099f, 0.00485843f, 0.00384573f, 0.00335752f, 0.00384067f, 0.00743975f, 0.00261608f, 0.00697501f, 0.00764796f, 0.00333747f, 0.00341572f, 0.00235391f, 0.00434182f, 0.0027252f, 0.00217259f, 0.00305012f, 0.00571742f, 0.00291673f, 0.00541824f, 0.00182048f, 0.00413857f, 0.00427721f, 0.00307479f, 0.00426426f, 0.00579596f, 0.00428687f, 0.00373979f, 0.00586244f, 0.00403188f, 0.00235735f, 0.00559468f, 0.00549014f, 0.00378676f, 0.00379766f, 0.00539554f, 0.0023053f, 0.00234302f, 0.0025895f, 0.00400199f, 0.00315132f, 0.0059941f, 0.0057634f, 0.00565998f, 0.00497629f, 0.00261096f, 0.00296105f, 0.00388991f, 0.00513545f], rhs_zero_points=[148, 110, 139, 101, 122, 73, 138, 73, 132, 130, 123, 100, 79, 148, 125, 150, 100, 164, 126, 135, 156, 121, 129, 121, 102, 115, 127, 151, 110, 111, 133, 149, 158, 116, 98, 118, 119, 128, 83, 109, 116, 101, 122, 158, 117, 100, 93, 126, 124, 122, 109, 108, 130, 156, 154, 88, 115, 141, 142, 163, 117, 95, 92, 129, 87, 143, 143, 97, 114, 112, 168, 119, 112, 140, 129, 91, 140, 153, 130, 118, 112, 114, 138, 153, 129, 132, 97, 99, 107, 92, 104, 156, 150, 141, 117, 111, 94, 135, 139, 156, 112, 124, 123, 112, 96, 91, 103, 109, 147, 136, 87, 104, 94, 144, 101, 133, 147, 97, 157, 94, 157, 124, 92, 156, 103, 115, 119, 104], scales=[0.0437724f], zero_points=[135], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %652 = dl.dequantize(%651, input_scales=[0.0437724f], input_zero_points=[135]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %653 = sigmoid(%652) /* /model.22/m.0/m/m.1/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %654 = multiply(%652, %653) /* /model.22/m.0/m/m.1/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %656 = fn (%FunctionVar_11_0: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_11_1: Tensor[(128, 256, 1, 1), uint8], %FunctionVar_11_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aadba888)) -> Tensor[(1, 128, 20, 20), uint8] {
    %655 = (%FunctionVar_11_0, %FunctionVar_11_1, %FunctionVar_11_2, meta[relay.Constant][558] /* ty=Tensor[(128), float32] */, meta[relay.Constant][559] /* ty=Tensor[(128), int32] */, meta[relay.Constant][560] /* ty=Tensor[(128), int32] */, meta[relay.Constant][561] /* ty=Tensor[(128), int32] */, meta[relay.Constant][562] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%655, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00232276f, 0.00161092f, 0.00404296f, 0.00218886f, 0.00351704f, 0.00428795f, 0.00391502f, 0.00355341f, 0.00172154f, 0.00307852f, 0.00548149f, 0.00243064f, 0.0023732f, 0.00404556f, 0.00193111f, 0.00293965f, 0.0029986f, 0.00168398f, 0.00270236f, 0.00398683f, 0.00279117f, 0.00241709f, 0.00224171f, 0.00158684f, 0.00355425f, 0.00170044f, 0.00211679f, 0.00219844f, 0.00224875f, 0.00213449f, 0.00229838f, 0.00202888f, 0.00269381f, 0.00208829f, 0.00251798f, 0.00298854f, 0.00176085f, 0.00202945f, 0.00289606f, 0.00190138f, 0.0023892f, 0.0019032f, 0.00169929f, 0.00237628f, 0.00282857f, 0.00211368f, 0.00246752f, 0.00172346f, 0.0029642f, 0.0026822f, 0.00249683f, 0.00187072f, 0.00228419f, 0.00203766f, 0.00269889f, 0.0018207f, 0.00226616f, 0.00209593f, 0.00196164f, 0.00170792f, 0.00437999f, 0.00283266f, 0.00311482f, 0.00251734f, 0.0034882f, 0.0042208f, 0.002552f, 0.0020747f, 0.00182107f, 0.00392194f, 0.00121144f, 0.00142329f, 0.0021157f, 0.00315565f, 0.00200857f, 0.00267486f, 0.00202565f, 0.00208256f, 0.00280405f, 0.00253868f, 0.00397743f, 0.00226421f, 0.00174454f, 0.00197842f, 0.0042166f, 0.0041564f, 0.00159691f, 0.00141941f, 0.00451525f, 0.00344626f, 0.0037016f, 0.0019942f, 0.00187031f, 0.00343177f, 0.00303256f, 0.00180294f, 0.00187072f, 0.00402913f, 0.00263106f, 0.00178887f, 0.00147022f, 0.00257152f, 0.0027707f, 0.00354209f, 0.00339349f, 0.00218803f, 0.00467664f, 0.00179911f, 0.00290151f, 0.00187924f, 0.00362553f, 0.00280374f, 0.00312378f, 0.00284949f, 0.00343961f, 0.00416324f, 0.00196001f, 0.00373309f, 0.00343001f, 0.00243668f, 0.00222474f, 0.0011871f, 0.00227566f, 0.00195525f, 0.00194049f, 0.00155716f, 0.00310997f, 0.00386803f], rhs_zero_points=[91, 108, 66, 84, 97, 173, 92, 135, 113, 133, 97, 138, 107, 178, 105, 134, 115, 120, 132, 79, 82, 108, 152, 138, 133, 118, 124, 82, 102, 145, 92, 110, 121, 89, 91, 159, 101, 113, 126, 114, 112, 128, 97, 144, 89, 141, 84, 115, 81, 132, 109, 135, 81, 105, 92, 89, 85, 111, 114, 105, 108, 161, 97, 75, 95, 72, 79, 86, 143, 84, 132, 105, 148, 85, 103, 97, 99, 77, 110, 118, 157, 114, 137, 103, 133, 132, 108, 140, 83, 72, 67, 103, 83, 100, 143, 126, 131, 60, 122, 89, 97, 140, 76, 142, 61, 124, 93, 109, 83, 101, 106, 151, 104, 110, 140, 156, 96, 79, 80, 89, 92, 127, 126, 85, 122, 113, 89, 103], scales=[0.0252601f], zero_points=[124]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %657 = %656(%620, meta[relay.Constant][563] /* ty=Tensor[(128, 256, 1, 1), uint8] */, meta[relay.Constant][564] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00232276f, 0.00161092f, 0.00404296f, 0.00218886f, 0.00351704f, 0.00428795f, 0.00391502f, 0.00355341f, 0.00172154f, 0.00307852f, 0.00548149f, 0.00243064f, 0.0023732f, 0.00404556f, 0.00193111f, 0.00293965f, 0.0029986f, 0.00168398f, 0.00270236f, 0.00398683f, 0.00279117f, 0.00241709f, 0.00224171f, 0.00158684f, 0.00355425f, 0.00170044f, 0.00211679f, 0.00219844f, 0.00224875f, 0.00213449f, 0.00229838f, 0.00202888f, 0.00269381f, 0.00208829f, 0.00251798f, 0.00298854f, 0.00176085f, 0.00202945f, 0.00289606f, 0.00190138f, 0.0023892f, 0.0019032f, 0.00169929f, 0.00237628f, 0.00282857f, 0.00211368f, 0.00246752f, 0.00172346f, 0.0029642f, 0.0026822f, 0.00249683f, 0.00187072f, 0.00228419f, 0.00203766f, 0.00269889f, 0.0018207f, 0.00226616f, 0.00209593f, 0.00196164f, 0.00170792f, 0.00437999f, 0.00283266f, 0.00311482f, 0.00251734f, 0.0034882f, 0.0042208f, 0.002552f, 0.0020747f, 0.00182107f, 0.00392194f, 0.00121144f, 0.00142329f, 0.0021157f, 0.00315565f, 0.00200857f, 0.00267486f, 0.00202565f, 0.00208256f, 0.00280405f, 0.00253868f, 0.00397743f, 0.00226421f, 0.00174454f, 0.00197842f, 0.0042166f, 0.0041564f, 0.00159691f, 0.00141941f, 0.00451525f, 0.00344626f, 0.0037016f, 0.0019942f, 0.00187031f, 0.00343177f, 0.00303256f, 0.00180294f, 0.00187072f, 0.00402913f, 0.00263106f, 0.00178887f, 0.00147022f, 0.00257152f, 0.0027707f, 0.00354209f, 0.00339349f, 0.00218803f, 0.00467664f, 0.00179911f, 0.00290151f, 0.00187924f, 0.00362553f, 0.00280374f, 0.00312378f, 0.00284949f, 0.00343961f, 0.00416324f, 0.00196001f, 0.00373309f, 0.00343001f, 0.00243668f, 0.00222474f, 0.0011871f, 0.00227566f, 0.00195525f, 0.00194049f, 0.00155716f, 0.00310997f, 0.00386803f], rhs_zero_points=[91, 108, 66, 84, 97, 173, 92, 135, 113, 133, 97, 138, 107, 178, 105, 134, 115, 120, 132, 79, 82, 108, 152, 138, 133, 118, 124, 82, 102, 145, 92, 110, 121, 89, 91, 159, 101, 113, 126, 114, 112, 128, 97, 144, 89, 141, 84, 115, 81, 132, 109, 135, 81, 105, 92, 89, 85, 111, 114, 105, 108, 161, 97, 75, 95, 72, 79, 86, 143, 84, 132, 105, 148, 85, 103, 97, 99, 77, 110, 118, 157, 114, 137, 103, 133, 132, 108, 140, 83, 72, 67, 103, 83, 100, 143, 126, 131, 60, 122, 89, 97, 140, 76, 142, 61, 124, 93, 109, 83, 101, 106, 151, 104, 110, 140, 156, 96, 79, 80, 89, 92, 127, 126, 85, 122, 113, 89, 103], scales=[0.0252601f], zero_points=[124], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %658 = dl.dequantize(%657, input_scales=[0.0252601f], input_zero_points=[124]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %659 = sigmoid(%658) /* /model.22/m.0/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %660 = add(%642, %654) /* /model.22/m.0/m/m.1/Add_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %661 = multiply(%658, %659) /* /model.22/m.0/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %662 = (%660, %661);
  %663 = concatenate(%662, axis=1) /* /model.22/m.0/Concat_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %664 = dl.quantize(%663, output_scales=[0.0220006f], output_zero_points=[38]) /* fake_quant_242 */ /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %665 = fn (%FunctionVar_10_01: Tensor[(1, 256, 20, 20), uint8], %FunctionVar_10_1: Tensor[(256, 256, 1, 1), uint8], %FunctionVar_10_2: Tensor[(256), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab0bdec8)) -> Tensor[(1, 256, 20, 20), uint8] {
    %617 = (%FunctionVar_10_01, %FunctionVar_10_1, %FunctionVar_10_2, meta[relay.Constant][518] /* ty=Tensor[(256), float32] */, meta[relay.Constant][519] /* ty=Tensor[(256), int32] */, meta[relay.Constant][520] /* ty=Tensor[(256), int32] */, meta[relay.Constant][521] /* ty=Tensor[(256), int32] */, meta[relay.Constant][522] /* ty=Tensor[(256), int32] */);
    dl.quantized_conv2d(%617, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0220006f], lhs_zero_points=[38], rhs_scales=[0.00256346f, 0.00156411f, 0.0025859f, 0.00300115f, 0.003528f, 0.00211001f, 0.00261261f, 0.00302314f, 0.00173642f, 0.00140452f, 0.00206943f, 0.00205363f, 0.00362327f, 0.00269924f, 0.00350395f, 0.00315688f, 0.00160106f, 0.00339686f, 0.00218491f, 0.00235536f, 0.00186359f, 0.00354075f, 0.0023745f, 0.00159573f, 0.00270981f, 0.0026019f, 0.00341801f, 0.00319162f, 0.00154789f, 0.00357103f, 0.00332738f, 0.0029415f, 0.00418846f, 0.00254899f, 0.00312331f, 0.00255845f, 0.00213659f, 0.00316559f, 0.00391805f, 0.00280438f, 0.00160456f, 0.00352335f, 0.00302919f, 0.00292173f, 0.00385616f, 0.00315894f, 0.00283271f, 0.00356198f, 0.00352621f, 0.00241584f, 0.0029434f, 0.00168881f, 0.00262688f, 0.00263462f, 0.00150245f, 0.00269966f, 0.00255283f, 0.003443f, 0.00277674f, 0.00335575f, 0.00261062f, 0.00321584f, 0.00425887f, 0.00177624f, 0.00310255f, 0.00315285f, 0.00333337f, 0.00172177f, 0.00152473f, 0.00379443f, 0.00255268f, 0.00345025f, 0.00285446f, 0.00190316f, 0.00164478f, 0.00259565f, 0.00363663f, 0.00289538f, 0.00233056f, 0.00192672f, 0.00365233f, 0.00223906f, 0.00530004f, 0.00214751f, 0.00230596f, 0.00299308f, 0.00359742f, 0.00298955f, 0.00253509f, 0.00199893f, 0.00326244f, 0.00183589f, 0.00318171f, 0.00259604f, 0.00229945f, 0.00325864f, 0.00302619f, 0.00367071f, 0.00393406f, 0.00363187f, 0.00578903f, 0.00344266f, 0.0022201f, 0.00287356f, 0.00297994f, 0.00210858f, 0.00223011f, 0.00219149f, 0.0031179f, 0.00398396f, 0.003582f, 0.00251112f, 0.00182959f, 0.00278243f, 0.00371866f, 0.00178346f, 0.00253934f, 0.00203213f, 0.00247954f, 0.0026994f, 0.00397538f, 0.00159328f, 0.00210485f, 0.00184908f, 0.00241317f, 0.00359134f, 0.00195884f, 0.00195682f, 0.00269825f, 0.00347301f, 0.00396322f, 0.00336046f, 0.002333f, 0.002205f, 0.00267025f, 0.00199515f, 0.00188617f, 0.00310584f, 0.00207114f, 0.00229396f, 0.00198904f, 0.00438804f, 0.00216396f, 0.00214324f, 0.00249508f, 0.00318191f, 0.00313721f, 0.00308864f, 0.0021253f, 0.00390847f, 0.00417912f, 0.00256878f, 0.00452207f, 0.00251533f, 0.00501224f, 0.00340397f, 0.00191355f, 0.00292475f, 0.00199719f, 0.00295483f, 0.00246255f, 0.00280966f, 0.00211733f, 0.00398076f, 0.00189884f, 0.00249426f, 0.0027055f, 0.00372464f, 0.00445204f, 0.00214292f, 0.00278796f, 0.00269145f, 0.00328732f, 0.00209201f, 0.00211421f, 0.00270349f, 0.00380131f, 0.00299134f, 0.00354914f, 0.00340105f, 0.00464914f, 0.00159812f, 0.00337744f, 0.00305791f, 0.00297987f, 0.00174998f, 0.00360192f, 0.00380817f, 0.0018635f, 0.00160512f, 0.00207136f, 0.00197497f, 0.00312589f, 0.00202882f, 0.00258618f, 0.00252645f, 0.00283698f, 0.00256461f, 0.00261303f, 0.00173003f, 0.00357878f, 0.00367939f, 0.00347641f, 0.00448807f, 0.0043473f, 0.00287447f, 0.00316907f, 0.00230288f, 0.00287849f, 0.00370731f, 0.00273606f, 0.00168619f, 0.00190639f, 0.00335301f, 0.002345f, 0.00327154f, 0.00173661f, 0.00318065f, 0.00300322f, 0.00187273f, 0.00196931f, 0.00275142f, 0.0025779f, 0.00305741f, 0.00381995f, 0.00246257f, 0.00371306f, 0.0035596f, 0.00422778f, 0.00229317f, 0.00419041f, 0.00238046f, 0.0031086f, 0.00283353f, 0.00239309f, 0.00296351f, 0.00166031f, 0.00409871f, 0.00335621f, 0.0033158f, 0.00164837f, 0.00331879f, 0.00274134f, 0.0024169f, 0.00200068f, 0.00205102f, 0.00264812f, 0.00323758f, 0.00269336f, 0.00593538f, 0.00444444f, 0.00350885f, 0.00267128f, 0.00305751f, 0.00257944f, 0.00458078f], rhs_zero_points=[88, 123, 112, 141, 88, 130, 169, 157, 140, 151, 147, 147, 133, 138, 145, 182, 145, 110, 117, 113, 160, 145, 105, 155, 145, 180, 130, 101, 165, 167, 113, 142, 187, 85, 123, 159, 164, 124, 162, 145, 136, 116, 98, 140, 125, 120, 115, 179, 118, 171, 185, 107, 183, 84, 161, 97, 149, 139, 93, 162, 184, 134, 203, 100, 173, 106, 137, 140, 163, 112, 139, 190, 111, 94, 145, 116, 145, 190, 84, 153, 153, 78, 182, 156, 146, 182, 159, 156, 148, 121, 162, 160, 110, 165, 155, 135, 191, 210, 132, 155, 197, 75, 130, 204, 164, 113, 140, 104, 180, 110, 116, 135, 148, 148, 133, 139, 69, 148, 119, 87, 129, 127, 175, 149, 147, 202, 168, 176, 99, 117, 102, 112, 129, 168, 140, 165, 170, 144, 190, 148, 93, 207, 180, 111, 142, 161, 121, 107, 115, 90, 166, 140, 152, 165, 195, 101, 187, 178, 136, 164, 165, 205, 172, 91, 137, 151, 103, 140, 201, 162, 168, 155, 142, 139, 158, 162, 85, 164, 202, 166, 113, 128, 170, 136, 112, 124, 156, 137, 152, 128, 105, 149, 112, 166, 136, 145, 105, 165, 96, 178, 146, 188, 124, 89, 131, 151, 209, 178, 104, 209, 143, 114, 131, 123, 111, 116, 138, 143, 195, 156, 123, 88, 80, 79, 106, 137, 152, 122, 115, 95, 133, 182, 136, 131, 166, 128, 149, 206, 113, 126, 152, 120, 201, 134, 140, 177, 181, 129, 138, 193, 188, 154, 110, 166, 186, 166], scales=[0.0329401f], zero_points=[132]) /* ty=Tensor[(1, 256, 20, 20), uint8] */
  };
  %666 = %665(%664, meta[relay.Constant][565] /* ty=Tensor[(256, 256, 1, 1), uint8] */, meta[relay.Constant][566] /* ty=Tensor[(256), int32] */, kernel_size=[1, 1], lhs_scales=[0.0220006f], lhs_zero_points=[38], rhs_scales=[0.00256346f, 0.00156411f, 0.0025859f, 0.00300115f, 0.003528f, 0.00211001f, 0.00261261f, 0.00302314f, 0.00173642f, 0.00140452f, 0.00206943f, 0.00205363f, 0.00362327f, 0.00269924f, 0.00350395f, 0.00315688f, 0.00160106f, 0.00339686f, 0.00218491f, 0.00235536f, 0.00186359f, 0.00354075f, 0.0023745f, 0.00159573f, 0.00270981f, 0.0026019f, 0.00341801f, 0.00319162f, 0.00154789f, 0.00357103f, 0.00332738f, 0.0029415f, 0.00418846f, 0.00254899f, 0.00312331f, 0.00255845f, 0.00213659f, 0.00316559f, 0.00391805f, 0.00280438f, 0.00160456f, 0.00352335f, 0.00302919f, 0.00292173f, 0.00385616f, 0.00315894f, 0.00283271f, 0.00356198f, 0.00352621f, 0.00241584f, 0.0029434f, 0.00168881f, 0.00262688f, 0.00263462f, 0.00150245f, 0.00269966f, 0.00255283f, 0.003443f, 0.00277674f, 0.00335575f, 0.00261062f, 0.00321584f, 0.00425887f, 0.00177624f, 0.00310255f, 0.00315285f, 0.00333337f, 0.00172177f, 0.00152473f, 0.00379443f, 0.00255268f, 0.00345025f, 0.00285446f, 0.00190316f, 0.00164478f, 0.00259565f, 0.00363663f, 0.00289538f, 0.00233056f, 0.00192672f, 0.00365233f, 0.00223906f, 0.00530004f, 0.00214751f, 0.00230596f, 0.00299308f, 0.00359742f, 0.00298955f, 0.00253509f, 0.00199893f, 0.00326244f, 0.00183589f, 0.00318171f, 0.00259604f, 0.00229945f, 0.00325864f, 0.00302619f, 0.00367071f, 0.00393406f, 0.00363187f, 0.00578903f, 0.00344266f, 0.0022201f, 0.00287356f, 0.00297994f, 0.00210858f, 0.00223011f, 0.00219149f, 0.0031179f, 0.00398396f, 0.003582f, 0.00251112f, 0.00182959f, 0.00278243f, 0.00371866f, 0.00178346f, 0.00253934f, 0.00203213f, 0.00247954f, 0.0026994f, 0.00397538f, 0.00159328f, 0.00210485f, 0.00184908f, 0.00241317f, 0.00359134f, 0.00195884f, 0.00195682f, 0.00269825f, 0.00347301f, 0.00396322f, 0.00336046f, 0.002333f, 0.002205f, 0.00267025f, 0.00199515f, 0.00188617f, 0.00310584f, 0.00207114f, 0.00229396f, 0.00198904f, 0.00438804f, 0.00216396f, 0.00214324f, 0.00249508f, 0.00318191f, 0.00313721f, 0.00308864f, 0.0021253f, 0.00390847f, 0.00417912f, 0.00256878f, 0.00452207f, 0.00251533f, 0.00501224f, 0.00340397f, 0.00191355f, 0.00292475f, 0.00199719f, 0.00295483f, 0.00246255f, 0.00280966f, 0.00211733f, 0.00398076f, 0.00189884f, 0.00249426f, 0.0027055f, 0.00372464f, 0.00445204f, 0.00214292f, 0.00278796f, 0.00269145f, 0.00328732f, 0.00209201f, 0.00211421f, 0.00270349f, 0.00380131f, 0.00299134f, 0.00354914f, 0.00340105f, 0.00464914f, 0.00159812f, 0.00337744f, 0.00305791f, 0.00297987f, 0.00174998f, 0.00360192f, 0.00380817f, 0.0018635f, 0.00160512f, 0.00207136f, 0.00197497f, 0.00312589f, 0.00202882f, 0.00258618f, 0.00252645f, 0.00283698f, 0.00256461f, 0.00261303f, 0.00173003f, 0.00357878f, 0.00367939f, 0.00347641f, 0.00448807f, 0.0043473f, 0.00287447f, 0.00316907f, 0.00230288f, 0.00287849f, 0.00370731f, 0.00273606f, 0.00168619f, 0.00190639f, 0.00335301f, 0.002345f, 0.00327154f, 0.00173661f, 0.00318065f, 0.00300322f, 0.00187273f, 0.00196931f, 0.00275142f, 0.0025779f, 0.00305741f, 0.00381995f, 0.00246257f, 0.00371306f, 0.0035596f, 0.00422778f, 0.00229317f, 0.00419041f, 0.00238046f, 0.0031086f, 0.00283353f, 0.00239309f, 0.00296351f, 0.00166031f, 0.00409871f, 0.00335621f, 0.0033158f, 0.00164837f, 0.00331879f, 0.00274134f, 0.0024169f, 0.00200068f, 0.00205102f, 0.00264812f, 0.00323758f, 0.00269336f, 0.00593538f, 0.00444444f, 0.00350885f, 0.00267128f, 0.00305751f, 0.00257944f, 0.00458078f], rhs_zero_points=[88, 123, 112, 141, 88, 130, 169, 157, 140, 151, 147, 147, 133, 138, 145, 182, 145, 110, 117, 113, 160, 145, 105, 155, 145, 180, 130, 101, 165, 167, 113, 142, 187, 85, 123, 159, 164, 124, 162, 145, 136, 116, 98, 140, 125, 120, 115, 179, 118, 171, 185, 107, 183, 84, 161, 97, 149, 139, 93, 162, 184, 134, 203, 100, 173, 106, 137, 140, 163, 112, 139, 190, 111, 94, 145, 116, 145, 190, 84, 153, 153, 78, 182, 156, 146, 182, 159, 156, 148, 121, 162, 160, 110, 165, 155, 135, 191, 210, 132, 155, 197, 75, 130, 204, 164, 113, 140, 104, 180, 110, 116, 135, 148, 148, 133, 139, 69, 148, 119, 87, 129, 127, 175, 149, 147, 202, 168, 176, 99, 117, 102, 112, 129, 168, 140, 165, 170, 144, 190, 148, 93, 207, 180, 111, 142, 161, 121, 107, 115, 90, 166, 140, 152, 165, 195, 101, 187, 178, 136, 164, 165, 205, 172, 91, 137, 151, 103, 140, 201, 162, 168, 155, 142, 139, 158, 162, 85, 164, 202, 166, 113, 128, 170, 136, 112, 124, 156, 137, 152, 128, 105, 149, 112, 166, 136, 145, 105, 165, 96, 178, 146, 188, 124, 89, 131, 151, 209, 178, 104, 209, 143, 114, 131, 123, 111, 116, 138, 143, 195, 156, 123, 88, 80, 79, 106, 137, 152, 122, 115, 95, 133, 182, 136, 131, 166, 128, 149, 206, 113, 126, 152, 120, 201, 134, 140, 177, 181, 129, 138, 193, 188, 154, 110, 166, 186, 166], scales=[0.0329401f], zero_points=[132], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 256, 20, 20), uint8] */;
  %667 = dl.dequantize(%666, input_scales=[0.0329401f], input_zero_points=[132]) /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %668 = sigmoid(%667) /* /model.22/m.0/cv3/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %669 = %616.0;
  %670 = multiply(%667, %668) /* /model.22/m.0/cv3/act/Mul_output_0 */ /* ty=Tensor[(1, 256, 20, 20), float32] */;
  %671 = (%669, %619, %670);
  %672 = concatenate(%671, axis=1) /* /model.22/Concat_output_0 */ /* ty=Tensor[(1, 768, 20, 20), float32] */;
  %673 = dl.quantize(%672, output_scales=[0.0171635f], output_zero_points=[16]) /* fake_quant_245 */ /* ty=Tensor[(1, 768, 20, 20), uint8] */;
  %674 = fn (%FunctionVar_9_01: Tensor[(1, 768, 20, 20), uint8], %FunctionVar_9_1: Tensor[(512, 768, 1, 1), uint8], %FunctionVar_9_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a958a358)) -> Tensor[(1, 512, 20, 20), uint8] {
    %599 = (%FunctionVar_9_01, %FunctionVar_9_1, %FunctionVar_9_2, meta[relay.Constant][499] /* ty=Tensor[(512), float32] */, meta[relay.Constant][500] /* ty=Tensor[(512), int32] */, meta[relay.Constant][501] /* ty=Tensor[(512), int32] */, meta[relay.Constant][502] /* ty=Tensor[(512), int32] */, meta[relay.Constant][503] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%599, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00123779f, 0.00130408f, 0.00107408f, 0.00175449f, 0.00362206f, 0.00121507f, 0.00138021f, 0.00127757f, 0.00194524f, 0.00213075f, 0.0011411f, 0.00137341f, 0.00282795f, 0.00298f, 0.00227742f, 0.0022579f, 0.00391189f, 0.00427712f, 0.00415762f, 0.00253315f, 0.00536257f, 0.00488024f, 0.00561855f, 0.00187392f, 0.00131462f, 0.00169304f, 0.00115837f, 0.00121414f, 0.002721f, 0.000941231f, 0.00122718f, 0.00430315f, 0.00138733f, 0.0047991f, 0.00249512f, 0.00349591f, 0.00214702f, 0.00383968f, 0.00116642f, 0.00606912f, 0.00451756f, 0.00366524f, 0.00238735f, 0.00140503f, 0.00452731f, 0.00121239f, 0.00512004f, 0.00148837f, 0.00141295f, 0.00258371f, 0.0014507f, 0.00189828f, 0.00378686f, 0.00130903f, 0.00392339f, 0.00196385f, 0.00372266f, 0.00123869f, 0.00135514f, 0.00393552f, 0.00356371f, 0.00291035f, 0.00242678f, 0.00417649f, 0.00392499f, 0.0038405f, 0.00483104f, 0.00120318f, 0.00319958f, 0.00132836f, 0.00534714f, 0.000984616f, 0.00166586f, 0.00272154f, 0.00449396f, 0.00435081f, 0.00362652f, 0.00253449f, 0.00774471f, 0.00236877f, 0.00296299f, 0.00186938f, 0.00185117f, 0.00126112f, 0.00119961f, 0.00241544f, 0.00413424f, 0.00432948f, 0.00319531f, 0.00108286f, 0.00350577f, 0.00124035f, 0.0016328f, 0.00141105f, 0.00179921f, 0.00344479f, 0.00148236f, 0.00461078f, 0.00147456f, 0.00228994f, 0.00203215f, 0.0017467f, 0.00331194f, 0.00101338f, 0.00339294f, 0.00185437f, 0.00119013f, 0.00215548f, 0.00396976f, 0.00145241f, 0.00495359f, 0.00414528f, 0.00380349f, 0.00262535f, 0.00189369f, 0.00632676f, 0.00109973f, 0.00231434f, 0.00328003f, 0.00481425f, 0.00513769f, 0.00379422f, 0.00479354f, 0.00111544f, 0.00312037f, 0.00131023f, 0.00131042f, 0.00491964f, 0.00107091f, 0.00342855f, 0.00364834f, 0.00138629f, 0.000871562f, 0.00527264f, 0.00175439f, 0.00425739f, 0.00409262f, 0.00148666f, 0.0033762f, 0.000979602f, 0.00374097f, 0.00109134f, 0.000962021f, 0.0018105f, 0.00139915f, 0.00440433f, 0.00310088f, 0.000916609f, 0.00177675f, 0.00169799f, 0.00296464f, 0.00113747f, 0.00299197f, 0.00338156f, 0.00617233f, 0.00272363f, 0.00215742f, 0.00218506f, 0.00181039f, 0.00140981f, 0.00308732f, 0.00180264f, 0.00365079f, 0.0011752f, 0.00136037f, 0.00388752f, 0.00179255f, 0.00186954f, 0.00383372f, 0.00235399f, 0.00116473f, 0.00116804f, 0.00288446f, 0.00291878f, 0.00215597f, 0.00169301f, 0.00375739f, 0.00272738f, 0.0015959f, 0.00423166f, 0.00118792f, 0.000847226f, 0.00350909f, 0.00273144f, 0.00132519f, 0.00476849f, 0.00113971f, 0.00131173f, 0.0015982f, 0.00296183f, 0.0033904f, 0.00158644f, 0.00371745f, 0.00450071f, 0.00417433f, 0.00154951f, 0.00274596f, 0.0011718f, 0.00187041f, 0.00105757f, 0.00361968f, 0.0034082f, 0.00213274f, 0.00157683f, 0.00407339f, 0.00496742f, 0.00315147f, 0.00285289f, 0.00238781f, 0.00365288f, 0.00317039f, 0.00161076f, 0.0028086f, 0.00215757f, 0.00125753f, 0.00100625f, 0.00347499f, 0.00211805f, 0.00443137f, 0.00156728f, 0.00430686f, 0.00117851f, 0.00493741f, 0.00137585f, 0.00349742f, 0.00134187f, 0.00406733f, 0.00150445f, 0.00494484f, 0.00133725f, 0.00390411f, 0.00120998f, 0.000968802f, 0.00385197f, 0.00377233f, 0.00565862f, 0.00163684f, 0.00333521f, 0.00478962f, 0.00147816f, 0.00113433f, 0.00314677f, 0.000945534f, 0.00116128f, 0.00111291f, 0.00342522f, 0.00409326f, 0.00287148f, 0.00104229f, 0.00143011f, 0.00375845f, 0.0031553f, 0.00157838f, 0.00325601f, 0.0032254f, 0.00399532f, 0.00121423f, 0.00339748f, 0.00118102f, 0.00114597f, 0.0022623f, 0.00102532f, 0.00348414f, 0.00175868f, 0.00380071f, 0.001009f, 0.00309465f, 0.00547653f, 0.00204313f, 0.00369337f, 0.00569779f, 0.00351963f, 0.00465894f, 0.00114373f, 0.0013055f, 0.00206289f, 0.00128366f, 0.0015662f, 0.00245999f, 0.00130318f, 0.00484086f, 0.00140103f, 0.00173224f, 0.00469829f, 0.00423602f, 0.00319573f, 0.00585494f, 0.0030303f, 0.00243605f, 0.00211564f, 0.00141916f, 0.00181697f, 0.00329699f, 0.00125795f, 0.00341615f, 0.00295366f, 0.00420577f, 0.00188202f, 0.00288828f, 0.00523963f, 0.0043351f, 0.00268381f, 0.00336698f, 0.00245956f, 0.00109446f, 0.00458491f, 0.00131399f, 0.00221922f, 0.00217426f, 0.00371692f, 0.00393607f, 0.00150834f, 0.00187826f, 0.00513004f, 0.00211712f, 0.00194197f, 0.00143003f, 0.00185421f, 0.00253565f, 0.00320905f, 0.00280296f, 0.00533474f, 0.00143313f, 0.00207987f, 0.00100812f, 0.00200641f, 0.00326801f, 0.00329224f, 0.00143255f, 0.00162794f, 0.00126235f, 0.00132107f, 0.00425956f, 0.00155997f, 0.00182732f, 0.00479599f, 0.00132142f, 0.00439781f, 0.0042637f, 0.00176898f, 0.00123753f, 0.0027393f, 0.00125391f, 0.00109509f, 0.00130093f, 0.00369973f, 0.00117196f, 0.00169041f, 0.0050505f, 0.00528965f, 0.00616714f, 0.00172272f, 0.00358131f, 0.00464371f, 0.00247259f, 0.00112413f, 0.0035709f, 0.00119062f, 0.00155244f, 0.00482523f, 0.00195688f, 0.00246638f, 0.00121025f, 0.00112052f, 0.00163918f, 0.00166438f, 0.00105353f, 0.00524241f, 0.00519299f, 0.00167229f, 0.00522376f, 0.00408274f, 0.00410614f, 0.0017665f, 0.00301525f, 0.00428781f, 0.00833974f, 0.00124878f, 0.00152742f, 0.00280381f, 0.0020715f, 0.0036789f, 0.0014818f, 0.00131949f, 0.00123493f, 0.00377115f, 0.00133251f, 0.00577058f, 0.00358843f, 0.00135694f, 0.00358049f, 0.00189002f, 0.00307183f, 0.000820974f, 0.00335527f, 0.00128116f, 0.00213939f, 0.00464589f, 0.00289231f, 0.00119994f, 0.00486219f, 0.00177429f, 0.00351416f, 0.00430693f, 0.00119908f, 0.00146228f, 0.0041838f, 0.00115981f, 0.00140798f, 0.00320153f, 0.00344672f, 0.00180006f, 0.00410799f, 0.00401511f, 0.00396472f, 0.00183668f, 0.0031387f, 0.00454181f, 0.00412791f, 0.00121918f, 0.00146875f, 0.00317022f, 0.00400693f, 0.00141293f, 0.00254879f, 0.00126317f, 0.00173736f, 0.00441893f, 0.00208198f, 0.00356168f, 0.00477383f, 0.00393628f, 0.00106417f, 0.00121564f, 0.00105705f, 0.0038146f, 0.00594012f, 0.00158281f, 0.00433145f, 0.00128797f, 0.0037559f, 0.00259417f, 0.0025851f, 0.0012129f, 0.00114046f, 0.0014188f, 0.00273742f, 0.00294762f, 0.00186675f, 0.0015524f, 0.00213005f, 0.00241744f, 0.00490586f, 0.00158945f, 0.00154386f, 0.00274173f, 0.00463177f, 0.00229746f, 0.00415129f, 0.00258472f, 0.00239172f, 0.00210395f, 0.00159895f, 0.00138558f, 0.00400977f, 0.0029027f, 0.00270448f, 0.00206849f, 0.00109099f, 0.00168208f, 0.00336541f, 0.00187291f, 0.00177631f, 0.00178314f, 0.00135468f, 0.00206301f, 0.00181558f, 0.00146984f, 0.00203566f, 0.00115582f, 0.00122751f, 0.00466314f, 0.00229659f, 0.00192659f, 0.00563056f, 0.00301829f, 0.00128505f, 0.00315503f, 0.00216458f, 0.00443916f, 0.00511388f, 0.00336827f, 0.00265581f, 0.00200882f, 0.00138813f, 0.00123314f, 0.00154731f, 0.00334472f, 0.00417065f, 0.00403263f, 0.00182452f, 0.00157921f, 0.00172601f, 0.0020468f, 0.00343826f, 0.00282826f, 0.00449443f, 0.00449805f, 0.00182198f, 0.00151853f, 0.0032019f, 0.00169984f], rhs_zero_points=[141, 132, 148, 123, 145, 122, 163, 136, 108, 127, 141, 164, 140, 112, 131, 137, 186, 135, 102, 147, 127, 148, 168, 143, 134, 140, 120, 114, 123, 124, 139, 134, 123, 154, 123, 111, 98, 118, 134, 181, 147, 164, 135, 114, 137, 108, 111, 96, 127, 141, 157, 108, 126, 154, 141, 121, 88, 142, 131, 136, 160, 124, 115, 98, 133, 147, 125, 151, 129, 117, 127, 129, 125, 126, 140, 153, 133, 93, 192, 100, 163, 121, 114, 140, 127, 153, 146, 129, 173, 103, 121, 121, 113, 136, 91, 146, 142, 143, 120, 106, 117, 168, 129, 138, 166, 138, 124, 95, 111, 132, 129, 84, 149, 148, 96, 159, 120, 172, 146, 117, 166, 143, 115, 127, 141, 103, 122, 134, 95, 157, 157, 122, 124, 144, 102, 192, 125, 128, 161, 130, 147, 137, 117, 112, 121, 134, 162, 125, 126, 119, 149, 119, 138, 82, 77, 134, 117, 131, 102, 132, 172, 95, 140, 126, 97, 140, 183, 136, 151, 132, 126, 134, 165, 92, 117, 110, 129, 137, 119, 114, 129, 123, 125, 154, 139, 126, 125, 112, 130, 151, 103, 116, 120, 143, 148, 115, 152, 114, 136, 129, 135, 121, 155, 168, 149, 145, 161, 114, 130, 142, 117, 119, 165, 94, 103, 130, 130, 103, 164, 123, 91, 122, 122, 123, 148, 152, 150, 138, 100, 108, 119, 127, 136, 129, 154, 85, 119, 104, 89, 119, 111, 122, 146, 126, 134, 126, 120, 148, 132, 112, 137, 98, 127, 132, 97, 155, 106, 130, 138, 126, 153, 151, 143, 115, 106, 128, 106, 147, 110, 143, 173, 141, 81, 140, 127, 107, 119, 120, 125, 130, 139, 107, 125, 139, 122, 148, 125, 109, 122, 110, 111, 153, 115, 128, 153, 96, 149, 128, 98, 186, 145, 122, 127, 166, 119, 147, 146, 135, 157, 151, 113, 118, 89, 172, 103, 158, 129, 122, 160, 110, 141, 117, 144, 154, 99, 138, 148, 153, 125, 142, 151, 141, 165, 107, 149, 123, 148, 119, 156, 122, 140, 142, 118, 120, 136, 138, 130, 144, 84, 109, 108, 96, 138, 129, 124, 135, 143, 129, 133, 146, 127, 146, 141, 116, 122, 147, 139, 117, 79, 103, 135, 160, 114, 137, 107, 106, 85, 115, 116, 120, 103, 99, 97, 129, 135, 110, 130, 83, 159, 113, 137, 137, 170, 125, 153, 113, 121, 130, 135, 143, 145, 117, 150, 118, 112, 138, 139, 120, 120, 138, 120, 138, 109, 82, 154, 93, 121, 142, 114, 132, 100, 150, 129, 124, 110, 151, 106, 105, 139, 122, 153, 154, 144, 136, 103, 106, 201, 123, 140, 132, 154, 141, 112, 137, 93, 124, 146, 101, 143, 128, 161, 115, 144, 125, 120, 148, 157, 125, 105, 165, 139, 121, 140, 122, 159, 134, 143, 135, 125, 113, 161, 89, 113, 131, 129, 114, 154, 124, 115, 96, 122, 118, 136, 135, 135, 101, 113, 110, 148, 98, 134, 119, 139, 156, 110, 144, 114, 99, 159, 153, 112, 115, 105, 126, 125, 162, 144, 134, 119, 114, 109, 120], scales=[0.0368765f], zero_points=[136]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %675 = %674(%673, meta[relay.Constant][567] /* ty=Tensor[(512, 768, 1, 1), uint8] */, meta[relay.Constant][568] /* ty=Tensor[(512), int32] */, kernel_size=[1, 1], lhs_scales=[0.0171635f], lhs_zero_points=[16], rhs_scales=[0.00123779f, 0.00130408f, 0.00107408f, 0.00175449f, 0.00362206f, 0.00121507f, 0.00138021f, 0.00127757f, 0.00194524f, 0.00213075f, 0.0011411f, 0.00137341f, 0.00282795f, 0.00298f, 0.00227742f, 0.0022579f, 0.00391189f, 0.00427712f, 0.00415762f, 0.00253315f, 0.00536257f, 0.00488024f, 0.00561855f, 0.00187392f, 0.00131462f, 0.00169304f, 0.00115837f, 0.00121414f, 0.002721f, 0.000941231f, 0.00122718f, 0.00430315f, 0.00138733f, 0.0047991f, 0.00249512f, 0.00349591f, 0.00214702f, 0.00383968f, 0.00116642f, 0.00606912f, 0.00451756f, 0.00366524f, 0.00238735f, 0.00140503f, 0.00452731f, 0.00121239f, 0.00512004f, 0.00148837f, 0.00141295f, 0.00258371f, 0.0014507f, 0.00189828f, 0.00378686f, 0.00130903f, 0.00392339f, 0.00196385f, 0.00372266f, 0.00123869f, 0.00135514f, 0.00393552f, 0.00356371f, 0.00291035f, 0.00242678f, 0.00417649f, 0.00392499f, 0.0038405f, 0.00483104f, 0.00120318f, 0.00319958f, 0.00132836f, 0.00534714f, 0.000984616f, 0.00166586f, 0.00272154f, 0.00449396f, 0.00435081f, 0.00362652f, 0.00253449f, 0.00774471f, 0.00236877f, 0.00296299f, 0.00186938f, 0.00185117f, 0.00126112f, 0.00119961f, 0.00241544f, 0.00413424f, 0.00432948f, 0.00319531f, 0.00108286f, 0.00350577f, 0.00124035f, 0.0016328f, 0.00141105f, 0.00179921f, 0.00344479f, 0.00148236f, 0.00461078f, 0.00147456f, 0.00228994f, 0.00203215f, 0.0017467f, 0.00331194f, 0.00101338f, 0.00339294f, 0.00185437f, 0.00119013f, 0.00215548f, 0.00396976f, 0.00145241f, 0.00495359f, 0.00414528f, 0.00380349f, 0.00262535f, 0.00189369f, 0.00632676f, 0.00109973f, 0.00231434f, 0.00328003f, 0.00481425f, 0.00513769f, 0.00379422f, 0.00479354f, 0.00111544f, 0.00312037f, 0.00131023f, 0.00131042f, 0.00491964f, 0.00107091f, 0.00342855f, 0.00364834f, 0.00138629f, 0.000871562f, 0.00527264f, 0.00175439f, 0.00425739f, 0.00409262f, 0.00148666f, 0.0033762f, 0.000979602f, 0.00374097f, 0.00109134f, 0.000962021f, 0.0018105f, 0.00139915f, 0.00440433f, 0.00310088f, 0.000916609f, 0.00177675f, 0.00169799f, 0.00296464f, 0.00113747f, 0.00299197f, 0.00338156f, 0.00617233f, 0.00272363f, 0.00215742f, 0.00218506f, 0.00181039f, 0.00140981f, 0.00308732f, 0.00180264f, 0.00365079f, 0.0011752f, 0.00136037f, 0.00388752f, 0.00179255f, 0.00186954f, 0.00383372f, 0.00235399f, 0.00116473f, 0.00116804f, 0.00288446f, 0.00291878f, 0.00215597f, 0.00169301f, 0.00375739f, 0.00272738f, 0.0015959f, 0.00423166f, 0.00118792f, 0.000847226f, 0.00350909f, 0.00273144f, 0.00132519f, 0.00476849f, 0.00113971f, 0.00131173f, 0.0015982f, 0.00296183f, 0.0033904f, 0.00158644f, 0.00371745f, 0.00450071f, 0.00417433f, 0.00154951f, 0.00274596f, 0.0011718f, 0.00187041f, 0.00105757f, 0.00361968f, 0.0034082f, 0.00213274f, 0.00157683f, 0.00407339f, 0.00496742f, 0.00315147f, 0.00285289f, 0.00238781f, 0.00365288f, 0.00317039f, 0.00161076f, 0.0028086f, 0.00215757f, 0.00125753f, 0.00100625f, 0.00347499f, 0.00211805f, 0.00443137f, 0.00156728f, 0.00430686f, 0.00117851f, 0.00493741f, 0.00137585f, 0.00349742f, 0.00134187f, 0.00406733f, 0.00150445f, 0.00494484f, 0.00133725f, 0.00390411f, 0.00120998f, 0.000968802f, 0.00385197f, 0.00377233f, 0.00565862f, 0.00163684f, 0.00333521f, 0.00478962f, 0.00147816f, 0.00113433f, 0.00314677f, 0.000945534f, 0.00116128f, 0.00111291f, 0.00342522f, 0.00409326f, 0.00287148f, 0.00104229f, 0.00143011f, 0.00375845f, 0.0031553f, 0.00157838f, 0.00325601f, 0.0032254f, 0.00399532f, 0.00121423f, 0.00339748f, 0.00118102f, 0.00114597f, 0.0022623f, 0.00102532f, 0.00348414f, 0.00175868f, 0.00380071f, 0.001009f, 0.00309465f, 0.00547653f, 0.00204313f, 0.00369337f, 0.00569779f, 0.00351963f, 0.00465894f, 0.00114373f, 0.0013055f, 0.00206289f, 0.00128366f, 0.0015662f, 0.00245999f, 0.00130318f, 0.00484086f, 0.00140103f, 0.00173224f, 0.00469829f, 0.00423602f, 0.00319573f, 0.00585494f, 0.0030303f, 0.00243605f, 0.00211564f, 0.00141916f, 0.00181697f, 0.00329699f, 0.00125795f, 0.00341615f, 0.00295366f, 0.00420577f, 0.00188202f, 0.00288828f, 0.00523963f, 0.0043351f, 0.00268381f, 0.00336698f, 0.00245956f, 0.00109446f, 0.00458491f, 0.00131399f, 0.00221922f, 0.00217426f, 0.00371692f, 0.00393607f, 0.00150834f, 0.00187826f, 0.00513004f, 0.00211712f, 0.00194197f, 0.00143003f, 0.00185421f, 0.00253565f, 0.00320905f, 0.00280296f, 0.00533474f, 0.00143313f, 0.00207987f, 0.00100812f, 0.00200641f, 0.00326801f, 0.00329224f, 0.00143255f, 0.00162794f, 0.00126235f, 0.00132107f, 0.00425956f, 0.00155997f, 0.00182732f, 0.00479599f, 0.00132142f, 0.00439781f, 0.0042637f, 0.00176898f, 0.00123753f, 0.0027393f, 0.00125391f, 0.00109509f, 0.00130093f, 0.00369973f, 0.00117196f, 0.00169041f, 0.0050505f, 0.00528965f, 0.00616714f, 0.00172272f, 0.00358131f, 0.00464371f, 0.00247259f, 0.00112413f, 0.0035709f, 0.00119062f, 0.00155244f, 0.00482523f, 0.00195688f, 0.00246638f, 0.00121025f, 0.00112052f, 0.00163918f, 0.00166438f, 0.00105353f, 0.00524241f, 0.00519299f, 0.00167229f, 0.00522376f, 0.00408274f, 0.00410614f, 0.0017665f, 0.00301525f, 0.00428781f, 0.00833974f, 0.00124878f, 0.00152742f, 0.00280381f, 0.0020715f, 0.0036789f, 0.0014818f, 0.00131949f, 0.00123493f, 0.00377115f, 0.00133251f, 0.00577058f, 0.00358843f, 0.00135694f, 0.00358049f, 0.00189002f, 0.00307183f, 0.000820974f, 0.00335527f, 0.00128116f, 0.00213939f, 0.00464589f, 0.00289231f, 0.00119994f, 0.00486219f, 0.00177429f, 0.00351416f, 0.00430693f, 0.00119908f, 0.00146228f, 0.0041838f, 0.00115981f, 0.00140798f, 0.00320153f, 0.00344672f, 0.00180006f, 0.00410799f, 0.00401511f, 0.00396472f, 0.00183668f, 0.0031387f, 0.00454181f, 0.00412791f, 0.00121918f, 0.00146875f, 0.00317022f, 0.00400693f, 0.00141293f, 0.00254879f, 0.00126317f, 0.00173736f, 0.00441893f, 0.00208198f, 0.00356168f, 0.00477383f, 0.00393628f, 0.00106417f, 0.00121564f, 0.00105705f, 0.0038146f, 0.00594012f, 0.00158281f, 0.00433145f, 0.00128797f, 0.0037559f, 0.00259417f, 0.0025851f, 0.0012129f, 0.00114046f, 0.0014188f, 0.00273742f, 0.00294762f, 0.00186675f, 0.0015524f, 0.00213005f, 0.00241744f, 0.00490586f, 0.00158945f, 0.00154386f, 0.00274173f, 0.00463177f, 0.00229746f, 0.00415129f, 0.00258472f, 0.00239172f, 0.00210395f, 0.00159895f, 0.00138558f, 0.00400977f, 0.0029027f, 0.00270448f, 0.00206849f, 0.00109099f, 0.00168208f, 0.00336541f, 0.00187291f, 0.00177631f, 0.00178314f, 0.00135468f, 0.00206301f, 0.00181558f, 0.00146984f, 0.00203566f, 0.00115582f, 0.00122751f, 0.00466314f, 0.00229659f, 0.00192659f, 0.00563056f, 0.00301829f, 0.00128505f, 0.00315503f, 0.00216458f, 0.00443916f, 0.00511388f, 0.00336827f, 0.00265581f, 0.00200882f, 0.00138813f, 0.00123314f, 0.00154731f, 0.00334472f, 0.00417065f, 0.00403263f, 0.00182452f, 0.00157921f, 0.00172601f, 0.0020468f, 0.00343826f, 0.00282826f, 0.00449443f, 0.00449805f, 0.00182198f, 0.00151853f, 0.0032019f, 0.00169984f], rhs_zero_points=[141, 132, 148, 123, 145, 122, 163, 136, 108, 127, 141, 164, 140, 112, 131, 137, 186, 135, 102, 147, 127, 148, 168, 143, 134, 140, 120, 114, 123, 124, 139, 134, 123, 154, 123, 111, 98, 118, 134, 181, 147, 164, 135, 114, 137, 108, 111, 96, 127, 141, 157, 108, 126, 154, 141, 121, 88, 142, 131, 136, 160, 124, 115, 98, 133, 147, 125, 151, 129, 117, 127, 129, 125, 126, 140, 153, 133, 93, 192, 100, 163, 121, 114, 140, 127, 153, 146, 129, 173, 103, 121, 121, 113, 136, 91, 146, 142, 143, 120, 106, 117, 168, 129, 138, 166, 138, 124, 95, 111, 132, 129, 84, 149, 148, 96, 159, 120, 172, 146, 117, 166, 143, 115, 127, 141, 103, 122, 134, 95, 157, 157, 122, 124, 144, 102, 192, 125, 128, 161, 130, 147, 137, 117, 112, 121, 134, 162, 125, 126, 119, 149, 119, 138, 82, 77, 134, 117, 131, 102, 132, 172, 95, 140, 126, 97, 140, 183, 136, 151, 132, 126, 134, 165, 92, 117, 110, 129, 137, 119, 114, 129, 123, 125, 154, 139, 126, 125, 112, 130, 151, 103, 116, 120, 143, 148, 115, 152, 114, 136, 129, 135, 121, 155, 168, 149, 145, 161, 114, 130, 142, 117, 119, 165, 94, 103, 130, 130, 103, 164, 123, 91, 122, 122, 123, 148, 152, 150, 138, 100, 108, 119, 127, 136, 129, 154, 85, 119, 104, 89, 119, 111, 122, 146, 126, 134, 126, 120, 148, 132, 112, 137, 98, 127, 132, 97, 155, 106, 130, 138, 126, 153, 151, 143, 115, 106, 128, 106, 147, 110, 143, 173, 141, 81, 140, 127, 107, 119, 120, 125, 130, 139, 107, 125, 139, 122, 148, 125, 109, 122, 110, 111, 153, 115, 128, 153, 96, 149, 128, 98, 186, 145, 122, 127, 166, 119, 147, 146, 135, 157, 151, 113, 118, 89, 172, 103, 158, 129, 122, 160, 110, 141, 117, 144, 154, 99, 138, 148, 153, 125, 142, 151, 141, 165, 107, 149, 123, 148, 119, 156, 122, 140, 142, 118, 120, 136, 138, 130, 144, 84, 109, 108, 96, 138, 129, 124, 135, 143, 129, 133, 146, 127, 146, 141, 116, 122, 147, 139, 117, 79, 103, 135, 160, 114, 137, 107, 106, 85, 115, 116, 120, 103, 99, 97, 129, 135, 110, 130, 83, 159, 113, 137, 137, 170, 125, 153, 113, 121, 130, 135, 143, 145, 117, 150, 118, 112, 138, 139, 120, 120, 138, 120, 138, 109, 82, 154, 93, 121, 142, 114, 132, 100, 150, 129, 124, 110, 151, 106, 105, 139, 122, 153, 154, 144, 136, 103, 106, 201, 123, 140, 132, 154, 141, 112, 137, 93, 124, 146, 101, 143, 128, 161, 115, 144, 125, 120, 148, 157, 125, 105, 165, 139, 121, 140, 122, 159, 134, 143, 135, 125, 113, 161, 89, 113, 131, 129, 114, 154, 124, 115, 96, 122, 118, 136, 135, 135, 101, 113, 110, 148, 98, 134, 119, 139, 156, 110, 144, 114, 99, 159, 153, 112, 115, 105, 126, 125, 162, 144, 134, 119, 114, 109, 120], scales=[0.0368765f], zero_points=[136], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %676 = dl.dequantize(%675, input_scales=[0.0368765f], input_zero_points=[136]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %677 = sigmoid(%676) /* /model.22/cv2/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %678 = multiply(%676, %677) /* /model.22/cv2/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %679 = dl.quantize(%678, output_scales=[0.0180559f], output_zero_points=[15]) /* fake_quant_248 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %680 = fn (%FunctionVar_8_01: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_8_1: Tensor[(64, 512, 3, 3), uint8], %FunctionVar_8_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab04bb08)) -> Tensor[(1, 64, 20, 20), uint8] {
    %598 = (%FunctionVar_8_01, %FunctionVar_8_1, %FunctionVar_8_2, meta[relay.Constant][494] /* ty=Tensor[(64), float32] */, meta[relay.Constant][495] /* ty=Tensor[(64), int32] */, meta[relay.Constant][496] /* ty=Tensor[(64), int32] */, meta[relay.Constant][497] /* ty=Tensor[(64), int32] */, meta[relay.Constant][498] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%598, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0180559f], lhs_zero_points=[15], rhs_scales=[0.00244593f, 0.00329283f, 0.00354534f, 0.00264786f, 0.00116896f, 0.00165617f, 0.00257519f, 0.000973294f, 0.000900905f, 0.0026193f, 0.00145829f, 0.00122312f, 0.00116072f, 0.00107462f, 0.00209536f, 0.00176323f, 0.000762882f, 0.001048f, 0.00123141f, 0.00126257f, 0.00116868f, 0.0014783f, 0.00249905f, 0.0018404f, 0.00131313f, 0.000895209f, 0.00105218f, 0.000890079f, 0.00152387f, 0.00201001f, 0.00129769f, 0.00142943f, 0.00156182f, 0.000939456f, 0.00103109f, 0.00289592f, 0.00217493f, 0.00240426f, 0.00243541f, 0.00197678f, 0.000923143f, 0.00109485f, 0.000949098f, 0.00116783f, 0.000559718f, 0.0012013f, 0.00102695f, 0.000943021f, 0.00209154f, 0.00155661f, 0.00170154f, 0.00137797f, 0.00101589f, 0.000598806f, 0.00161077f, 0.00283621f, 0.000898113f, 0.000968767f, 0.000850737f, 0.00351915f, 0.00109082f, 0.0011834f, 0.000906816f, 0.00206279f], rhs_zero_points=[177, 194, 175, 181, 146, 169, 153, 129, 127, 210, 151, 144, 141, 150, 104, 173, 138, 122, 155, 100, 117, 110, 134, 129, 131, 107, 129, 163, 160, 158, 128, 121, 125, 149, 134, 159, 199, 124, 197, 106, 138, 137, 141, 111, 156, 144, 116, 139, 151, 111, 139, 149, 137, 139, 133, 200, 155, 96, 138, 183, 122, 145, 156, 112], scales=[0.0363182f], zero_points=[134]) /* ty=Tensor[(1, 64, 20, 20), uint8] */
  };
  %681 = %680(%679, meta[relay.Constant][569] /* ty=Tensor[(64, 512, 3, 3), uint8] */, meta[relay.Constant][570] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=15f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0180559f], lhs_zero_points=[15], rhs_scales=[0.00244593f, 0.00329283f, 0.00354534f, 0.00264786f, 0.00116896f, 0.00165617f, 0.00257519f, 0.000973294f, 0.000900905f, 0.0026193f, 0.00145829f, 0.00122312f, 0.00116072f, 0.00107462f, 0.00209536f, 0.00176323f, 0.000762882f, 0.001048f, 0.00123141f, 0.00126257f, 0.00116868f, 0.0014783f, 0.00249905f, 0.0018404f, 0.00131313f, 0.000895209f, 0.00105218f, 0.000890079f, 0.00152387f, 0.00201001f, 0.00129769f, 0.00142943f, 0.00156182f, 0.000939456f, 0.00103109f, 0.00289592f, 0.00217493f, 0.00240426f, 0.00243541f, 0.00197678f, 0.000923143f, 0.00109485f, 0.000949098f, 0.00116783f, 0.000559718f, 0.0012013f, 0.00102695f, 0.000943021f, 0.00209154f, 0.00155661f, 0.00170154f, 0.00137797f, 0.00101589f, 0.000598806f, 0.00161077f, 0.00283621f, 0.000898113f, 0.000968767f, 0.000850737f, 0.00351915f, 0.00109082f, 0.0011834f, 0.000906816f, 0.00206279f], rhs_zero_points=[177, 194, 175, 181, 146, 169, 153, 129, 127, 210, 151, 144, 141, 150, 104, 173, 138, 122, 155, 100, 117, 110, 134, 129, 131, 107, 129, 163, 160, 158, 128, 121, 125, 149, 134, 159, 199, 124, 197, 106, 138, 137, 141, 111, 156, 144, 116, 139, 151, 111, 139, 149, 137, 139, 133, 200, 155, 96, 138, 183, 122, 145, 156, 112], scales=[0.0363182f], zero_points=[134], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %682 = dl.dequantize(%681, input_scales=[0.0363182f], input_zero_points=[134]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %683 = sigmoid(%682) /* /model.23/cv2.2/cv2.2.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %684 = multiply(%682, %683) /* /model.23/cv2.2/cv2.2.0/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %685 = dl.quantize(%684, output_scales=[0.0181265f], output_zero_points=[15]) /* fake_quant_251 */ /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %686 = fn (%FunctionVar_7_01: Tensor[(1, 64, 20, 20), uint8], %FunctionVar_7_1: Tensor[(64, 64, 3, 3), uint8], %FunctionVar_7_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adb476c8)) -> Tensor[(1, 64, 20, 20), uint8] {
    %597 = (%FunctionVar_7_01, %FunctionVar_7_1, %FunctionVar_7_2, meta[relay.Constant][489] /* ty=Tensor[(64), float32] */, meta[relay.Constant][490] /* ty=Tensor[(64), int32] */, meta[relay.Constant][491] /* ty=Tensor[(64), int32] */, meta[relay.Constant][492] /* ty=Tensor[(64), int32] */, meta[relay.Constant][493] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%597, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0181265f], lhs_zero_points=[15], rhs_scales=[0.0103419f, 0.00452488f, 0.00592962f, 0.00562783f, 0.00287795f, 0.00560729f, 0.0100866f, 0.00610161f, 0.007844f, 0.00881163f, 0.00887894f, 0.0134262f, 0.00656136f, 0.00900211f, 0.0067871f, 0.00303566f, 0.00392088f, 0.00365135f, 0.0192517f, 0.00629125f, 0.00464964f, 0.00771537f, 0.00959878f, 0.00651811f, 0.00621022f, 0.0122419f, 0.00408756f, 0.00618591f, 0.00619789f, 0.0111014f, 0.00662976f, 0.00589574f, 0.0101717f, 0.00511307f, 0.00549167f, 0.00603464f, 0.00837798f, 0.00396591f, 0.0184533f, 0.00648553f, 0.00759435f, 0.00553044f, 0.00312363f, 0.00328402f, 0.00532067f, 0.00362963f, 0.00611235f, 0.00981318f, 0.00610769f, 0.00336515f, 0.0160229f, 0.00609382f, 0.00593789f, 0.0086843f, 0.00314507f, 0.00667998f, 0.0105989f, 0.00396695f, 0.00771416f, 0.00346084f, 0.00890514f, 0.00510115f, 0.00826496f, 0.00488131f], rhs_zero_points=[107, 120, 79, 172, 145, 131, 181, 98, 151, 167, 149, 73, 120, 120, 130, 143, 132, 172, 72, 149, 167, 125, 155, 127, 57, 167, 120, 153, 136, 67, 147, 101, 159, 63, 58, 43, 78, 136, 122, 166, 132, 91, 141, 131, 88, 124, 56, 174, 139, 141, 150, 138, 128, 116, 130, 100, 68, 161, 164, 99, 124, 141, 106, 114], scales=[0.139617f], zero_points=[49]) /* ty=Tensor[(1, 64, 20, 20), uint8] */
  };
  %687 = %686(%685, meta[relay.Constant][571] /* ty=Tensor[(64, 64, 3, 3), uint8] */, meta[relay.Constant][572] /* ty=Tensor[(64), int32] */, kernel_size=[3, 3], pad_value=15f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0181265f], lhs_zero_points=[15], rhs_scales=[0.0103419f, 0.00452488f, 0.00592962f, 0.00562783f, 0.00287795f, 0.00560729f, 0.0100866f, 0.00610161f, 0.007844f, 0.00881163f, 0.00887894f, 0.0134262f, 0.00656136f, 0.00900211f, 0.0067871f, 0.00303566f, 0.00392088f, 0.00365135f, 0.0192517f, 0.00629125f, 0.00464964f, 0.00771537f, 0.00959878f, 0.00651811f, 0.00621022f, 0.0122419f, 0.00408756f, 0.00618591f, 0.00619789f, 0.0111014f, 0.00662976f, 0.00589574f, 0.0101717f, 0.00511307f, 0.00549167f, 0.00603464f, 0.00837798f, 0.00396591f, 0.0184533f, 0.00648553f, 0.00759435f, 0.00553044f, 0.00312363f, 0.00328402f, 0.00532067f, 0.00362963f, 0.00611235f, 0.00981318f, 0.00610769f, 0.00336515f, 0.0160229f, 0.00609382f, 0.00593789f, 0.0086843f, 0.00314507f, 0.00667998f, 0.0105989f, 0.00396695f, 0.00771416f, 0.00346084f, 0.00890514f, 0.00510115f, 0.00826496f, 0.00488131f], rhs_zero_points=[107, 120, 79, 172, 145, 131, 181, 98, 151, 167, 149, 73, 120, 120, 130, 143, 132, 172, 72, 149, 167, 125, 155, 127, 57, 167, 120, 153, 136, 67, 147, 101, 159, 63, 58, 43, 78, 136, 122, 166, 132, 91, 141, 131, 88, 124, 56, 174, 139, 141, 150, 138, 128, 116, 130, 100, 68, 161, 164, 99, 124, 141, 106, 114], scales=[0.139617f], zero_points=[49], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %688 = dl.dequantize(%687, input_scales=[0.139617f], input_zero_points=[49]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %689 = sigmoid(%688) /* /model.23/cv2.2/cv2.2.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %690 = multiply(%688, %689) /* /model.23/cv2.2/cv2.2.1/act/Mul_output_0 */ /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %691 = dl.quantize(%690, output_scales=[0.113617f], output_zero_points=[2]) /* fake_quant_254 */ /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %692 = fn (%FunctionVar_6_02: Tensor[(1, 64, 20, 20), uint8], %FunctionVar_6_1: Tensor[(64, 64, 1, 1), uint8], %FunctionVar_6_2: Tensor[(64), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf031c8)) -> Tensor[(1, 64, 20, 20), uint8] {
    %596 = (%FunctionVar_6_02, %FunctionVar_6_1, %FunctionVar_6_2, meta[relay.Constant][484] /* ty=Tensor[(64), float32] */, meta[relay.Constant][485] /* ty=Tensor[(64), int32] */, meta[relay.Constant][486] /* ty=Tensor[(64), int32] */, meta[relay.Constant][487] /* ty=Tensor[(64), int32] */, meta[relay.Constant][488] /* ty=Tensor[(64), int32] */);
    dl.quantized_conv2d(%596, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.113617f], lhs_zero_points=[2], rhs_scales=[0.00171569f, 0.00169414f, 0.00165298f, 0.00161851f, 0.00152133f, 0.00107877f, 0.0012815f, 0.00119677f, 0.00115799f, 0.00106895f, 0.00103185f, 0.000983025f, 0.000800877f, 0.000768804f, 0.000790824f, 0.000905474f, 0.00231216f, 0.00154527f, 0.00171616f, 0.00185212f, 0.00141266f, 0.00145575f, 0.0017243f, 0.00133559f, 0.00142703f, 0.00108978f, 0.000965193f, 0.000703699f, 0.000673421f, 0.00066648f, 0.000554343f, 0.000500967f, 0.00205844f, 0.00172957f, 0.00188036f, 0.00163861f, 0.00154287f, 0.00148782f, 0.00129754f, 0.0013095f, 0.00113047f, 0.00119701f, 0.000945686f, 0.00106177f, 0.00069628f, 0.000783524f, 0.000741517f, 0.00078496f, 0.0019469f, 0.00178271f, 0.00179611f, 0.00197993f, 0.00144282f, 0.00155676f, 0.00120491f, 0.0012681f, 0.00122453f, 0.00118576f, 0.00101247f, 0.000950234f, 0.000985897f, 0.000853056f, 0.000592639f, 0.000560805f], rhs_zero_points=[99, 98, 126, 115, 116, 91, 136, 112, 119, 92, 116, 106, 84, 74, 64, 87, 138, 97, 118, 129, 113, 113, 121, 105, 105, 81, 49, 91, 70, 69, 73, 86, 125, 101, 136, 134, 125, 112, 87, 72, 76, 77, 55, 82, 76, 57, 56, 67, 117, 108, 124, 129, 94, 142, 98, 127, 85, 120, 88, 100, 93, 88, 68, 76], scales=[0.0290487f], zero_points=[70]) /* ty=Tensor[(1, 64, 20, 20), uint8] */
  };
  %693 = %692(%691, meta[relay.Constant][573] /* ty=Tensor[(64, 64, 1, 1), uint8] */, meta[relay.Constant][574] /* ty=Tensor[(64), int32] */, kernel_size=[1, 1], lhs_scales=[0.113617f], lhs_zero_points=[2], rhs_scales=[0.00171569f, 0.00169414f, 0.00165298f, 0.00161851f, 0.00152133f, 0.00107877f, 0.0012815f, 0.00119677f, 0.00115799f, 0.00106895f, 0.00103185f, 0.000983025f, 0.000800877f, 0.000768804f, 0.000790824f, 0.000905474f, 0.00231216f, 0.00154527f, 0.00171616f, 0.00185212f, 0.00141266f, 0.00145575f, 0.0017243f, 0.00133559f, 0.00142703f, 0.00108978f, 0.000965193f, 0.000703699f, 0.000673421f, 0.00066648f, 0.000554343f, 0.000500967f, 0.00205844f, 0.00172957f, 0.00188036f, 0.00163861f, 0.00154287f, 0.00148782f, 0.00129754f, 0.0013095f, 0.00113047f, 0.00119701f, 0.000945686f, 0.00106177f, 0.00069628f, 0.000783524f, 0.000741517f, 0.00078496f, 0.0019469f, 0.00178271f, 0.00179611f, 0.00197993f, 0.00144282f, 0.00155676f, 0.00120491f, 0.0012681f, 0.00122453f, 0.00118576f, 0.00101247f, 0.000950234f, 0.000985897f, 0.000853056f, 0.000592639f, 0.000560805f], rhs_zero_points=[99, 98, 126, 115, 116, 91, 136, 112, 119, 92, 116, 106, 84, 74, 64, 87, 138, 97, 118, 129, 113, 113, 121, 105, 105, 81, 49, 91, 70, 69, 73, 86, 125, 101, 136, 134, 125, 112, 87, 72, 76, 77, 55, 82, 76, 57, 56, 67, 117, 108, 124, 129, 94, 142, 98, 127, 85, 120, 88, 100, 93, 88, 68, 76], scales=[0.0290487f], zero_points=[70], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 64, 20, 20), uint8] */;
  %699 = fn (%FunctionVar_5_01: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_5_1: Tensor[(512, 1, 3, 3), uint8], %FunctionVar_5_2: Tensor[(512), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaef4b98)) -> Tensor[(1, 512, 20, 20), uint8] {
    %698 = (%FunctionVar_5_01, %FunctionVar_5_1, %FunctionVar_5_2, meta[relay.Constant][595] /* ty=Tensor[(512), float32] */, meta[relay.Constant][596] /* ty=Tensor[(512), int32] */, meta[relay.Constant][597] /* ty=Tensor[(512), int32] */, meta[relay.Constant][598] /* ty=Tensor[(512), int32] */, meta[relay.Constant][599] /* ty=Tensor[(512), int32] */);
    dl.quantized_conv2d(%698, groups=512, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0180559f], lhs_zero_points=[15], rhs_scales=[0.00583006f, 0.00563526f, 0.0020358f, 0.00768301f, 0.0011634f, 0.00270349f, 0.00537454f, 0.00287321f, 0.00346244f, 0.00377513f, 0.00526034f, 0.00592503f, 0.0045709f, 0.00277927f, 0.00231369f, 0.00345479f, 0.00484396f, 0.00228429f, 0.00184961f, 0.00236158f, 0.00201468f, 0.00196393f, 0.0030231f, 0.0034814f, 0.00228309f, 0.00144966f, 0.00465126f, 0.00264605f, 0.00423548f, 0.00134212f, 0.00509516f, 0.00141975f, 0.00180556f, 0.00509123f, 0.00682087f, 0.00160969f, 0.00364606f, 0.00128271f, 0.00295962f, 0.00406076f, 0.00218906f, 0.00301413f, 0.0045476f, 0.0050923f, 0.00237341f, 0.0025206f, 0.00162418f, 0.00705727f, 0.00262741f, 0.00220335f, 0.00600619f, 0.00586345f, 0.00282866f, 0.00142027f, 0.00339801f, 0.00415023f, 0.00348869f, 0.00535259f, 0.00190141f, 0.00316677f, 0.00153013f, 0.00244531f, 0.00233056f, 0.00247056f, 0.00291785f, 0.00124399f, 0.00247905f, 0.00518835f, 0.00243541f, 0.0047318f, 0.00193419f, 0.00212762f, 0.00540938f, 0.000786496f, 0.00382814f, 0.0020958f, 0.00197376f, 0.00225775f, 0.00450172f, 0.00212907f, 0.00343713f, 0.00358515f, 0.00341079f, 0.00176614f, 0.00199145f, 0.00746409f, 0.00253606f, 0.000767739f, 0.00166878f, 0.00158154f, 0.00195357f, 0.00629651f, 0.00194499f, 0.00207251f, 0.00184715f, 0.00172508f, 0.00343983f, 0.00181277f, 0.00575152f, 0.00396811f, 0.00192242f, 0.00678843f, 0.00315556f, 0.00200016f, 0.00266366f, 0.00374595f, 0.00690933f, 0.00142981f, 0.00232024f, 0.00286198f, 0.00167009f, 0.00112892f, 0.00251586f, 0.00287373f, 0.00453787f, 0.00463089f, 0.00183183f, 0.0117991f, 0.00386841f, 0.00101896f, 0.00261553f, 0.00078827f, 0.00156185f, 0.002214f, 0.00794225f, 0.00469327f, 0.00215211f, 0.00536566f, 0.0011373f, 0.00294559f, 0.00606761f, 0.00489557f, 0.00246206f, 0.00181256f, 0.00339706f, 0.00410716f, 0.00210865f, 0.00324724f, 0.00123672f, 0.00196459f, 0.000958453f, 0.00321522f, 0.00187642f, 0.00509123f, 0.00224488f, 0.00197989f, 0.00223378f, 0.00791181f, 0.00447475f, 0.00152613f, 0.00220813f, 0.00526137f, 0.00257158f, 0.00129559f, 0.00172162f, 0.00217497f, 0.00393785f, 0.0204092f, 0.00571866f, 0.00570972f, 0.00481319f, 0.00358676f, 0.00171559f, 0.00187529f, 0.00523026f, 0.00206176f, 0.0101322f, 0.00514793f, 0.00232136f, 0.00557897f, 0.00287457f, 0.00361133f, 0.00324513f, 0.00660018f, 0.00301461f, 0.00435148f, 0.0015617f, 0.00492668f, 0.00484282f, 0.00259245f, 0.00546373f, 0.00219526f, 0.00110862f, 0.00271453f, 0.00179115f, 0.00152523f, 0.00495157f, 0.00192767f, 0.00200461f, 0.00286767f, 0.00116682f, 0.00195468f, 0.00128779f, 0.00163248f, 0.00150978f, 0.00367785f, 0.0125279f, 0.00210551f, 0.00320388f, 0.00399868f, 0.00245864f, 0.000747914f, 0.00214702f, 0.007426f, 0.00268292f, 0.00291807f, 0.00548594f, 0.00710807f, 0.00355335f, 0.00168158f, 0.00255122f, 0.00329934f, 0.0144195f, 0.00382556f, 0.00192662f, 0.00591133f, 0.0026615f, 0.00389476f, 0.00624749f, 0.00716952f, 0.00176419f, 0.00539125f, 0.0022464f, 0.00426469f, 0.0021691f, 0.00417309f, 0.00273313f, 0.00422571f, 0.00101772f, 0.00468595f, 0.0010912f, 0.00218552f, 0.00169108f, 0.00147976f, 0.00174171f, 0.00156559f, 0.00367508f, 0.00218071f, 0.00238025f, 0.0021167f, 0.00429056f, 0.00279879f, 0.00563793f, 0.00175361f, 0.00195286f, 0.00327973f, 0.000965174f, 0.00110204f, 0.00261319f, 0.00265061f, 0.00121038f, 0.00229833f, 0.00668751f, 0.00154711f, 0.00279943f, 0.00566297f, 0.00130875f, 0.00236232f, 0.00639229f, 0.00179797f, 0.00514582f, 0.0061441f, 0.00208133f, 0.00160305f, 0.00221378f, 0.00210246f, 0.00220862f, 0.0016217f, 0.00227554f, 0.00224313f, 0.00450482f, 0.00190102f, 0.00149572f, 0.00201779f, 0.00207453f, 0.00136499f, 0.00149366f, 0.00264508f, 0.0071537f, 0.00781551f, 0.00160117f, 0.00232539f, 0.00147496f, 0.00267527f, 0.00230308f, 0.00105738f, 0.00226101f, 0.00193849f, 0.00151132f, 0.00213307f, 0.00201604f, 0.00169496f, 0.0026922f, 0.00179482f, 0.00166958f, 0.00194594f, 0.0061288f, 0.00191307f, 0.00262874f, 0.00360565f, 0.000908506f, 0.00588141f, 0.00289267f, 0.00355024f, 0.00176744f, 0.00430789f, 0.00624106f, 0.00252401f, 0.00932283f, 0.00289748f, 0.000618735f, 0.00201894f, 0.00191101f, 0.00503753f, 0.00284986f, 0.00831251f, 0.00211676f, 0.00483717f, 0.0173488f, 0.00207416f, 0.00240419f, 0.00184031f, 0.00503337f, 0.00378617f, 0.00259524f, 0.00357009f, 0.0018795f, 0.00293835f, 0.00496774f, 0.00440876f, 0.00231415f, 0.00400787f, 0.00179759f, 0.00498556f, 0.00295282f, 0.000704105f, 0.00618815f, 0.00156817f, 0.00156055f, 0.00639391f, 0.00180182f, 0.00344578f, 0.00196756f, 0.00527825f, 0.00561146f, 0.00237739f, 0.00287264f, 0.00233529f, 0.000701215f, 0.0013432f, 0.00177549f, 0.00790285f, 0.00173937f, 0.00267007f, 0.00338806f, 0.00214399f, 0.00244039f, 0.00227786f, 0.00407906f, 0.00212799f, 0.00473025f, 0.00250598f, 0.00166709f, 0.00615194f, 0.00721639f, 0.00192438f, 0.00674665f, 0.00184832f, 0.00129773f, 0.0025641f, 0.00152905f, 0.00241706f, 0.00220591f, 0.00419878f, 0.00222728f, 0.00436353f, 0.00258421f, 0.00184969f, 0.00208304f, 0.00089024f, 0.00172047f, 0.0010634f, 0.00170743f, 0.00548609f, 0.00432782f, 0.00317181f, 0.00407486f, 0.00191747f, 0.000975095f, 0.0029096f, 0.00219908f, 0.00157638f, 0.00243377f, 0.00456072f, 0.00372806f, 0.00264809f, 0.00226211f, 0.00103721f, 0.00328029f, 0.00500272f, 0.0018418f, 0.00317161f, 0.00163217f, 0.00202267f, 0.00502167f, 0.00668764f, 0.00148142f, 0.00481808f, 0.00199425f, 0.000707579f, 0.00198992f, 0.00468998f, 0.0020507f, 0.000985509f, 0.00247305f, 0.00430818f, 0.00171285f, 0.00204811f, 0.00124834f, 0.00465399f, 0.00516467f, 0.00155401f, 0.00260369f, 0.00620625f, 0.00400876f, 0.00434523f, 0.00577182f, 0.00174509f, 0.00659192f, 0.00142999f, 0.00135845f, 0.00131673f, 0.00193493f, 0.00214451f, 0.00182128f, 0.000781962f, 0.00406729f, 0.00187327f, 0.00129154f, 0.00665028f, 0.00177066f, 0.00314893f, 0.00224069f, 0.00575069f, 0.0016944f, 0.00168309f, 0.00303397f, 0.00184452f, 0.00443251f, 0.0047363f, 0.0128841f, 0.0088072f, 0.00144786f, 0.00187063f, 0.00198266f, 0.0110537f, 0.00185326f, 0.00357747f, 0.00148945f, 0.00392935f, 0.00539397f, 0.0014391f, 0.00410928f, 0.00508208f, 0.00288169f, 0.0029785f, 0.00701518f, 0.00453211f, 0.00167593f, 0.00326063f, 0.00439117f, 0.00441723f, 0.00398831f, 0.00359336f, 0.00360388f, 0.00171005f, 0.00191318f, 0.00136881f, 0.0125032f, 0.00452658f, 0.00186127f, 0.00124482f, 0.00321202f, 0.00284434f, 0.00151499f, 0.00278997f, 0.00286512f, 0.00181599f, 0.00232183f, 0.00164197f, 0.00185301f, 0.00184921f, 0.0015769f, 0.00407748f, 0.00171249f, 0.00729663f, 0.00457782f, 0.0105232f, 0.00547164f, 0.00256688f, 0.00420846f, 0.00194734f, 0.00332563f, 0.00237705f, 0.00147556f, 0.0037626f, 0.00285708f, 0.000651431f, 0.00418334f, 0.00647632f, 0.000985961f, 0.00348098f], rhs_zero_points=[77, 73, 0, 178, 255, 0, 81, 73, 88, 60, 106, 115, 86, 140, 229, 155, 83, 78, 123, 162, 157, 207, 50, 50, 255, 0, 99, 255, 71, 0, 85, 100, 0, 76, 68, 202, 82, 171, 0, 82, 207, 35, 45, 86, 125, 220, 119, 106, 255, 66, 82, 60, 52, 0, 88, 152, 183, 83, 0, 198, 78, 103, 176, 143, 137, 10, 188, 90, 194, 80, 145, 0, 0, 0, 123, 111, 122, 47, 68, 79, 29, 50, 81, 0, 0, 144, 211, 255, 142, 0, 159, 65, 0, 255, 0, 53, 54, 108, 19, 179, 255, 165, 62, 0, 221, 39, 69, 0, 144, 255, 120, 187, 24, 52, 78, 66, 0, 115, 182, 255, 62, 255, 132, 56, 154, 71, 0, 143, 0, 198, 141, 91, 0, 148, 143, 35, 164, 255, 255, 0, 255, 13, 0, 81, 255, 159, 46, 71, 89, 255, 127, 93, 123, 189, 124, 87, 16, 143, 48, 97, 101, 57, 118, 0, 89, 205, 54, 54, 176, 75, 30, 73, 192, 96, 95, 102, 155, 63, 70, 127, 117, 0, 68, 51, 0, 35, 105, 0, 0, 84, 64, 0, 220, 165, 86, 0, 118, 0, 38, 91, 161, 185, 0, 42, 243, 208, 143, 77, 183, 177, 191, 106, 154, 83, 0, 122, 163, 22, 110, 119, 85, 71, 131, 81, 147, 104, 191, 79, 207, 122, 255, 0, 0, 227, 0, 183, 89, 116, 166, 0, 103, 167, 85, 0, 0, 48, 255, 245, 42, 255, 68, 150, 111, 239, 170, 132, 0, 209, 85, 0, 102, 98, 78, 240, 45, 0, 151, 167, 255, 77, 90, 132, 128, 0, 0, 0, 0, 255, 31, 146, 105, 245, 0, 173, 95, 225, 111, 0, 0, 255, 0, 16, 73, 0, 127, 190, 120, 42, 92, 13, 189, 84, 143, 28, 0, 115, 44, 241, 92, 147, 255, 0, 0, 78, 113, 144, 0, 17, 145, 102, 141, 158, 86, 138, 41, 132, 216, 188, 63, 96, 0, 70, 219, 97, 103, 255, 78, 232, 225, 116, 0, 86, 0, 59, 103, 182, 255, 0, 237, 72, 148, 79, 155, 112, 60, 0, 219, 0, 32, 98, 31, 77, 0, 99, 128, 36, 60, 117, 68, 255, 168, 169, 137, 191, 128, 118, 120, 0, 0, 0, 0, 255, 0, 99, 95, 44, 98, 108, 215, 82, 201, 0, 243, 96, 255, 253, 32, 255, 168, 92, 109, 72, 130, 0, 108, 43, 124, 87, 0, 255, 157, 72, 130, 255, 89, 110, 77, 102, 227, 76, 90, 179, 159, 163, 96, 83, 124, 55, 38, 71, 255, 89, 0, 0, 0, 255, 52, 255, 255, 120, 110, 88, 34, 73, 0, 255, 168, 197, 119, 53, 41, 139, 255, 40, 0, 132, 172, 44, 255, 18, 44, 0, 22, 76, 66, 46, 144, 13, 0, 54, 156, 72, 156, 64, 64, 0, 255, 0, 155, 77, 0, 174, 151, 42, 131, 122, 45, 75, 94, 192, 244, 210, 255, 130, 0, 85, 94, 192, 129, 33, 44, 0, 69, 0, 209, 24, 115, 255, 107, 118, 73, 67], scales=[0.040943f], zero_points=[146]) /* ty=Tensor[(1, 512, 20, 20), uint8] */
  };
  %700 = %699(%679, meta[relay.Constant][600] /* ty=Tensor[(512, 1, 3, 3), uint8] */, meta[relay.Constant][601] /* ty=Tensor[(512), int32] */, groups=512, kernel_size=[3, 3], pad_value=15f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.0180559f], lhs_zero_points=[15], rhs_scales=[0.00583006f, 0.00563526f, 0.0020358f, 0.00768301f, 0.0011634f, 0.00270349f, 0.00537454f, 0.00287321f, 0.00346244f, 0.00377513f, 0.00526034f, 0.00592503f, 0.0045709f, 0.00277927f, 0.00231369f, 0.00345479f, 0.00484396f, 0.00228429f, 0.00184961f, 0.00236158f, 0.00201468f, 0.00196393f, 0.0030231f, 0.0034814f, 0.00228309f, 0.00144966f, 0.00465126f, 0.00264605f, 0.00423548f, 0.00134212f, 0.00509516f, 0.00141975f, 0.00180556f, 0.00509123f, 0.00682087f, 0.00160969f, 0.00364606f, 0.00128271f, 0.00295962f, 0.00406076f, 0.00218906f, 0.00301413f, 0.0045476f, 0.0050923f, 0.00237341f, 0.0025206f, 0.00162418f, 0.00705727f, 0.00262741f, 0.00220335f, 0.00600619f, 0.00586345f, 0.00282866f, 0.00142027f, 0.00339801f, 0.00415023f, 0.00348869f, 0.00535259f, 0.00190141f, 0.00316677f, 0.00153013f, 0.00244531f, 0.00233056f, 0.00247056f, 0.00291785f, 0.00124399f, 0.00247905f, 0.00518835f, 0.00243541f, 0.0047318f, 0.00193419f, 0.00212762f, 0.00540938f, 0.000786496f, 0.00382814f, 0.0020958f, 0.00197376f, 0.00225775f, 0.00450172f, 0.00212907f, 0.00343713f, 0.00358515f, 0.00341079f, 0.00176614f, 0.00199145f, 0.00746409f, 0.00253606f, 0.000767739f, 0.00166878f, 0.00158154f, 0.00195357f, 0.00629651f, 0.00194499f, 0.00207251f, 0.00184715f, 0.00172508f, 0.00343983f, 0.00181277f, 0.00575152f, 0.00396811f, 0.00192242f, 0.00678843f, 0.00315556f, 0.00200016f, 0.00266366f, 0.00374595f, 0.00690933f, 0.00142981f, 0.00232024f, 0.00286198f, 0.00167009f, 0.00112892f, 0.00251586f, 0.00287373f, 0.00453787f, 0.00463089f, 0.00183183f, 0.0117991f, 0.00386841f, 0.00101896f, 0.00261553f, 0.00078827f, 0.00156185f, 0.002214f, 0.00794225f, 0.00469327f, 0.00215211f, 0.00536566f, 0.0011373f, 0.00294559f, 0.00606761f, 0.00489557f, 0.00246206f, 0.00181256f, 0.00339706f, 0.00410716f, 0.00210865f, 0.00324724f, 0.00123672f, 0.00196459f, 0.000958453f, 0.00321522f, 0.00187642f, 0.00509123f, 0.00224488f, 0.00197989f, 0.00223378f, 0.00791181f, 0.00447475f, 0.00152613f, 0.00220813f, 0.00526137f, 0.00257158f, 0.00129559f, 0.00172162f, 0.00217497f, 0.00393785f, 0.0204092f, 0.00571866f, 0.00570972f, 0.00481319f, 0.00358676f, 0.00171559f, 0.00187529f, 0.00523026f, 0.00206176f, 0.0101322f, 0.00514793f, 0.00232136f, 0.00557897f, 0.00287457f, 0.00361133f, 0.00324513f, 0.00660018f, 0.00301461f, 0.00435148f, 0.0015617f, 0.00492668f, 0.00484282f, 0.00259245f, 0.00546373f, 0.00219526f, 0.00110862f, 0.00271453f, 0.00179115f, 0.00152523f, 0.00495157f, 0.00192767f, 0.00200461f, 0.00286767f, 0.00116682f, 0.00195468f, 0.00128779f, 0.00163248f, 0.00150978f, 0.00367785f, 0.0125279f, 0.00210551f, 0.00320388f, 0.00399868f, 0.00245864f, 0.000747914f, 0.00214702f, 0.007426f, 0.00268292f, 0.00291807f, 0.00548594f, 0.00710807f, 0.00355335f, 0.00168158f, 0.00255122f, 0.00329934f, 0.0144195f, 0.00382556f, 0.00192662f, 0.00591133f, 0.0026615f, 0.00389476f, 0.00624749f, 0.00716952f, 0.00176419f, 0.00539125f, 0.0022464f, 0.00426469f, 0.0021691f, 0.00417309f, 0.00273313f, 0.00422571f, 0.00101772f, 0.00468595f, 0.0010912f, 0.00218552f, 0.00169108f, 0.00147976f, 0.00174171f, 0.00156559f, 0.00367508f, 0.00218071f, 0.00238025f, 0.0021167f, 0.00429056f, 0.00279879f, 0.00563793f, 0.00175361f, 0.00195286f, 0.00327973f, 0.000965174f, 0.00110204f, 0.00261319f, 0.00265061f, 0.00121038f, 0.00229833f, 0.00668751f, 0.00154711f, 0.00279943f, 0.00566297f, 0.00130875f, 0.00236232f, 0.00639229f, 0.00179797f, 0.00514582f, 0.0061441f, 0.00208133f, 0.00160305f, 0.00221378f, 0.00210246f, 0.00220862f, 0.0016217f, 0.00227554f, 0.00224313f, 0.00450482f, 0.00190102f, 0.00149572f, 0.00201779f, 0.00207453f, 0.00136499f, 0.00149366f, 0.00264508f, 0.0071537f, 0.00781551f, 0.00160117f, 0.00232539f, 0.00147496f, 0.00267527f, 0.00230308f, 0.00105738f, 0.00226101f, 0.00193849f, 0.00151132f, 0.00213307f, 0.00201604f, 0.00169496f, 0.0026922f, 0.00179482f, 0.00166958f, 0.00194594f, 0.0061288f, 0.00191307f, 0.00262874f, 0.00360565f, 0.000908506f, 0.00588141f, 0.00289267f, 0.00355024f, 0.00176744f, 0.00430789f, 0.00624106f, 0.00252401f, 0.00932283f, 0.00289748f, 0.000618735f, 0.00201894f, 0.00191101f, 0.00503753f, 0.00284986f, 0.00831251f, 0.00211676f, 0.00483717f, 0.0173488f, 0.00207416f, 0.00240419f, 0.00184031f, 0.00503337f, 0.00378617f, 0.00259524f, 0.00357009f, 0.0018795f, 0.00293835f, 0.00496774f, 0.00440876f, 0.00231415f, 0.00400787f, 0.00179759f, 0.00498556f, 0.00295282f, 0.000704105f, 0.00618815f, 0.00156817f, 0.00156055f, 0.00639391f, 0.00180182f, 0.00344578f, 0.00196756f, 0.00527825f, 0.00561146f, 0.00237739f, 0.00287264f, 0.00233529f, 0.000701215f, 0.0013432f, 0.00177549f, 0.00790285f, 0.00173937f, 0.00267007f, 0.00338806f, 0.00214399f, 0.00244039f, 0.00227786f, 0.00407906f, 0.00212799f, 0.00473025f, 0.00250598f, 0.00166709f, 0.00615194f, 0.00721639f, 0.00192438f, 0.00674665f, 0.00184832f, 0.00129773f, 0.0025641f, 0.00152905f, 0.00241706f, 0.00220591f, 0.00419878f, 0.00222728f, 0.00436353f, 0.00258421f, 0.00184969f, 0.00208304f, 0.00089024f, 0.00172047f, 0.0010634f, 0.00170743f, 0.00548609f, 0.00432782f, 0.00317181f, 0.00407486f, 0.00191747f, 0.000975095f, 0.0029096f, 0.00219908f, 0.00157638f, 0.00243377f, 0.00456072f, 0.00372806f, 0.00264809f, 0.00226211f, 0.00103721f, 0.00328029f, 0.00500272f, 0.0018418f, 0.00317161f, 0.00163217f, 0.00202267f, 0.00502167f, 0.00668764f, 0.00148142f, 0.00481808f, 0.00199425f, 0.000707579f, 0.00198992f, 0.00468998f, 0.0020507f, 0.000985509f, 0.00247305f, 0.00430818f, 0.00171285f, 0.00204811f, 0.00124834f, 0.00465399f, 0.00516467f, 0.00155401f, 0.00260369f, 0.00620625f, 0.00400876f, 0.00434523f, 0.00577182f, 0.00174509f, 0.00659192f, 0.00142999f, 0.00135845f, 0.00131673f, 0.00193493f, 0.00214451f, 0.00182128f, 0.000781962f, 0.00406729f, 0.00187327f, 0.00129154f, 0.00665028f, 0.00177066f, 0.00314893f, 0.00224069f, 0.00575069f, 0.0016944f, 0.00168309f, 0.00303397f, 0.00184452f, 0.00443251f, 0.0047363f, 0.0128841f, 0.0088072f, 0.00144786f, 0.00187063f, 0.00198266f, 0.0110537f, 0.00185326f, 0.00357747f, 0.00148945f, 0.00392935f, 0.00539397f, 0.0014391f, 0.00410928f, 0.00508208f, 0.00288169f, 0.0029785f, 0.00701518f, 0.00453211f, 0.00167593f, 0.00326063f, 0.00439117f, 0.00441723f, 0.00398831f, 0.00359336f, 0.00360388f, 0.00171005f, 0.00191318f, 0.00136881f, 0.0125032f, 0.00452658f, 0.00186127f, 0.00124482f, 0.00321202f, 0.00284434f, 0.00151499f, 0.00278997f, 0.00286512f, 0.00181599f, 0.00232183f, 0.00164197f, 0.00185301f, 0.00184921f, 0.0015769f, 0.00407748f, 0.00171249f, 0.00729663f, 0.00457782f, 0.0105232f, 0.00547164f, 0.00256688f, 0.00420846f, 0.00194734f, 0.00332563f, 0.00237705f, 0.00147556f, 0.0037626f, 0.00285708f, 0.000651431f, 0.00418334f, 0.00647632f, 0.000985961f, 0.00348098f], rhs_zero_points=[77, 73, 0, 178, 255, 0, 81, 73, 88, 60, 106, 115, 86, 140, 229, 155, 83, 78, 123, 162, 157, 207, 50, 50, 255, 0, 99, 255, 71, 0, 85, 100, 0, 76, 68, 202, 82, 171, 0, 82, 207, 35, 45, 86, 125, 220, 119, 106, 255, 66, 82, 60, 52, 0, 88, 152, 183, 83, 0, 198, 78, 103, 176, 143, 137, 10, 188, 90, 194, 80, 145, 0, 0, 0, 123, 111, 122, 47, 68, 79, 29, 50, 81, 0, 0, 144, 211, 255, 142, 0, 159, 65, 0, 255, 0, 53, 54, 108, 19, 179, 255, 165, 62, 0, 221, 39, 69, 0, 144, 255, 120, 187, 24, 52, 78, 66, 0, 115, 182, 255, 62, 255, 132, 56, 154, 71, 0, 143, 0, 198, 141, 91, 0, 148, 143, 35, 164, 255, 255, 0, 255, 13, 0, 81, 255, 159, 46, 71, 89, 255, 127, 93, 123, 189, 124, 87, 16, 143, 48, 97, 101, 57, 118, 0, 89, 205, 54, 54, 176, 75, 30, 73, 192, 96, 95, 102, 155, 63, 70, 127, 117, 0, 68, 51, 0, 35, 105, 0, 0, 84, 64, 0, 220, 165, 86, 0, 118, 0, 38, 91, 161, 185, 0, 42, 243, 208, 143, 77, 183, 177, 191, 106, 154, 83, 0, 122, 163, 22, 110, 119, 85, 71, 131, 81, 147, 104, 191, 79, 207, 122, 255, 0, 0, 227, 0, 183, 89, 116, 166, 0, 103, 167, 85, 0, 0, 48, 255, 245, 42, 255, 68, 150, 111, 239, 170, 132, 0, 209, 85, 0, 102, 98, 78, 240, 45, 0, 151, 167, 255, 77, 90, 132, 128, 0, 0, 0, 0, 255, 31, 146, 105, 245, 0, 173, 95, 225, 111, 0, 0, 255, 0, 16, 73, 0, 127, 190, 120, 42, 92, 13, 189, 84, 143, 28, 0, 115, 44, 241, 92, 147, 255, 0, 0, 78, 113, 144, 0, 17, 145, 102, 141, 158, 86, 138, 41, 132, 216, 188, 63, 96, 0, 70, 219, 97, 103, 255, 78, 232, 225, 116, 0, 86, 0, 59, 103, 182, 255, 0, 237, 72, 148, 79, 155, 112, 60, 0, 219, 0, 32, 98, 31, 77, 0, 99, 128, 36, 60, 117, 68, 255, 168, 169, 137, 191, 128, 118, 120, 0, 0, 0, 0, 255, 0, 99, 95, 44, 98, 108, 215, 82, 201, 0, 243, 96, 255, 253, 32, 255, 168, 92, 109, 72, 130, 0, 108, 43, 124, 87, 0, 255, 157, 72, 130, 255, 89, 110, 77, 102, 227, 76, 90, 179, 159, 163, 96, 83, 124, 55, 38, 71, 255, 89, 0, 0, 0, 255, 52, 255, 255, 120, 110, 88, 34, 73, 0, 255, 168, 197, 119, 53, 41, 139, 255, 40, 0, 132, 172, 44, 255, 18, 44, 0, 22, 76, 66, 46, 144, 13, 0, 54, 156, 72, 156, 64, 64, 0, 255, 0, 155, 77, 0, 174, 151, 42, 131, 122, 45, 75, 94, 192, 244, 210, 255, 130, 0, 85, 94, 192, 129, 33, 44, 0, 69, 0, 209, 24, 115, 255, 107, 118, 73, 67], scales=[0.040943f], zero_points=[146], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %701 = dl.dequantize(%700, input_scales=[0.040943f], input_zero_points=[146]) /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %702 = sigmoid(%701) /* /model.23/cv3.2/cv3.2.0/cv3.2.0.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %703 = multiply(%701, %702) /* /model.23/cv3.2/cv3.2.0/cv3.2.0.0/act/Mul_output_0 */ /* ty=Tensor[(1, 512, 20, 20), float32] */;
  %704 = dl.quantize(%703, output_scales=[0.0184333f], output_zero_points=[15]) /* fake_quant_260 */ /* ty=Tensor[(1, 512, 20, 20), uint8] */;
  %705 = fn (%FunctionVar_4_02: Tensor[(1, 512, 20, 20), uint8], %FunctionVar_4_1: Tensor[(128, 512, 1, 1), uint8], %FunctionVar_4_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55adc39d08)) -> Tensor[(1, 128, 20, 20), uint8] {
    %697 = (%FunctionVar_4_02, %FunctionVar_4_1, %FunctionVar_4_2, meta[relay.Constant][590] /* ty=Tensor[(128), float32] */, meta[relay.Constant][591] /* ty=Tensor[(128), int32] */, meta[relay.Constant][592] /* ty=Tensor[(128), int32] */, meta[relay.Constant][593] /* ty=Tensor[(128), int32] */, meta[relay.Constant][594] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%697, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0184333f], lhs_zero_points=[15], rhs_scales=[0.00363091f, 0.00355921f, 0.00377393f, 0.00323843f, 0.00332202f, 0.00361937f, 0.00452484f, 0.00290529f, 0.00320798f, 0.00364341f, 0.00286681f, 0.00304247f, 0.00281995f, 0.00347375f, 0.00380765f, 0.00324457f, 0.00260698f, 0.00279483f, 0.00400586f, 0.00428366f, 0.00273566f, 0.0072188f, 0.00361412f, 0.00403434f, 0.00465243f, 0.00365641f, 0.00447745f, 0.00373893f, 0.00293841f, 0.0039931f, 0.00464943f, 0.00333152f, 0.00465747f, 0.00355474f, 0.000819258f, 0.0040676f, 0.00537922f, 0.00421083f, 0.00395072f, 0.00242431f, 0.00308821f, 0.00314479f, 0.00300275f, 0.00293512f, 0.0049541f, 0.00354592f, 0.00400386f, 0.0023928f, 0.00407024f, 0.00387494f, 0.00301384f, 0.00317019f, 0.00278881f, 0.00284584f, 0.00275252f, 0.00393271f, 0.00247644f, 0.00329333f, 0.00322508f, 0.00315516f, 0.00235804f, 0.00276682f, 0.00269007f, 0.00359367f, 0.00412739f, 0.00454887f, 0.00323519f, 0.00296797f, 0.00293572f, 0.00401464f, 0.00286977f, 0.00807569f, 0.00365884f, 0.00425108f, 0.00380048f, 0.00239945f, 0.00476248f, 0.00314656f, 0.00354276f, 0.00449588f, 0.00242979f, 0.00249491f, 0.00352857f, 0.00421841f, 0.00439648f, 0.00348447f, 0.00851193f, 0.00369693f, 0.00322365f, 0.002928f, 0.00321532f, 0.00258416f, 0.0027382f, 0.00317976f, 0.00568064f, 0.0031655f, 0.00369272f, 0.00348145f, 0.00364658f, 0.00415893f, 0.00339229f, 0.00299425f, 0.00298901f, 0.0033643f, 0.00235463f, 0.00302667f, 0.00386424f, 0.00371286f, 0.003066f, 0.0037424f, 0.00358912f, 0.00291919f, 0.00353503f, 0.0033857f, 0.00371083f, 0.00352152f, 0.00269736f, 0.00317899f, 0.0039034f, 0.00335824f, 0.00362597f, 0.00305952f, 0.00425244f, 0.00274036f, 0.00345105f, 0.00341996f, 0.00431163f, 0.00378765f], rhs_zero_points=[138, 159, 147, 139, 101, 147, 133, 93, 135, 140, 136, 138, 131, 153, 140, 110, 137, 141, 96, 154, 123, 171, 91, 141, 110, 162, 149, 120, 96, 142, 151, 154, 131, 146, 125, 162, 172, 118, 82, 141, 137, 152, 119, 156, 108, 111, 172, 118, 167, 144, 162, 114, 139, 139, 148, 123, 141, 140, 120, 123, 123, 132, 141, 101, 122, 104, 136, 149, 116, 128, 113, 190, 133, 153, 152, 144, 164, 148, 120, 121, 123, 104, 170, 121, 138, 124, 114, 127, 116, 149, 96, 108, 141, 93, 111, 167, 149, 156, 124, 161, 153, 81, 153, 117, 144, 148, 177, 147, 146, 163, 141, 108, 129, 140, 152, 150, 140, 120, 133, 166, 169, 173, 130, 135, 139, 147, 108, 145], scales=[0.0221805f], zero_points=[151]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %706 = %705(%704, meta[relay.Constant][602] /* ty=Tensor[(128, 512, 1, 1), uint8] */, meta[relay.Constant][603] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0184333f], lhs_zero_points=[15], rhs_scales=[0.00363091f, 0.00355921f, 0.00377393f, 0.00323843f, 0.00332202f, 0.00361937f, 0.00452484f, 0.00290529f, 0.00320798f, 0.00364341f, 0.00286681f, 0.00304247f, 0.00281995f, 0.00347375f, 0.00380765f, 0.00324457f, 0.00260698f, 0.00279483f, 0.00400586f, 0.00428366f, 0.00273566f, 0.0072188f, 0.00361412f, 0.00403434f, 0.00465243f, 0.00365641f, 0.00447745f, 0.00373893f, 0.00293841f, 0.0039931f, 0.00464943f, 0.00333152f, 0.00465747f, 0.00355474f, 0.000819258f, 0.0040676f, 0.00537922f, 0.00421083f, 0.00395072f, 0.00242431f, 0.00308821f, 0.00314479f, 0.00300275f, 0.00293512f, 0.0049541f, 0.00354592f, 0.00400386f, 0.0023928f, 0.00407024f, 0.00387494f, 0.00301384f, 0.00317019f, 0.00278881f, 0.00284584f, 0.00275252f, 0.00393271f, 0.00247644f, 0.00329333f, 0.00322508f, 0.00315516f, 0.00235804f, 0.00276682f, 0.00269007f, 0.00359367f, 0.00412739f, 0.00454887f, 0.00323519f, 0.00296797f, 0.00293572f, 0.00401464f, 0.00286977f, 0.00807569f, 0.00365884f, 0.00425108f, 0.00380048f, 0.00239945f, 0.00476248f, 0.00314656f, 0.00354276f, 0.00449588f, 0.00242979f, 0.00249491f, 0.00352857f, 0.00421841f, 0.00439648f, 0.00348447f, 0.00851193f, 0.00369693f, 0.00322365f, 0.002928f, 0.00321532f, 0.00258416f, 0.0027382f, 0.00317976f, 0.00568064f, 0.0031655f, 0.00369272f, 0.00348145f, 0.00364658f, 0.00415893f, 0.00339229f, 0.00299425f, 0.00298901f, 0.0033643f, 0.00235463f, 0.00302667f, 0.00386424f, 0.00371286f, 0.003066f, 0.0037424f, 0.00358912f, 0.00291919f, 0.00353503f, 0.0033857f, 0.00371083f, 0.00352152f, 0.00269736f, 0.00317899f, 0.0039034f, 0.00335824f, 0.00362597f, 0.00305952f, 0.00425244f, 0.00274036f, 0.00345105f, 0.00341996f, 0.00431163f, 0.00378765f], rhs_zero_points=[138, 159, 147, 139, 101, 147, 133, 93, 135, 140, 136, 138, 131, 153, 140, 110, 137, 141, 96, 154, 123, 171, 91, 141, 110, 162, 149, 120, 96, 142, 151, 154, 131, 146, 125, 162, 172, 118, 82, 141, 137, 152, 119, 156, 108, 111, 172, 118, 167, 144, 162, 114, 139, 139, 148, 123, 141, 140, 120, 123, 123, 132, 141, 101, 122, 104, 136, 149, 116, 128, 113, 190, 133, 153, 152, 144, 164, 148, 120, 121, 123, 104, 170, 121, 138, 124, 114, 127, 116, 149, 96, 108, 141, 93, 111, 167, 149, 156, 124, 161, 153, 81, 153, 117, 144, 148, 177, 147, 146, 163, 141, 108, 129, 140, 152, 150, 140, 120, 133, 166, 169, 173, 130, 135, 139, 147, 108, 145], scales=[0.0221805f], zero_points=[151], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %707 = dl.dequantize(%706, input_scales=[0.0221805f], input_zero_points=[151]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %708 = sigmoid(%707) /* /model.23/cv3.2/cv3.2.0/cv3.2.0.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %709 = multiply(%707, %708) /* /model.23/cv3.2/cv3.2.0/cv3.2.0.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %710 = dl.quantize(%709, output_scales=[0.00934115f], output_zero_points=[30]) /* fake_quant_263 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %711 = fn (%FunctionVar_3_02: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_3_1: Tensor[(128, 1, 3, 3), uint8], %FunctionVar_3_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55a9c1e918)) -> Tensor[(1, 128, 20, 20), uint8] {
    %696 = (%FunctionVar_3_02, %FunctionVar_3_1, %FunctionVar_3_2, meta[relay.Constant][585] /* ty=Tensor[(128), float32] */, meta[relay.Constant][586] /* ty=Tensor[(128), int32] */, meta[relay.Constant][587] /* ty=Tensor[(128), int32] */, meta[relay.Constant][588] /* ty=Tensor[(128), int32] */, meta[relay.Constant][589] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%696, groups=128, kernel_size=[3, 3], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00934115f], lhs_zero_points=[30], rhs_scales=[0.00154524f, 0.000810252f, 0.000638513f, 0.00076077f, 0.00167395f, 0.00590984f, 0.000811956f, 0.0063007f, 0.00336591f, 0.000853117f, 0.0015739f, 0.00222986f, 0.00313052f, 0.00366792f, 0.000902433f, 0.00157826f, 0.00222953f, 0.00708576f, 0.00185399f, 0.00115458f, 0.00785477f, 0.0251174f, 0.0189157f, 0.000847251f, 0.0019064f, 0.00392438f, 0.011247f, 0.00158076f, 0.00690664f, 0.00146923f, 0.00095466f, 0.00137661f, 0.00407114f, 0.000837098f, 0.00200637f, 0.00155085f, 0.00393647f, 0.00312615f, 0.00443729f, 0.0137443f, 0.00196547f, 0.00854808f, 0.00233078f, 0.00143405f, 0.00115413f, 0.000658809f, 0.00611216f, 0.00791879f, 0.00220643f, 0.000948616f, 0.0075695f, 0.00176781f, 0.00218618f, 0.00113536f, 0.00194892f, 0.000703096f, 0.00537038f, 0.000952068f, 0.00170154f, 0.00215942f, 0.00233009f, 0.00197816f, 0.0021281f, 0.00256778f, 0.00129488f, 0.0014747f, 0.000802564f, 0.000683027f, 0.001908f, 0.0039267f, 0.00203033f, 0.0149622f, 0.000747296f, 0.00172986f, 0.000752036f, 0.00282858f, 0.00332893f, 0.00195958f, 0.00139515f, 0.0164226f, 0.0025526f, 0.00190808f, 0.0035203f, 0.00595417f, 0.00312768f, 0.00300978f, 0.0145072f, 0.00193457f, 0.00352314f, 0.000666109f, 0.00165986f, 0.00158403f, 0.00647599f, 0.0121278f, 0.00276456f, 0.00325807f, 0.00241579f, 0.00112991f, 0.00135496f, 0.00167062f, 0.000735444f, 0.0154047f, 0.00184335f, 0.00682906f, 0.0108288f, 0.00213321f, 0.000869554f, 0.000829834f, 0.000750303f, 0.00363947f, 0.00217185f, 0.00169781f, 0.000729433f, 0.00148148f, 0.000742033f, 0.00075661f, 0.00142613f, 0.000819814f, 0.00628168f, 0.00374444f, 0.000933079f, 0.00308822f, 0.0141583f, 0.00103638f, 0.00101398f, 0.000951161f, 0.00249585f, 0.000818861f], rhs_zero_points=[254, 0, 0, 0, 255, 24, 0, 14, 50, 0, 0, 235, 217, 2, 59, 255, 231, 162, 255, 0, 160, 99, 127, 0, 0, 38, 51, 255, 22, 238, 0, 247, 242, 0, 255, 255, 181, 255, 14, 249, 223, 213, 223, 0, 67, 0, 9, 177, 236, 14, 180, 255, 255, 6, 225, 0, 71, 0, 255, 255, 249, 255, 222, 9, 0, 255, 0, 2, 255, 255, 255, 16, 28, 242, 0, 237, 50, 255, 252, 60, 191, 250, 30, 79, 43, 65, 18, 216, 0, 0, 255, 255, 194, 83, 192, 0, 0, 0, 30, 247, 0, 117, 255, 118, 228, 210, 34, 0, 0, 40, 0, 255, 0, 248, 0, 0, 206, 18, 54, 26, 4, 255, 57, 0, 44, 0, 250, 0], scales=[0.0260525f], zero_points=[119]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %712 = %711(%710, meta[relay.Constant][604] /* ty=Tensor[(128, 1, 3, 3), uint8] */, meta[relay.Constant][605] /* ty=Tensor[(128), int32] */, groups=128, kernel_size=[3, 3], pad_value=30f, pad_width=[[0, 0], [0, 0], [1, 1], [1, 1]], lhs_scales=[0.00934115f], lhs_zero_points=[30], rhs_scales=[0.00154524f, 0.000810252f, 0.000638513f, 0.00076077f, 0.00167395f, 0.00590984f, 0.000811956f, 0.0063007f, 0.00336591f, 0.000853117f, 0.0015739f, 0.00222986f, 0.00313052f, 0.00366792f, 0.000902433f, 0.00157826f, 0.00222953f, 0.00708576f, 0.00185399f, 0.00115458f, 0.00785477f, 0.0251174f, 0.0189157f, 0.000847251f, 0.0019064f, 0.00392438f, 0.011247f, 0.00158076f, 0.00690664f, 0.00146923f, 0.00095466f, 0.00137661f, 0.00407114f, 0.000837098f, 0.00200637f, 0.00155085f, 0.00393647f, 0.00312615f, 0.00443729f, 0.0137443f, 0.00196547f, 0.00854808f, 0.00233078f, 0.00143405f, 0.00115413f, 0.000658809f, 0.00611216f, 0.00791879f, 0.00220643f, 0.000948616f, 0.0075695f, 0.00176781f, 0.00218618f, 0.00113536f, 0.00194892f, 0.000703096f, 0.00537038f, 0.000952068f, 0.00170154f, 0.00215942f, 0.00233009f, 0.00197816f, 0.0021281f, 0.00256778f, 0.00129488f, 0.0014747f, 0.000802564f, 0.000683027f, 0.001908f, 0.0039267f, 0.00203033f, 0.0149622f, 0.000747296f, 0.00172986f, 0.000752036f, 0.00282858f, 0.00332893f, 0.00195958f, 0.00139515f, 0.0164226f, 0.0025526f, 0.00190808f, 0.0035203f, 0.00595417f, 0.00312768f, 0.00300978f, 0.0145072f, 0.00193457f, 0.00352314f, 0.000666109f, 0.00165986f, 0.00158403f, 0.00647599f, 0.0121278f, 0.00276456f, 0.00325807f, 0.00241579f, 0.00112991f, 0.00135496f, 0.00167062f, 0.000735444f, 0.0154047f, 0.00184335f, 0.00682906f, 0.0108288f, 0.00213321f, 0.000869554f, 0.000829834f, 0.000750303f, 0.00363947f, 0.00217185f, 0.00169781f, 0.000729433f, 0.00148148f, 0.000742033f, 0.00075661f, 0.00142613f, 0.000819814f, 0.00628168f, 0.00374444f, 0.000933079f, 0.00308822f, 0.0141583f, 0.00103638f, 0.00101398f, 0.000951161f, 0.00249585f, 0.000818861f], rhs_zero_points=[254, 0, 0, 0, 255, 24, 0, 14, 50, 0, 0, 235, 217, 2, 59, 255, 231, 162, 255, 0, 160, 99, 127, 0, 0, 38, 51, 255, 22, 238, 0, 247, 242, 0, 255, 255, 181, 255, 14, 249, 223, 213, 223, 0, 67, 0, 9, 177, 236, 14, 180, 255, 255, 6, 225, 0, 71, 0, 255, 255, 249, 255, 222, 9, 0, 255, 0, 2, 255, 255, 255, 16, 28, 242, 0, 237, 50, 255, 252, 60, 191, 250, 30, 79, 43, 65, 18, 216, 0, 0, 255, 255, 194, 83, 192, 0, 0, 0, 30, 247, 0, 117, 255, 118, 228, 210, 34, 0, 0, 40, 0, 255, 0, 248, 0, 0, 206, 18, 54, 26, 4, 255, 57, 0, 44, 0, 250, 0], scales=[0.0260525f], zero_points=[119], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %713 = dl.dequantize(%712, input_scales=[0.0260525f], input_zero_points=[119]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %714 = sigmoid(%713) /* /model.23/cv3.2/cv3.2.1/cv3.2.1.0/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %715 = multiply(%713, %714) /* /model.23/cv3.2/cv3.2.1/cv3.2.1.0/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %716 = dl.quantize(%715, output_scales=[0.0146402f], output_zero_points=[19]) /* fake_quant_266 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %717 = fn (%FunctionVar_2_03: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_2_1: Tensor[(128, 128, 1, 1), uint8], %FunctionVar_2_2: Tensor[(128), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aafbf828)) -> Tensor[(1, 128, 20, 20), uint8] {
    %695 = (%FunctionVar_2_03, %FunctionVar_2_1, %FunctionVar_2_2, meta[relay.Constant][580] /* ty=Tensor[(128), float32] */, meta[relay.Constant][581] /* ty=Tensor[(128), int32] */, meta[relay.Constant][582] /* ty=Tensor[(128), int32] */, meta[relay.Constant][583] /* ty=Tensor[(128), int32] */, meta[relay.Constant][584] /* ty=Tensor[(128), int32] */);
    dl.quantized_conv2d(%695, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0146402f], lhs_zero_points=[19], rhs_scales=[0.0070388f, 0.00717963f, 0.0100103f, 0.0114819f, 0.00957609f, 0.0102902f, 0.00802377f, 0.0230664f, 0.00690773f, 0.00897112f, 0.010064f, 0.00876468f, 0.00606042f, 0.00781793f, 0.00835589f, 0.00955432f, 0.0126949f, 0.0244289f, 0.00898505f, 0.0075512f, 0.00555324f, 0.0115223f, 0.00879196f, 0.00818755f, 0.0130743f, 0.00678851f, 0.00980264f, 0.00744772f, 0.028912f, 0.00936517f, 0.0117475f, 0.00880806f, 0.00777011f, 0.00737981f, 0.00804049f, 0.0148346f, 0.00964018f, 0.00934693f, 0.00768701f, 0.00832142f, 0.00916598f, 0.00648818f, 0.00797918f, 0.0100058f, 0.012816f, 0.00850253f, 0.0111812f, 0.00780976f, 0.00760431f, 0.00739123f, 0.0070592f, 0.0126876f, 0.0112224f, 0.00888919f, 0.00872694f, 0.00817866f, 0.00988618f, 0.00911165f, 0.0091982f, 0.00740101f, 0.00904649f, 0.00824626f, 0.00635514f, 0.00760444f, 0.00786454f, 0.00989523f, 0.00735183f, 0.009104f, 0.00833823f, 0.0111748f, 0.0118737f, 0.00988951f, 0.0107808f, 0.00755986f, 0.00668436f, 0.00863025f, 0.00903035f, 0.00975489f, 0.00628104f, 0.00740202f, 0.00851438f, 0.0110108f, 0.00742011f, 0.00834587f, 0.0088208f, 0.00929396f, 0.022778f, 0.0101484f, 0.00739021f, 0.00705029f, 0.00936287f, 0.0105405f, 0.00544083f, 0.00986389f, 0.00907214f, 0.00670219f, 0.00871259f, 0.0072196f, 0.00947955f, 0.0066248f, 0.00824695f, 0.010366f, 0.0131726f, 0.0105637f, 0.0122857f, 0.0109335f, 0.00852302f, 0.00673896f, 0.00769986f, 0.0082505f, 0.0109672f, 0.0108306f, 0.00706916f, 0.00985502f, 0.00820775f, 0.00983247f, 0.0090966f, 0.00990969f, 0.00872862f, 0.00761154f, 0.0103333f, 0.00898938f, 0.0152071f, 0.00927756f, 0.00952402f, 0.0095269f, 0.00806153f, 0.0102648f], rhs_zero_points=[120, 143, 100, 185, 113, 142, 124, 147, 112, 114, 134, 142, 124, 138, 133, 121, 152, 150, 126, 161, 134, 170, 123, 143, 142, 123, 122, 104, 149, 133, 120, 124, 108, 109, 141, 130, 114, 146, 125, 123, 127, 118, 117, 118, 80, 100, 107, 135, 140, 99, 117, 106, 120, 125, 125, 120, 131, 120, 112, 116, 110, 135, 106, 117, 139, 145, 145, 157, 115, 109, 138, 130, 145, 117, 131, 124, 149, 168, 120, 127, 130, 112, 117, 108, 117, 136, 148, 141, 137, 144, 97, 118, 120, 142, 111, 132, 134, 120, 157, 122, 94, 110, 142, 154, 133, 129, 141, 134, 107, 121, 148, 100, 110, 110, 108, 143, 105, 99, 126, 131, 137, 152, 141, 151, 167, 138, 155, 160], scales=[0.0640012f], zero_points=[78]) /* ty=Tensor[(1, 128, 20, 20), uint8] */
  };
  %718 = %717(%716, meta[relay.Constant][606] /* ty=Tensor[(128, 128, 1, 1), uint8] */, meta[relay.Constant][607] /* ty=Tensor[(128), int32] */, kernel_size=[1, 1], lhs_scales=[0.0146402f], lhs_zero_points=[19], rhs_scales=[0.0070388f, 0.00717963f, 0.0100103f, 0.0114819f, 0.00957609f, 0.0102902f, 0.00802377f, 0.0230664f, 0.00690773f, 0.00897112f, 0.010064f, 0.00876468f, 0.00606042f, 0.00781793f, 0.00835589f, 0.00955432f, 0.0126949f, 0.0244289f, 0.00898505f, 0.0075512f, 0.00555324f, 0.0115223f, 0.00879196f, 0.00818755f, 0.0130743f, 0.00678851f, 0.00980264f, 0.00744772f, 0.028912f, 0.00936517f, 0.0117475f, 0.00880806f, 0.00777011f, 0.00737981f, 0.00804049f, 0.0148346f, 0.00964018f, 0.00934693f, 0.00768701f, 0.00832142f, 0.00916598f, 0.00648818f, 0.00797918f, 0.0100058f, 0.012816f, 0.00850253f, 0.0111812f, 0.00780976f, 0.00760431f, 0.00739123f, 0.0070592f, 0.0126876f, 0.0112224f, 0.00888919f, 0.00872694f, 0.00817866f, 0.00988618f, 0.00911165f, 0.0091982f, 0.00740101f, 0.00904649f, 0.00824626f, 0.00635514f, 0.00760444f, 0.00786454f, 0.00989523f, 0.00735183f, 0.009104f, 0.00833823f, 0.0111748f, 0.0118737f, 0.00988951f, 0.0107808f, 0.00755986f, 0.00668436f, 0.00863025f, 0.00903035f, 0.00975489f, 0.00628104f, 0.00740202f, 0.00851438f, 0.0110108f, 0.00742011f, 0.00834587f, 0.0088208f, 0.00929396f, 0.022778f, 0.0101484f, 0.00739021f, 0.00705029f, 0.00936287f, 0.0105405f, 0.00544083f, 0.00986389f, 0.00907214f, 0.00670219f, 0.00871259f, 0.0072196f, 0.00947955f, 0.0066248f, 0.00824695f, 0.010366f, 0.0131726f, 0.0105637f, 0.0122857f, 0.0109335f, 0.00852302f, 0.00673896f, 0.00769986f, 0.0082505f, 0.0109672f, 0.0108306f, 0.00706916f, 0.00985502f, 0.00820775f, 0.00983247f, 0.0090966f, 0.00990969f, 0.00872862f, 0.00761154f, 0.0103333f, 0.00898938f, 0.0152071f, 0.00927756f, 0.00952402f, 0.0095269f, 0.00806153f, 0.0102648f], rhs_zero_points=[120, 143, 100, 185, 113, 142, 124, 147, 112, 114, 134, 142, 124, 138, 133, 121, 152, 150, 126, 161, 134, 170, 123, 143, 142, 123, 122, 104, 149, 133, 120, 124, 108, 109, 141, 130, 114, 146, 125, 123, 127, 118, 117, 118, 80, 100, 107, 135, 140, 99, 117, 106, 120, 125, 125, 120, 131, 120, 112, 116, 110, 135, 106, 117, 139, 145, 145, 157, 115, 109, 138, 130, 145, 117, 131, 124, 149, 168, 120, 127, 130, 112, 117, 108, 117, 136, 148, 141, 137, 144, 97, 118, 120, 142, 111, 132, 134, 120, 157, 122, 94, 110, 142, 154, 133, 129, 141, 134, 107, 121, 148, 100, 110, 110, 108, 143, 105, 99, 126, 131, 137, 152, 141, 151, 167, 138, 155, 160], scales=[0.0640012f], zero_points=[78], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %719 = dl.dequantize(%718, input_scales=[0.0640012f], input_zero_points=[78]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %720 = sigmoid(%719) /* /model.23/cv3.2/cv3.2.1/cv3.2.1.1/act/Sigmoid_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %721 = multiply(%719, %720) /* /model.23/cv3.2/cv3.2.1/cv3.2.1.1/act/Mul_output_0 */ /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %722 = dl.quantize(%721, output_scales=[0.0455251f], output_zero_points=[6]) /* fake_quant_269 */ /* ty=Tensor[(1, 128, 20, 20), uint8] */;
  %723 = fn (%FunctionVar_1_05: Tensor[(1, 128, 20, 20), uint8], %FunctionVar_1_11: Tensor[(80, 128, 1, 1), uint8], %FunctionVar_1_2: Tensor[(80), int32], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab067a08)) -> Tensor[(1, 80, 20, 20), uint8] {
    %694 = (%FunctionVar_1_05, %FunctionVar_1_11, %FunctionVar_1_2, meta[relay.Constant][575] /* ty=Tensor[(80), float32] */, meta[relay.Constant][576] /* ty=Tensor[(80), int32] */, meta[relay.Constant][577] /* ty=Tensor[(80), int32] */, meta[relay.Constant][578] /* ty=Tensor[(80), int32] */, meta[relay.Constant][579] /* ty=Tensor[(80), int32] */);
    dl.quantized_conv2d(%694, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="uint8", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.0455251f], lhs_zero_points=[6], rhs_scales=[0.00110174f, 0.000619926f, 0.000681679f, 0.000628303f, 0.000649127f, 0.000634766f, 0.000779096f, 0.000644818f, 0.000724045f, 0.000539862f, 0.000545128f, 0.000476314f, 0.00052933f, 0.000867896f, 0.000638356f, 0.00057373f, 0.000590007f, 0.00063333f, 0.000634766f, 0.000579236f, 0.000615139f, 0.000533878f, 0.000564396f, 0.000557215f, 0.000569063f, 0.000702503f, 0.000775625f, 0.000593118f, 0.000646255f, 0.000480383f, 0.00053699f, 0.000517961f, 0.000444719f, 0.000571098f, 0.000524543f, 0.000533639f, 0.000639912f, 0.000596828f, 0.000543213f, 0.000690415f, 0.000528852f, 0.000681918f, 0.000532083f, 0.000545965f, 0.000521192f, 0.000700588f, 0.00061107f, 0.000645776f, 0.000596708f, 0.000611309f, 0.000522748f, 0.000560925f, 0.000527057f, 0.000585698f, 0.000602453f, 0.000793696f, 0.000962441f, 0.000832711f, 0.000682397f, 0.00098135f, 0.00109049f, 0.000704657f, 0.000676652f, 0.00057373f, 0.000453216f, 0.000533519f, 0.000550872f, 0.000520594f, 0.000509584f, 0.00074439f, 0.000429281f, 0.000619447f, 0.000803749f, 0.000720933f, 0.000589648f, 0.000656786f, 0.000743432f, 0.000604846f, 0.000351491f, 0.000608556f], rhs_zero_points=[143, 111, 129, 127, 106, 121, 121, 121, 108, 89, 94, 99, 92, 98, 102, 130, 120, 117, 102, 119, 130, 107, 134, 118, 91, 107, 71, 85, 121, 90, 108, 97, 87, 117, 86, 72, 91, 102, 87, 81, 103, 93, 92, 89, 93, 152, 109, 97, 112, 111, 121, 95, 102, 117, 118, 94, 102, 130, 99, 127, 124, 98, 109, 131, 85, 100, 110, 99, 108, 132, 103, 110, 100, 108, 101, 96, 73, 106, 104, 83], scales=[0.0626569f], zero_points=[255]) /* ty=Tensor[(1, 80, 20, 20), uint8] */
  };
  %724 = %723(%722, meta[relay.Constant][608] /* ty=Tensor[(80, 128, 1, 1), uint8] */, meta[relay.Constant][609] /* ty=Tensor[(80), int32] */, kernel_size=[1, 1], lhs_scales=[0.0455251f], lhs_zero_points=[6], rhs_scales=[0.00110174f, 0.000619926f, 0.000681679f, 0.000628303f, 0.000649127f, 0.000634766f, 0.000779096f, 0.000644818f, 0.000724045f, 0.000539862f, 0.000545128f, 0.000476314f, 0.00052933f, 0.000867896f, 0.000638356f, 0.00057373f, 0.000590007f, 0.00063333f, 0.000634766f, 0.000579236f, 0.000615139f, 0.000533878f, 0.000564396f, 0.000557215f, 0.000569063f, 0.000702503f, 0.000775625f, 0.000593118f, 0.000646255f, 0.000480383f, 0.00053699f, 0.000517961f, 0.000444719f, 0.000571098f, 0.000524543f, 0.000533639f, 0.000639912f, 0.000596828f, 0.000543213f, 0.000690415f, 0.000528852f, 0.000681918f, 0.000532083f, 0.000545965f, 0.000521192f, 0.000700588f, 0.00061107f, 0.000645776f, 0.000596708f, 0.000611309f, 0.000522748f, 0.000560925f, 0.000527057f, 0.000585698f, 0.000602453f, 0.000793696f, 0.000962441f, 0.000832711f, 0.000682397f, 0.00098135f, 0.00109049f, 0.000704657f, 0.000676652f, 0.00057373f, 0.000453216f, 0.000533519f, 0.000550872f, 0.000520594f, 0.000509584f, 0.00074439f, 0.000429281f, 0.000619447f, 0.000803749f, 0.000720933f, 0.000589648f, 0.000656786f, 0.000743432f, 0.000604846f, 0.000351491f, 0.000608556f], rhs_zero_points=[143, 111, 129, 127, 106, 121, 121, 121, 108, 89, 94, 99, 92, 98, 102, 130, 120, 117, 102, 119, 130, 107, 134, 118, 91, 107, 71, 85, 121, 90, 108, 97, 87, 117, 86, 72, 91, 102, 87, 81, 103, 93, 92, 89, 93, 152, 109, 97, 112, 111, 121, 95, 102, 117, 118, 94, 102, 130, 99, 127, 124, 98, 109, 131, 85, 100, 110, 99, 108, 132, 103, 110, 100, 108, 101, 96, 73, 106, 104, 83], scales=[0.0626569f], zero_points=[255], stage0=0, stage1=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 80, 20, 20), uint8] */;
  %725 = dl.dequantize(%693, input_scales=[0.0290487f], input_zero_points=[70]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %726 = dl.dequantize(%724, input_scales=[0.0626569f], input_zero_points=[255]) /* ty=Tensor[(1, 80, 20, 20), float32] */;
  %727 = (%725, %726);
  %728 = concatenate(%727, axis=1) /* /model.23/Concat_2_output_0 */ /* ty=Tensor[(1, 144, 20, 20), float32] */;
  %729 = reshape(%499, newshape=[1, 144, -1]) /* /model.23/Reshape_output_0 */ /* ty=Tensor[(1, 144, 6400), float32] */;
  %730 = reshape(%595, newshape=[1, 144, -1]) /* /model.23/Reshape_1_output_0 */ /* ty=Tensor[(1, 144, 1600), float32] */;
  %731 = reshape(%728, newshape=[1, 144, -1]) /* /model.23/Reshape_2_output_0 */ /* ty=Tensor[(1, 144, 400), float32] */;
  %732 = (%729, %730, %731);
  %733 = concatenate(%732, axis=2) /* /model.23/Concat_3_output_0 */ /* ty=Tensor[(1, 144, 8400), float32] */;
  %734 = split(%733, indices_or_sections=[64], axis=1) /* /model.23/Split_output_0 */ /* ty=(Tensor[(1, 64, 8400), float32], Tensor[(1, 80, 8400), float32]) */;
  %735 = %734.0;
  %736 = reshape(%735, newshape=[1, 4, 16, 8400]) /* /model.23/dfl/Reshape_output_0 */ /* ty=Tensor[(1, 4, 16, 8400), float32] */;
  %737 = fn (%FunctionVar_2_0: Tensor[(1, 4, 16, 8400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aaf4ce58)) -> Tensor[(1, 8400, 4, 16), float32] {
    transpose(%FunctionVar_2_0, axes=[0, 3, 1, 2]) /* /model.23/dfl/Transpose_output_0 */ /* ty=Tensor[(1, 8400, 4, 16), float32] */
  };
  %738 = %737(%736, axes=[0, 3, 1, 2], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 8400, 4, 16), float32] */;
  %739 = max(%738, axis=[3], keepdims=True) /* ty=Tensor[(1, 8400, 4, 1), float32] */;
  %740 = subtract(%738, %739) /* ty=Tensor[(1, 8400, 4, 16), float32] */;
  %741 = exp(%740) /* ty=Tensor[(1, 8400, 4, 16), float32] */;
  %742 = sum(%741, axis=[3], keepdims=True) /* ty=Tensor[(1, 8400, 4, 1), float32] */;
  %743 = divide(%741, %742) /* /model.23/dfl/Softmax_output_0 */ /* ty=Tensor[(1, 8400, 4, 16), float32] */;
  %744 = fn (%FunctionVar_1_0: Tensor[(1, 8400, 4, 16), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55ab0ce418)) -> Tensor[(1, 16, 4, 8400), float32] {
    transpose(%FunctionVar_1_0, axes=[0, 3, 2, 1]) /* /model.23/dfl/Transpose_1_output_0 */ /* ty=Tensor[(1, 16, 4, 8400), float32] */
  };
  %745 = %744(%743, axes=[0, 3, 2, 1], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 16, 4, 8400), float32] */;
  %746 = dl.quantize(%745, output_scales=[0.00243804f], output_zero_points=[0]) /* fake_quant_272 */ /* ty=Tensor[(1, 16, 4, 8400), uint8] */;
  %747 = fn (%FunctionVar_0_01: Tensor[(1, 16, 4, 8400), uint8], %FunctionVar_0_1: Tensor[(1, 16, 1, 1), uint8], PartitionedFromPattern="Tuple_dl.quantized_conv2d_", Composite="ds1:0|te1:1|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aae238d8)) -> Tensor[(1, 1, 4, 8400), float16] {
    %0 = (%FunctionVar_0_01, %FunctionVar_0_1);
    dl.quantized_conv2d(%0, kernel_size=[1, 1], bias_layout="", out_layout="NCHW", out_dtype="float16", pad_width=[[0, 0], [0, 0], [0, 0], [0, 0]], lhs_scales=[0.00243804f], lhs_zero_points=[0], rhs_scales=[0.0588235f], rhs_zero_points=[0]) /* /model.23/dfl/conv/Conv_output_0 */ /* ty=Tensor[(1, 1, 4, 8400), float16] */
  };
  %748 = %747(%746, meta[relay.Constant][610] /* ty=Tensor[(1, 16, 1, 1), uint8] */, kernel_size=[1, 1], lhs_scales=[0.00243804f], lhs_zero_points=[0], rhs_scales=[0.0588235f], rhs_zero_points=[0], stage0=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 1, 4, 8400), float16] */;
  %749 = reshape(%748, newshape=[1, 4, 8400]) /* /model.23/dfl/Reshape_1_output_0 */ /* ty=Tensor[(1, 4, 8400), float16] */;
  %750 = cast(%749, dtype="float32") /* ty=Tensor[(1, 4, 8400), float32] */;
  %751 = strided_slice(%750, begin=[0], end=[2], strides=[1], axes=[1]) /* /model.23/Slice_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %752 = strided_slice(%750, begin=[2], end=[4], strides=[1], axes=[1]) /* /model.23/Slice_1_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %753 = subtract(meta[relay.Constant][0] /* ty=Tensor[(1, 2, 8400), float32] */, %751) /* /model.23/Sub_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %754 = add(meta[relay.Constant][611] /* ty=Tensor[(1, 2, 8400), float32] */, %752) /* /model.23/Add_1_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %755 = add(%753, %754) /* /model.23/Add_2_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %756 = divide(%755, 2f /* ty=float32 */) /* /model.23/Div_1_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %757 = subtract(%754, %753) /* /model.23/Sub_1_output_0 */ /* ty=Tensor[(1, 2, 8400), float32] */;
  %758 = (%756, %757);
  %759 = concatenate(%758, axis=1) /* /model.23/Concat_4_output_0 */ /* ty=Tensor[(1, 4, 8400), float32] */;
  %760 = %734.1;
  %761 = multiply(%759, meta[relay.Constant][612] /* ty=Tensor[(1, 8400), float32] */) /* /model.23/Mul_2_output_0 */ /* ty=Tensor[(1, 4, 8400), float32] */;
  %762 = sigmoid(%760) /* /model.23/Sigmoid_output_0 */ /* ty=Tensor[(1, 80, 8400), float32] */;
  %763 = (%761, %762);
  %764 = concatenate(%763, axis=1) /*  /model.23/Concat_5_output_0 */ /* ty=Tensor[(1, 84, 8400), float32] */;
  %765 = fn (%FunctionVar_0_0: Tensor[(1, 84, 8400), float32], PartitionedFromPattern="transpose_", Composite="ds1:0|te1:0|aso1:0|aso2:0|quantize:0", TuAttrs=relay.attrs.TuAttrs(0x55aadfa918)) -> Tensor[(1, 8400, 84), float32] {
    transpose(%FunctionVar_0_0, axes=[0, 2, 1]) /* output0 */ /* ty=Tensor[(1, 8400, 84), float32] */
  };
  %765(%764, axes=[0, 2, 1], stage4=0, attrs_type_key="relay.attrs.TuAttrs") /* ty=Tensor[(1, 8400, 84), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */